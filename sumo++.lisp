;; $Id: sumo++.lisp,v 1.5 2003/01/22 21:50:55 dflater Exp $
;; This file was generated by sumo2loom.

(make-package "SUMO")
(in-package "SUMO")
(loom:use-loom "SUMO")
(defkb "SUMO-KB" nil :pathname "/proj/sis/tools/loom/sumo-saved-kb")
(change-kb "SUMO-KB")
(creation-policy :classified-instance)

;; Sumo2Loom generates output in two parts.  The first part contains
;; definitions that have been built up from possibly many Suo-Kif
;; statements.  The second part contains the translation of the remainder
;; of the Suo-Kif input, including commentary and asserted relations, in
;; the same order that these appeared in the input.

;; NOTICE:
;; The output of Sumo2Loom is a modified derivative of its input.  For
;; copyright and license terms, therefore, please refer to the commentary
;; in Part 2, which is carried over from the input file.

;; ----- SUMO2LOOM OUTPUT PART 1: DEFINITIONS AND IMPLICATIONS -----

(defconcept 401K-Plan :is-primitive DefinedContributionPlan)
(defconcept 403B-Plan :is-primitive DefinedContributionPlan)
(defconcept 408K-Plan :is-primitive PensionPlan)
(defconcept AONOrder :is-primitive Order)
(defconcept ATMMachine :is-primitive StationaryArtifact)
(defconcept ATMSlot :is-primitive Hole)
(defconcept Abort :is-primitive ComputerProcess)
(defconcept Abstract :is-primitive Entity)
(defconcept AbstractionLevelAttribute :is-primitive TimingRequirementAttribute)
(defconcept AccessingAService :is-primitive ComputerProcess)
(defconcept Address :is-primitive LandArea)
(defconcept Adjective :is-primitive Word)
(defconcept AdjustableRateAccount :is-primitive InterestBearingAccount)
(defconcept Adverb :is-primitive Word)
(defconcept Advertisement :is-primitive ServiceProfile)
(defconcept Advertising :is-primitive Disseminating)
(defconcept AgeGroup :is-primitive Group)
(defconcept Agent :is-primitive Object)
(defconcept AlethicAttribute :is-primitive ObjectiveNorm)
(defconcept Alga :is-primitive NonFloweringPlant)
(defconcept AmericanExpressCard :is-primitive CreditCard)
(defconcept Ampere :is-primitive SumofunctionQuantity)
(defconcept Amphibian :is-primitive ColdBloodedVertebrate)
(defconcept Amu :is-primitive MassMeasure)
(defconcept AnatomicalStructure :is-primitive OrganicObject)
(defconcept AngleMeasure :is-primitive ConstantQuantity)
(defconcept Angstrom :is-primitive LengthMeasure)
(defconcept AngularDegree :is-primitive PlaneAngleMeasure)
(defconcept AnimacyAttribute :is-primitive BiologicalAttribute)
(defconcept Animal :is-primitive Organism)
(defconcept AnimalLanguage :is-primitive Language)
(defconcept Annuity :is-primitive FinancialContract)
(defconcept AntisymmetricSumorelation :is-primitive BinarySumorelation)
(defconcept Ape :is-primitive Primate)
(defconcept April :is-primitive Month)
(defconcept AquaticMammal :is-primitive Mammal)
(defconcept Arachnid :is-primitive Arthropod)
(defconcept AreaMeasure :is-primitive ConstantQuantity)
(defconcept ArtWork :is-primitive Artifact)
(defconcept Arthropod :is-primitive Invertebrate
  :partitions (
    ($PARTITION_22$ (Arachnid Myriapod Insect Crustacean))
  ))
(defconcept Article :is-primitive Text)
(defconcept Artifact :is-primitive CorpuscularObject)
(defconcept ArtificialLanguage :is-primitive Language)
(defconcept AsexualReproduction :is-primitive Replication)
(defconcept Asleep :is-primitive ConsciousnessAttribute)
(defconcept Assessment-DesignPattern :is-primitive DesignPatternAttribute)
(defconcept AssetAllocation :is-primitive FinancialTransaction)
(defconcept AssociativeSumofunction :is-primitive BinarySumofunction)
(defconcept AstronomicalBody :is-primitive Region)
(defconcept AsymmetricSumorelation :is (:and AntisymmetricSumorelation IrreflexiveSumorelation))
(defconcept Atom :is-primitive ElementalSubstance)
(defconcept AtomGram :is-primitive MassMeasure)
(defconcept AtomicNucleus :is-primitive SubatomicParticle)
(defconcept Attaching :is-primitive DualObjectProcess)
(defconcept Attribute :is-primitive Abstract
  :partitions (
    ($PARTITION_4$ (InternalAttribute SumorelationalAttribute))
  ))
(defconcept August :is-primitive Month)
(defconcept AuthorizationOfTransaction :is-primitive (:and ControllingAnAccount RegulatoryProcess))
(defconcept AutomaticApplication :is-primitive ComputerProgram)
(defconcept AutomaticTransaction :is-primitive FinancialTransaction)
(defconcept Awake :is-primitive ConsciousnessAttribute)
(defconcept B2BService :is-primitive WebService)
(defconcept B2CService :is-primitive WebService)
(defconcept Bacterium :is-primitive Microorganism)
(defconcept BalloonLoan :is-primitive Loan)
(defconcept Bank-FinancialOrganization :is-primitive FinancialOrganization)
(defconcept BankCard :is-primitive FinancialInstrument)
(defconcept BankStatement :is-primitive Sumoproposition)
(defconcept BankTermLoan :is-primitive Loan)
(defconcept Battle :is-primitive ViolentContest)
(defconcept Bearish :is-primitive InvestmentAttribute)
(defconcept Becquerel :is-primitive TimeDependentQuantity)
(defconcept BerkeleySoftwareDistribution :is-primitive OperatingSystem)
(defconcept Betting :is-primitive FinancialTransaction)
(defconcept Beverage :is-primitive Food)
(defconcept BinaryPredicate :is (:and BinarySumorelation Predicate))
(defconcept BinarySumofunction :is (:and Sumofunction TernarySumorelation))
(defconcept BinarySumonumber :is-primitive RealSumonumber)
(defconcept BinarySumorelation :is-primitive Sumorelation)
(defconcept BiologicalAttribute :is-primitive InternalAttribute)
(defconcept BiologicalProcess :is-primitive InternalChange)
(defconcept BiologicallyActiveSubstance :is-primitive Substance)
(defconcept Bird :is-primitive WarmBloodedVertebrate)
(defconcept Birth :is-primitive OrganismProcess)
(defconcept Bit :is-primitive InformationMeasure)
(defconcept BitsPerSecond :is-primitive TimeDependentQuantity)
(defconcept Blood :is-primitive BodySubstance)
(defconcept BlueChipStock :is-primitive Stock)
(defconcept BodyCovering :is-primitive BodyPart)
(defconcept BodyJunction :is-primitive BodyPart)
(defconcept BodyMotion :is-primitive Motion)
(defconcept BodyPart :is-primitive AnatomicalStructure)
(defconcept BodySubstance :is-primitive Mixture)
(defconcept BodyVessel :is-primitive BodyPart)
(defconcept Boiling :is-primitive StateChange)
(defconcept Bond :is-primitive (:and FinancialInstrument Investment))
(defconcept Bone :is-primitive Tissue)
(defconcept Book :is-primitive Text)
(defconcept BorrowedStock :is-primitive Stock)
(defconcept Borrowing :is-primitive Getting)
(defconcept BreakabilityAttribute :is-primitive InternalAttribute)
(defconcept Breathing :is-primitive OrganismProcess)
(defconcept BridgeLoan :is-primitive Loan)
(defconcept BritishThermalUnit :is-primitive SumofunctionQuantity)
(defconcept Broker :is-primitive CognitiveAgent)
(defconcept BrokerLoan :is-primitive Loan)
(defconcept Building :is-primitive StationaryArtifact)
(defconcept Bullish :is-primitive InvestmentAttribute)
(defconcept BusNetwork :is-primitive LAN)
(defconcept ButterflySpread :is-primitive SpreadOption)
(defconcept Buying :is-primitive FinancialTransaction)
(defconcept Byte :is-primitive InformationMeasure)
(defconcept CPU :is-primitive ComputerHardware)
(defconcept Calculating :is-primitive IntentionalPsychologicalProcess)
(defconcept Call :is-primitive FinancialTransaction)
(defconcept CallOption :is-primitive Option)
(defconcept CallableBond :is-primitive Bond)
(defconcept CallableLoan :is-primitive Loan)
(defconcept Calorie :is-primitive SumofunctionQuantity)
(defconcept CancellingAnOrder :is-primitive FinancialTransaction)
(defconcept Candela :is-primitive SumofunctionQuantity)
(defconcept Canine :is-primitive Carnivore)
(defconcept Carbohydrate :is-primitive Nutrient)
(defconcept Carnivore :is-primitive Mammal)
(defconcept CaseRole :is (:and AsymmetricSumorelation BinaryPredicate))
(defconcept Cash :is-primitive (:and FinancialAsset FinancialInstrument))
(defconcept Cell :is-primitive BodyPart)
(defconcept CelsiusDegree :is-primitive TemperatureMeasure)
(defconcept Centimeter :is-primitive LengthMeasure)
(defconcept CentralProcessingUnit :is-primitive ComputerComponent)
(defconcept Certificate :is-primitive Text)
(defconcept CertificateOfDeposit :is-primitive SavingsAccount)
(defconcept ChangeOfPossession :is-primitive SocialInteraction)
(defconcept ChargingAFee :is-primitive FinancialTransaction)
(defconcept Check :is-primitive FinancialInstrument)
(defconcept CheckingAccount :is-primitive DepositAccount)
(defconcept ChemicalDecomposition :is-primitive (:and ChemicalProcess Separating))
(defconcept ChemicalProcess :is-primitive InternalChange)
(defconcept ChemicalSynthesis :is-primitive (:and ChemicalProcess Combining))
(defconcept City :is-primitive (:and GeopoliticalArea LandArea))
(defconcept ClosingAnAccount :is-primitive (:and FinancialService FinancialTransaction))
(defconcept Clothing :is-primitive Artifact)
(defconcept CognitiveAgent :is-primitive SentientAgent)
(defconcept ColdBloodedVertebrate :is-primitive Vertebrate
  :partitions (
    ($PARTITION_23$ (Amphibian Fish Reptile))
  ))
(defconcept Collateral :is-primitive FinancialAsset)
(defconcept ColorAttribute :is-primitive VisualAttribute)
(defconcept Coloring :is-primitive SurfaceChange)
(defconcept Combining :is-primitive DualObjectProcess)
(defconcept Combustion :is-primitive ChemicalDecomposition)
(defconcept CommercialService :is-primitive FinancialTransaction)
(defconcept Committing :is-primitive Communication)
(defconcept CommonStock :is-primitive Stock)
(defconcept Communication :is-primitive SocialInteraction)
(defconcept CommutativeSumofunction :is-primitive BinarySumofunction)
(defconcept Comparing :is-primitive (:and DualObjectProcess IntentionalPsychologicalProcess))
(defconcept ComplexService :is-primitive WebService)
(defconcept ComplexSumonumber :is-primitive Sumonumber)
(defconcept ComplexityAttribute :is-primitive TimingRequirementAttribute)
(defconcept CompositeProcess :is-primitive ServiceProcess)
(defconcept CompoundSubstance :is-primitive PureSubstance)
(defconcept ComputationalSystem :is-primitive (:and Artifact Product))
(defconcept Computer :is-primitive Device)
(defconcept ComputerComponent :is-primitive ComputerHardware)
(defconcept ComputerData :is-primitive ContentBearingObject)
(defconcept ComputerDirectory :is-primitive ComputerFile)
(defconcept ComputerFile :is-primitive ComputerData)
(defconcept ComputerHardware :is-primitive EngineeringComponent)
(defconcept ComputerInputDevice :is-primitive ComputerHardware)
(defconcept ComputerLanguage :is-primitive ArtificialLanguage)
(defconcept ComputerMemory :is-primitive (:and ComputerComponent ComputerHardware))
(defconcept ComputerNetwork :is-primitive (:and ComputationalSystem RealtimeSystem))
(defconcept ComputerOutputDevice :is-primitive (:and ComputerHardware Terminal))
(defconcept ComputerPassword :is-primitive SymbolicString)
(defconcept ComputerPath :is-primitive ComputerData)
(defconcept ComputerPathAttribute :is-primitive SoftwareAttribute)
(defconcept ComputerProcess :is-primitive (:and InternalChange Process))
(defconcept ComputerProgram :is-primitive Procedure)
(defconcept ComputerResource :is-primitive ComputationalSystem)
(defconcept ComputerResponse :is-primitive ComputerProcess)
(defconcept ComputerStatus :is-primitive Attribute)
(defconcept ComputerTask :is-primitive ComputerProcess)
(defconcept ComputerUser :is-primitive CognitiveAgent)
(defconcept Concurrency-FormOfAdaptation :is-primitive FormOfAdaptationAttribute)
(defconcept Condensing :is-primitive StateChange)
(defconcept Confining :is-primitive Keeping)
(defconcept ConsciousnessAttribute :is-primitive StateOfMind)
(defconcept ConsolidationLoan :is-primitive Loan)
(defconcept ConstantQuantity :is-primitive PhysicalQuantity)
(defconcept ConstructedLanguage :is-primitive (:and ArtificialLanguage HumanLanguage))
(defconcept Constructing :is-primitive Making)
(defconcept ConsumerPriceIndex :is-primitive InflationIndex)
(defconcept ContentBearingObject :is-primitive SelfConnectedObject)
(defconcept ContentDevelopment :is-primitive IntentionalProcess)
(defconcept Contest :is-primitive SocialInteraction)
(defconcept ContestAttribute :is-primitive ObjectiveNorm)
(defconcept Continent :is-primitive LandArea)
(defconcept ContinuousPath :is-primitive ComputerPathAttribute)
(defconcept ContinuousSumofunction :is-primitive Sumofunction)
(defconcept ControllingAnAccount :is-primitive (:and FinancialService FinancialTransaction))
(defconcept ConventionalMortgage :is-primitive Mortgage)
(defconcept ConventionalOption :is-primitive Option)
(defconcept Cooking :is-primitive Making)
(defconcept Cooling :is-primitive Decreasing)
(defconcept Cooperation :is-primitive SocialInteraction)
(defconcept CorporateAccount :is-primitive FinancialAccount)
(defconcept CorporateBond :is-primitive (:and Bond TaxableInvestment))
(defconcept Corporation :is-primitive Organization)
(defconcept CorpuscularObject :is-primitive SelfConnectedObject)
(defconcept Coulomb :is-primitive TimeDependentQuantity)
(defconcept Counting :is-primitive Calculating)
(defconcept CouponBond :is-primitive Bond)
(defconcept Covering :is-primitive Putting)
(defconcept Creation :is-primitive InternalChange)
(defconcept CreditAccount :is-primitive LiabilityAccount)
(defconcept CreditCard :is-primitive BankCard)
(defconcept CreditCardAccount :is-primitive CreditAccount)
(defconcept CreditUnion :is-primitive FinancialOrganization)
(defconcept Crustacean :is-primitive Arthropod)
(defconcept Cup :is-primitive VolumeMeasure)
(defconcept CurrencyMeasure :is-primitive ConstantQuantity)
(defconcept Cutting :is-primitive Poking)
(defconcept DAndBRating :is-primitive ServiceRating)
(defconcept Damaging :is-primitive InternalChange)
(defconcept Dancing :is-primitive BodyMotion)
(defconcept DataCompression :is-primitive ComputerProcess)
(defconcept DataSaving :is-primitive ComputerProcess)
(defconcept DataSink :is-primitive ComputerInputDevice)
(defconcept DataTransfer :is-primitive ComputerProcess)
(defconcept Database :is-primitive ComputerData)
(defconcept Day :is-primitive TimeInterval)
(defconcept DayDuration :is-primitive TimeDuration)
(defconcept DayLoan :is-primitive Loan)
(defconcept DayOrder :is-primitive Order)
(defconcept Death :is-primitive OrganismProcess)
(defconcept DebitCard :is-primitive BankCard)
(defconcept December :is-primitive Month)
(defconcept Declaring :is-primitive Communication)
(defconcept Decoding :is-primitive Writing)
(defconcept Decreasing :is-primitive QuantityChange)
(defconcept DefensiveStock :is-primitive Stock)
(defconcept DefinedContributionPlan :is-primitive PensionPlan)
(defconcept DeonticAttribute :is-primitive ObjectiveNorm)
(defconcept Deposit :is-primitive FinancialTransaction)
(defconcept DepositAccount :is-primitive FinancialAccount)
(defconcept DepositingACheck :is-primitive UsingAnAccount)
(defconcept DesignPatternAttribute :is-primitive RealtimeSystemAttribute)
(defconcept Destruction :is-primitive Damaging)
(defconcept Detaching :is-primitive DualObjectProcess)
(defconcept DeterministicDataStream :is-primitive ComputerPathAttribute)
(defconcept DevelopmentalAttribute :is-primitive BiologicalAttribute)
(defconcept Device :is-primitive Artifact)
(defconcept DiagnosticProcess :is-primitive Investigating)
(defconcept DirectRollover :is-primitive Rollover)
(defconcept DirectedGraph :is-primitive Graph)
(defconcept Directing :is-primitive Communication)
(defconcept DirectionChange :is-primitive Motion)
(defconcept DirectionalAttribute :is-primitive PositionalAttribute)
(defconcept DiscoverCard :is-primitive CreditCard)
(defconcept DiseaseOrSyndrome :is-primitive BiologicalAttribute)
(defconcept Disseminating :is-primitive Communication)
(defconcept Dividend :is-primitive Payment)
(defconcept Downtick :is-primitive StockMarketTransaction)
(defconcept DrawingACheck :is-primitive UsingAnAccount)
(defconcept Drinking :is-primitive Ingesting)
(defconcept Drying :is-primitive Separating)
(defconcept DualObjectProcess :is-primitive Process)
(defconcept DynamicDataStream :is-primitive ComputerPathAttribute)
(defconcept Eating :is-primitive Ingesting)
(defconcept EconomicIndicator :is-primitive Sumoproposition)
(defconcept EducationalOrganization :is-primitive Organization)
(defconcept EducationalProcess :is-primitive (:and Guiding OrganizationalProcess))
(defconcept Electron :is-primitive SubatomicParticle)
(defconcept ElectronVolt :is-primitive SumofunctionQuantity)
(defconcept ElementalSubstance :is-primitive PureSubstance)
(defconcept EmotionalState :is-primitive StateOfMind)
(defconcept Employment :is-primitive (:and FinancialContract ServiceContract))
(defconcept Encoding :is-primitive Writing)
(defconcept EngineeringComponent :is-primitive Device)
(defconcept EngineeringConnection :is-primitive EngineeringComponent)
(defconcept EnteringAPin :is-primitive AuthorizationOfTransaction)
(defconcept EnteringAPing :is-primitive ContentDevelopment)
(defconcept EnvironmentSoftwareAttribute :is-primitive Attribute)
(defconcept Enzyme :is-primitive Protein)
(defconcept Epoch :is-primitive TimePoint)
(defconcept EquityOption :is-primitive Option)
(defconcept EquivalenceSumorelation :is (:and ReflexiveSumorelation SymmetricSumorelation TransitiveSumorelation))
(defconcept EthnicGroup :is-primitive Group)
(defconcept EuroCent :is-primitive CurrencyMeasure)
(defconcept EuroDollar :is-primitive CurrencyMeasure)
(defconcept EvenSumointeger :is-primitive Sumointeger)
(defconcept EvergreenLoan :is-primitive Loan)
(defconcept ExpiredCard :is-primitive BankCard)
(defconcept Expressing :is-primitive Communication)
(defconcept ExternalTransfer :is-primitive FinancialTransaction)
(defconcept FHALoan :is-primitive Mortgage)
(defconcept FOKOrder :is-primitive Order)
(defconcept Fabric :is-primitive Artifact)
(defconcept FahrenheitDegree :is-primitive TemperatureMeasure)
(defconcept FamilyGroup :is-primitive Group)
(defconcept Farad :is-primitive SumofunctionQuantity)
(defconcept FatTissue :is-primitive Tissue)
(defconcept Fax :is-primitive Communication)
(defconcept FaxMachine :is-primitive Device)
(defconcept February :is-primitive Month)
(defconcept FederalHousingAdministration :is-primitive Government)
(defconcept Feedback :is-primitive ContentBearingObject)
(defconcept Feline :is-primitive Carnivore)
(defconcept Fern :is-primitive NonFloweringPlant)
(defconcept FieldOfStudy :is-primitive Sumoproposition)
(defconcept FillingAnOrder :is-primitive FinancialTransaction)
(defconcept FinancialAccount :is-primitive FinancialTransaction)
(defconcept FinancialDefault :is-primitive FinancialTransaction)
(defconcept FinancialInstrument :is-primitive Certificate)
(defconcept FinancialOrganization :is-primitive Organization)
(defconcept FinancialRating :is-primitive Attribute)
(defconcept FinancialService :is-primitive CommercialService)
(defconcept FinancialTransaction :is-primitive Transaction)
(defconcept FiniteSumoset :is-primitive Sumoset)
(defconcept Firm-Strictness :is-primitive StrictnessAttribute)
(defconcept Fish :is-primitive ColdBloodedVertebrate)
(defconcept FixedAnnuity :is-primitive Annuity)
(defconcept FixedRateAccount :is-primitive InterestBearingAccount)
(defconcept FloweringPlant :is-primitive Plant)
(defconcept Food :is-primitive SelfConnectedObject
  :partitions (
    ($PARTITION_27$ (Meat FruitOrVegetable Beverage))
  ))
(defconcept Foot :is-primitive LengthMeasure)
(defconcept FormOfAdaptationAttribute :is-primitive Attribute)
(defconcept Formula :is-primitive Sentence)
(defconcept Freezing :is-primitive StateChange)
(defconcept FreshWaterArea :is-primitive WaterArea)
(defconcept Friday :is-primitive Day)
(defconcept FruitOrVegetable :is-primitive (:and BodyPart Food))
(defconcept Fungus :is-primitive NonFloweringPlant)
(defconcept GTCOrder :is-primitive Order)
(defconcept Game :is-primitive (:and Contest RecreationOrExercise))
(defconcept GeographicArea :is-primitive Region
  :partitions (
    ($PARTITION_17$ (WaterArea LandArea))
  ))
(defconcept GeopoliticalArea :is-primitive (:and Agent GeographicArea))
(defconcept Getting :is-primitive ChangeOfPossession)
(defconcept Giving :is-primitive ChangeOfPossession)
(defconcept Gland :is-primitive Organ)
(defconcept Government :is-primitive PoliticalOrganization)
(defconcept GovernmentBond :is-primitive Bond)
(defconcept Graduation :is-primitive LeavingAnOrganization)
(defconcept Gram :is-primitive MassMeasure)
(defconcept Graph :is-primitive Abstract)
(defconcept GraphArc :is-primitive GraphElement)
(defconcept GraphCircuit :is-primitive GraphPath)
(defconcept GraphElement :is-primitive Abstract
  :partitions (
    ($PARTITION_15$ (GraphNode GraphArc))
  ))
(defconcept GraphLoop :is-primitive GraphArc)
(defconcept GraphNode :is-primitive GraphElement)
(defconcept GraphPath :is-primitive DirectedGraph)
(defconcept Gray :is-primitive SumofunctionQuantity)
(defconcept Group :is-primitive (:and Agent Sumocollection))
(defconcept Growth :is-primitive OrganismProcess)
(defconcept GrowthStock :is-primitive Stock)
(defconcept Guidance-DesignPattern :is-primitive DesignPatternAttribute)
(defconcept Guiding :is-primitive IntentionalProcess)
(defconcept Hard-Strictness :is-primitive StrictnessAttribute)
(defconcept HardDiskDrive :is-primitive (:and ComputerComponent ComputerHardware))
(defconcept HardwareSystem :is-primitive (:and ComputationalSystem ComputerHardware RealtimeSystem))
(defconcept Hearing :is-primitive Perception)
(defconcept Heating :is-primitive Increasing)
(defconcept Henry :is-primitive SumofunctionQuantity)
(defconcept Hertz :is-primitive TimeDependentQuantity)
(defconcept Hiring :is-primitive JoiningAnOrganization)
(defconcept Hole :is-primitive Region)
(defconcept Hominid :is-primitive Primate)
(defconcept HoofedMammal :is-primitive Mammal)
(defconcept Hormone :is-primitive (:and BiologicallyActiveSubstance BodySubstance))
(defconcept HotelStarRating :is-primitive ServiceRating)
(defconcept Hour :is-primitive TimeInterval)
(defconcept HourDuration :is-primitive TimeDuration)
(defconcept Human :is-primitive (:and CognitiveAgent Hominid))
(defconcept HumanLanguage :is-primitive Language)
(defconcept Hybrid-Strictness :is-primitive StrictnessAttribute)
(defconcept Hybrid-SystemBehavior :is-primitive SystemBehaviorAttribute)
(defconcept IOCOrder :is-primitive Order)
(defconcept IPAddress :is-primitive PhysicalAddress)
(defconcept Icon :is-primitive ContentBearingObject)
(defconcept Identifier :is-primitive SymbolicString)
(defconcept Image :is-primitive ComputerData)
(defconcept ImaginarySumonumber :is-primitive Sumonumber)
(defconcept Impacting :is-primitive Touching)
(defconcept Impelling :is-primitive Transfer)
(defconcept Importance-Strictness :is-primitive StrictnessAttribute)
(defconcept Inch :is-primitive LengthMeasure)
(defconcept Increasing :is-primitive QuantityChange)
(defconcept Independent-TaskSumorelation :is-primitive TaskSumorelationAttribute)
(defconcept Index :is-primitive PerformanceMeasure)
(defconcept IndexBond :is-primitive Bond)
(defconcept IndexOption :is-primitive Option)
(defconcept IndexedLoan :is-primitive Loan)
(defconcept IndividualRetirementAccount :is-primitive (:and PersonalAccount SavingsAccount))
(defconcept Inflation :is-primitive EconomicIndicator)
(defconcept InflationIndex :is-primitive Index)
(defconcept InformationMeasure :is-primitive ConstantQuantity)
(defconcept Ingesting :is-primitive OrganismProcess)
(defconcept InheritableSumorelation :is-primitive Thing)
(defconcept Initiation-DesignPattern :is-primitive DesignPatternAttribute)
(defconcept Injuring :is-primitive (:and Damaging PathologicProcess))
(defconcept Insect :is-primitive Arthropod)
(defconcept Instrument-AbstractionLevel :is-primitive AbstractionLevelAttribute)
(defconcept IntentionalProcess :is-primitive Process)
(defconcept IntentionalPsychologicalProcess :is-primitive (:and IntentionalProcess PsychologicalProcess))
(defconcept IntentionalSumorelation :is-primitive Thing)
(defconcept Interest :is-primitive CurrencyMeasure)
(defconcept InterestBearingAccount :is-primitive FinancialAccount)
(defconcept InterestOnlyLoan :is-primitive Loan)
(defconcept InterestRate :is (:and ConstantQuantity EconomicIndicator))
(defconcept InternalAttribute :is-primitive Attribute)
(defconcept InternalChange :is-primitive Process)
(defconcept InternalTransfer :is-primitive FinancialTransaction)
(defconcept IntransitiveSumorelation :is-primitive BinarySumorelation)
(defconcept Invertebrate :is-primitive Animal
  :partitions (
    ($PARTITION_21$ (Worm Mollusk Arthropod))
  ))
(defconcept Investigating :is-primitive Searching)
(defconcept Investing :is-primitive FinancialTransaction)
(defconcept Investment :is-primitive FinancialAsset)
(defconcept InvestmentAccount :is-primitive DepositAccount)
(defconcept InvestmentAttribute :is-primitive Attribute)
(defconcept Investor :is-primitive CognitiveAgent)
(defconcept IrrationalSumonumber :is-primitive RealSumonumber)
(defconcept IrreflexiveSumorelation :is-primitive BinarySumorelation)
(defconcept Island :is-primitive LandArea)
(defconcept January :is-primitive Month)
(defconcept JoiningAnOrganization :is-primitive OrganizationalProcess)
(defconcept JointAccount :is-primitive PersonalAccount)
(defconcept Joule :is-primitive SumofunctionQuantity)
(defconcept July :is-primitive Month)
(defconcept June :is-primitive Month)
(defconcept JunkBond :is-primitive CorporateBond)
(defconcept Keeping :is-primitive IntentionalProcess)
(defconcept KelvinDegree :is-primitive TemperatureMeasure)
(defconcept Killing :is-primitive Destruction)
(defconcept KiloByte :is-primitive InformationMeasure)
(defconcept LAN :is-primitive ComputerNetwork
  :partitions (
    ($PARTITION_32$ (BusNetwork StarNetwork RingNetwork))
  ))
(defconcept LEAPS :is-primitive Option)
(defconcept LandArea :is-primitive GeographicArea)
(defconcept Language :is-primitive LinguisticExpression
  :partitions (
    ($PARTITION_3$ (AnimalLanguage HumanLanguage ComputerLanguage))
  ))
(defconcept LeapYear :is-primitive Year)
(defconcept Learning :is-primitive IntentionalPsychologicalProcess)
(defconcept LeavingAnOrganization :is-primitive OrganizationalProcess)
(defconcept LegalAction :is-primitive Contest)
(defconcept Lending :is-primitive Giving)
(defconcept LengthMeasure :is-primitive ConstantQuantity)
(defconcept Liability :is-primitive FinancialContract)
(defconcept LiabilityAccount :is-primitive FinancialAccount)
(defconcept LinguisticExpression :is-primitive ContentBearingObject)
(defconcept Liquidation :is-primitive FinancialTransaction)
(defconcept LiquidityAttribute :is-primitive Attribute)
(defconcept Liter :is-primitive VolumeMeasure)
(defconcept Loan :is-primitive LiabilityAccount)
(defconcept LoanCommitment :is-primitive Contract)
(defconcept LogicalOperator :is-primitive Predicate)
(defconcept LongStraddle :is-primitive Straddle)
(defconcept Lumen :is-primitive SumofunctionQuantity)
(defconcept Lux :is-primitive SumofunctionQuantity)
(defconcept MNHOrder :is-primitive Order)
(defconcept MOCOrder :is-primitive Order)
(defconcept Machine :is-primitive Device)
(defconcept Maintaining :is-primitive IntentionalProcess)
(defconcept Making :is-primitive (:and Creation IntentionalProcess))
(defconcept Mammal :is-primitive WarmBloodedVertebrate
  :partitions (
    ($PARTITION_24$ (AquaticMammal HoofedMammal Marsupial Rodent Primate))
  ))
(defconcept Managing :is-primitive (:and Guiding OrganizationalProcess))
(defconcept Maneuver :is-primitive IntentionalProcess)
(defconcept Manufacture :is-primitive Making)
(defconcept March :is-primitive Month)
(defconcept MarketOrder :is-primitive Order)
(defconcept MarketShareWeightedIndex :is-primitive Index)
(defconcept MarketValueWeightedIndex :is-primitive Index)
(defconcept Marsupial :is-primitive Mammal)
(defconcept MassMeasure :is-primitive ConstantQuantity)
(defconcept MasterCard :is-primitive CreditCard)
(defconcept Matriculation :is-primitive JoiningAnOrganization)
(defconcept May :is-primitive Month)
(defconcept Measuring :is-primitive Calculating)
(defconcept MeasuringPerformance :is-primitive ComputerProcess)
(defconcept Meat :is-primitive Food)
(defconcept Meeting :is-primitive SocialInteraction)
(defconcept MegaByte :is-primitive InformationMeasure)
(defconcept Melting :is-primitive StateChange)
(defconcept Metal :is-primitive ElementalSubstance)
(defconcept Meter :is-primitive LengthMeasure)
(defconcept Method-AbstractionLevel :is-primitive AbstractionLevelAttribute)
(defconcept Microorganism :is-primitive Organism)
(defconcept Mile :is-primitive LengthMeasure)
(defconcept MilitaryProcess :is-primitive PoliticalProcess)
(defconcept Mineral :is-primitive Mixture)
(defconcept Minute :is-primitive TimeInterval)
(defconcept MinuteDuration :is-primitive TimeDuration)
(defconcept Mixture :is-primitive Substance)
(defconcept Mole :is-primitive MassMeasure)
(defconcept Molecule :is-primitive CompoundSubstance)
(defconcept Mollusk :is-primitive Invertebrate)
(defconcept Monday :is-primitive Day)
(defconcept MoneyMarket :is-primitive SavingsAccount)
(defconcept MonitorApplicationCmd :is-primitive MonitoringProgram)
(defconcept MonitorComponentCmd :is-primitive MonitoringProgram)
(defconcept MonitorConnectivityCmd :is-primitive MonitoringProgram)
(defconcept MonitoringProgram :is-primitive ComputerProgram)
(defconcept Monkey :is-primitive Primate)
(defconcept Month :is-primitive TimeInterval)
(defconcept Morpheme :is-primitive LinguisticExpression)
(defconcept Mortgage :is-primitive SecuredLoan)
(defconcept MortgageBond :is-primitive CorporateBond)
(defconcept Moss :is-primitive NonFloweringPlant)
(defconcept Motion :is-primitive Process)
(defconcept MotionPicture :is-primitive Text)
(defconcept MultiGraph :is-primitive Graph)
(defconcept MultipleRequirement-Complexity :is-primitive ComplexityAttribute)
(defconcept Multitasking :is-primitive ComputerProcess)
(defconcept MunicipalBond :is-primitive (:and Bond TaxFreeInvestment))
(defconcept Muscle :is-primitive Tissue)
(defconcept Music :is-primitive RadiatingSound)
(defconcept MusicalInstrument :is-primitive Device)
(defconcept MutualFundAccount :is-primitive InvestmentAccount)
(defconcept MutuallyDisjointSumoclass :is-primitive SumosetOrSumoclass)
(defconcept Myriapod :is-primitive Arthropod)
(defconcept NASDAQCompositeIndex :is-primitive Index)
(defconcept NHOrder :is-primitive Order)
(defconcept Nation :is-primitive (:and GeopoliticalArea LandArea))
(defconcept NaturalLanguage :is-primitive HumanLanguage)
(defconcept NegativeRealSumonumber :is-primitive RealSumonumber)
(defconcept NegativeSumointeger :is (:and NegativeRealSumonumber Sumointeger))
(defconcept NetworkAdapter :is-primitive ComputerComponent)
(defconcept NetworkResource :is-primitive ComputerResource)
(defconcept Neutron :is-primitive SubatomicParticle)
(defconcept Newton :is-primitive SumofunctionQuantity)
(defconcept NikkeiIndex :is-primitive Index)
(defconcept NonFloweringPlant :is-primitive Plant
  :partitions (
    ($PARTITION_20$ (Alga Fern Fungus Moss))
  ))
(defconcept NonnegativeRealSumonumber :is-primitive RealSumonumber)
(defconcept NonnegativeSumointeger :is (:and NonnegativeRealSumonumber Sumointeger))
(defconcept NormativeAttribute :is-primitive SumorelationalAttribute)
(defconcept Note :is-primitive FinancialInstrument)
(defconcept Noun :is-primitive Word)
(defconcept NounPhrase :is-primitive Phrase)
(defconcept November :is-primitive Month)
(defconcept Nutrient :is-primitive (:and BiologicallyActiveSubstance CompoundSubstance)
  :partitions (
    ($PARTITION_26$ (Protein Carbohydrate Vitamin))
  ))
(defconcept OCOOrder :is-primitive Order)
(defconcept Object :is-primitive Physical)
(defconcept Object-AbstractionLevel :is-primitive AbstractionLevelAttribute)
(defconcept ObjectAttitude :is-primitive (:and AsymmetricSumorelation IntentionalSumorelation))
(defconcept ObjectiveNorm :is-primitive NormativeAttribute)
(defconcept Obligation :is-primitive Thing)
(defconcept OccupationalRole :is-primitive SocialRole)
(defconcept October :is-primitive Month)
(defconcept OddSumointeger :is-primitive Sumointeger)
(defconcept Ohm :is-primitive SumofunctionQuantity)
(defconcept OlfactoryAttribute :is-primitive PerceptualAttribute)
(defconcept OneToOneSumofunction :is-primitive UnarySumofunction)
(defconcept OneToOneUnarySumofunction :is-primitive UnarySumofunction)
(defconcept OpeningAnAccount :is-primitive (:and FinancialService FinancialTransaction))
(defconcept OperatingSystem :is-primitive SoftwareSystem)
(defconcept Optimization :is-primitive ProcessTask)
(defconcept Option :is-primitive FinancialContract)
(defconcept OptionStrategy :is-primitive FinancialTransaction)
(defconcept Order :is-primitive ServiceContract)
(defconcept Ordering :is-primitive Directing)
(defconcept Organ :is-primitive BodyPart)
(defconcept OrganOrTissueProcess :is-primitive PhysiologicProcess)
(defconcept OrganicObject :is-primitive CorpuscularObject
  :partitions (
    ($PARTITION_18$ (Organism AnatomicalStructure))
  ))
(defconcept Organism :is-primitive (:and Agent OrganicObject)
  :partitions (
    ($PARTITION_19$ (Animal Plant Microorganism))
  ))
(defconcept OrganismProcess :is-primitive PhysiologicProcess)
(defconcept Organization :is-primitive Group)
(defconcept OrganizationUnit :is-primitive CognitiveAgent)
(defconcept OrganizationalProcess :is-primitive IntentionalProcess)
(defconcept Ounce :is-primitive VolumeMeasure)
(defconcept Packet :is-primitive ComputerData)
(defconcept PacketsPerSecond :is-primitive TimeDependentQuantity)
(defconcept PairwiseDisjointSumoclass :is-primitive SumosetOrSumoclass)
(defconcept PartialOrderingSumorelation :is (:and AntisymmetricSumorelation ReflexiveSumorelation TransitiveSumorelation))
(defconcept PartialValuedSumorelation :is-primitive Sumorelation)
(defconcept Particle :is-primitive Word)
(defconcept Pascal :is-primitive SumofunctionQuantity)
(defconcept Patent :is-primitive Certificate)
(defconcept PathologicProcess :is-primitive BiologicalProcess)
(defconcept PayCheck :is-primitive Check)
(defconcept Payment :is-primitive FinancialTransaction)
(defconcept Penalty :is-primitive ChargingAFee)
(defconcept PennyStock :is-primitive Stock)
(defconcept PensionPlan :is-primitive (:and FinancialTransaction Planning))
(defconcept Perception :is-primitive PsychologicalProcess)
(defconcept PerceptualAttribute :is-primitive InternalAttribute)
(defconcept PerformanceBond :is-primitive Bond)
(defconcept PerformanceMeasure :is-primitive PhysicalQuantity)
(defconcept Periodic-SystemBehavior :is-primitive SystemBehaviorAttribute)
(defconcept Periodical :is-primitive Series)
(defconcept Permission :is-primitive Thing)
(defconcept PersonalAccount :is-primitive FinancialAccount)
(defconcept Phrase :is-primitive LinguisticExpression
  :partitions (
    ($PARTITION_30$ (VerbPhrase NounPhrase PrepositionalPhrase))
  ))
(defconcept Physical :is-primitive Entity
  :partitions (
    ($PARTITION_1$ (Object Process))
  ))
(defconcept PhysicalAddress :is-primitive SymbolicString)
(defconcept PhysicalQuantity :is-primitive Quantity
  :partitions (
    ($PARTITION_9$ (ConstantQuantity SumofunctionQuantity))
  ))
(defconcept PhysicalState :is-primitive InternalAttribute)
(defconcept PhysiologicProcess :is-primitive BiologicalProcess)
(defconcept PiggybankLoan :is-primitive Loan)
(defconcept Pint :is-primitive VolumeMeasure)
(defconcept PlacingAnOrder :is-primitive FinancialTransaction)
(defconcept Plan :is-primitive Procedure)
(defconcept PlaneAngleMeasure :is-primitive AngleMeasure)
(defconcept Planning :is-primitive IntentionalPsychologicalProcess)
(defconcept Plant :is-primitive Organism)
(defconcept Poisoning :is-primitive Injuring)
(defconcept Poking :is-primitive IntentionalProcess)
(defconcept PoliticalOrganization :is-primitive Organization)
(defconcept PoliticalProcess :is-primitive OrganizationalProcess)
(defconcept Position :is-primitive OccupationalRole)
(defconcept PositionalAttribute :is-primitive SumorelationalAttribute)
(defconcept PositiveRealSumonumber :is-primitive NonnegativeRealSumonumber)
(defconcept PositiveSumointeger :is (:and NonnegativeSumointeger PositiveRealSumonumber))
(defconcept PoundForce :is-primitive SumofunctionQuantity)
(defconcept PoundMass :is-primitive MassMeasure)
(defconcept Precision-FormOfAdaptation :is-primitive FormOfAdaptationAttribute)
(defconcept Predicate :is-primitive Sumorelation)
(defconcept Predicting :is-primitive IntentionalPsychologicalProcess)
(defconcept PreferredStock :is-primitive Stock)
(defconcept Prepayment :is-primitive Payment)
(defconcept PrepositionalPhrase :is-primitive Phrase)
(defconcept Pretending :is-primitive SocialInteraction)
(defconcept PriceWeightedIndex :is-primitive Index)
(defconcept PrimaryColor :is-primitive ColorAttribute)
(defconcept Primate :is-primitive Mammal
  :partitions (
    ($PARTITION_25$ (Ape Monkey Hominid))
  ))
(defconcept PrimeSumonumber :is-primitive Sumointeger)
(defconcept PrimitiveService :is-primitive WebService)
(defconcept Printer :is-primitive ComputerOutputDevice)
(defconcept PriorityAttribute :is-primitive Attribute)
(defconcept ProbabilitySumorelation :is-primitive Sumorelation)
(defconcept Procedure :is-primitive Sumoproposition)
(defconcept Process :is-primitive Physical)
(defconcept ProcessControlStatus :is-primitive Formula)
(defconcept ProcessState :is-primitive ContentBearingObject)
(defconcept ProcessStatus :is-primitive Attribute)
(defconcept ProcessTask :is-primitive Abstract)
(defconcept ProcessingACheck :is-primitive ControllingAnAccount)
(defconcept ProducerPriceIndex :is-primitive InflationIndex)
(defconcept Product :is-primitive (:and Artifact Entity))
(defconcept ProfitSharingPlan :is-primitive FinancialTransaction)
(defconcept Protein :is-primitive Nutrient)
(defconcept Proton :is-primitive SubatomicParticle)
(defconcept PseudoGraph :is-primitive Graph)
(defconcept PsychologicalAttribute :is-primitive BiologicalAttribute
  :partitions (
    ($PARTITION_31$ (StateOfMind TraitAttribute))
  ))
(defconcept PsychologicalDysfunction :is (:and DiseaseOrSyndrome PsychologicalAttribute))
(defconcept PsychologicalProcess :is-primitive BiologicalProcess)
(defconcept Publication :is-primitive Manufacture)
(defconcept PureSubstance :is-primitive Substance
  :partitions (
    ($PARTITION_2$ (CompoundSubstance ElementalSubstance))
  ))
(defconcept Pursuing :is-primitive Searching)
(defconcept PutOption :is-primitive Option)
(defconcept Putting :is-primitive Transfer)
(defconcept Quantity :is-primitive Abstract)
(defconcept QuantityChange :is-primitive InternalChange
  :partitions (
    ($PARTITION_16$ (Increasing Decreasing))
  ))
(defconcept Quart :is-primitive VolumeMeasure)
(defconcept QuasicontinuousPath :is-primitive ComputerPathAttribute)
(defconcept QuaternaryPredicate :is (:and Predicate QuaternarySumorelation))
(defconcept QuaternarySumofunction :is (:and QuintarySumorelation Sumofunction))
(defconcept QuaternarySumorelation :is-primitive Sumorelation)
(defconcept Questioning :is-primitive Directing)
(defconcept QuintaryPredicate :is (:and Predicate QuintarySumorelation))
(defconcept QuintarySumorelation :is-primitive Sumorelation)
(defconcept RM_StartApplication :is-primitive ComputerProgram)
(defconcept Radian :is-primitive PlaneAngleMeasure)
(defconcept Radiating :is-primitive Motion)
(defconcept RadiatingLight :is-primitive Radiating)
(defconcept RadiatingSound :is-primitive Radiating)
(defconcept RankineDegree :is-primitive TemperatureMeasure)
(defconcept RationalSumonumber :is-primitive RealSumonumber)
(defconcept Reading :is-primitive ContentDevelopment)
(defconcept RealEstate :is-primitive (:and FinancialAsset Region))
(defconcept RealSumonumber :is-primitive Sumonumber
  :partitions (
    ($PARTITION_5$ (NegativeRealSumonumber NonnegativeRealSumonumber))
    ($PARTITION_6$ (RationalSumonumber IrrationalSumonumber))
  ))
(defconcept RealtimeSystem :is-primitive ComputationalSystem)
(defconcept RealtimeSystemAttribute :is-primitive Attribute)
(defconcept Reasoning :is-primitive IntentionalPsychologicalProcess)
(defconcept RecreationOrExercise :is-primitive IntentionalProcess)
(defconcept Refinancing :is-primitive FinancialTransaction)
(defconcept ReflexiveSumorelation :is-primitive BinarySumorelation)
(defconcept Region :is-primitive Object)
(defconcept RegisteredBond :is-primitive Bond)
(defconcept RegulatoryProcess :is-primitive OrganizationalProcess)
(defconcept ReligiousOrganization :is-primitive (:and BeliefGroup Organization))
(defconcept ReligiousProcess :is-primitive OrganizationalProcess)
(defconcept Remembering :is-primitive PsychologicalProcess)
(defconcept Removing :is-primitive Transfer)
(defconcept Repairing :is-primitive IntentionalProcess)
(defconcept Replication :is-primitive OrganismProcess)
(defconcept Report :is-primitive ComputerData)
(defconcept ReproductiveBody :is-primitive AnatomicalStructure)
(defconcept Reptile :is-primitive ColdBloodedVertebrate)
(defconcept Request :is-primitive FinancialTransaction)
(defconcept Requesting :is-primitive Directing)
(defconcept ResourceAllocation-FormOfAdaptation :is-primitive FormOfAdaptationAttribute)
(defconcept ResourceManagementProgram :is-primitive ComputerProgram)
(defconcept Response :is-primitive FinancialTransaction)
(defconcept RestrictedStock :is-primitive Stock)
(defconcept ReusingAResource :is-primitive ComputerProcess)
(defconcept RingNetwork :is-primitive LAN)
(defconcept RiskAttribute :is-primitive Attribute)
(defconcept Rodent :is-primitive Mammal)
(defconcept Rollover :is-primitive FinancialTransaction)
(defconcept Room :is-primitive StationaryArtifact)
(defconcept RothIRAAccount :is-primitive IndividualRetirementAccount)
(defconcept SARSEPPlan :is-primitive DefinedContributionPlan)
(defconcept SaltWaterArea :is-primitive WaterArea)
(defconcept SatisfyingRequirements :is-primitive ProcessTask)
(defconcept SaturationAttribute :is-primitive InternalAttribute)
(defconcept Saturday :is-primitive Day)
(defconcept SavingsAccount :is-primitive (:and DepositAccount InterestBearingAccount))
(defconcept SavingsAndLoans :is-primitive FinancialOrganization)
(defconcept Scalable :is-primitive ComputerPathAttribute)
(defconcept Searching :is-primitive IntentionalProcess)
(defconcept Second :is-primitive TimeInterval)
(defconcept SecondDuration :is-primitive TimeDuration)
(defconcept SecuredBond :is-primitive Bond)
(defconcept SecuredLoan :is-primitive Loan)
(defconcept Security :is-primitive FinancialInstrument)
(defconcept Seeing :is-primitive Perception)
(defconcept Selecting :is-primitive IntentionalPsychologicalProcess)
(defconcept SelfConnectedObject :is-primitive Object)
(defconcept Selling :is-primitive FinancialTransaction)
(defconcept Sensor :is-primitive ComputerHardware)
(defconcept Sentence :is-primitive Text)
(defconcept SentientAgent :is-primitive Agent)
(defconcept Separating :is-primitive DualObjectProcess)
(defconcept September :is-primitive Month)
(defconcept Series :is-primitive ContentBearingObject)
(defconcept Server :is-primitive ComputationalSystem)
(defconcept ServiceAddress :is-primitive Identifier)
(defconcept ServiceAttribute :is-primitive Attribute)
(defconcept ServiceEmail :is-primitive Identifier)
(defconcept ServiceFAX :is-primitive Identifier)
(defconcept ServiceGrounding :is-primitive ContentBearingObject)
(defconcept ServiceModel :is-primitive ContentBearingObject)
(defconcept ServiceName :is-primitive Identifier)
(defconcept ServicePhone :is-primitive Identifier)
(defconcept ServiceProcess :is-primitive ComputerProcess)
(defconcept ServiceProfile :is-primitive ContentBearingObject)
(defconcept ServiceProvider :is-primitive Website)
(defconcept ServiceRequest :is-primitive UserRequest)
(defconcept ServiceUser :is-primitive Agent)
(defconcept ServiceWebURL :is-primitive Identifier)
(defconcept SexAttribute :is-primitive BiologicalAttribute)
(defconcept SexualReproduction :is-primitive Replication)
(defconcept ShapeAttribute :is-primitive InternalAttribute)
(defconcept ShapeChange :is-primitive Process)
(defconcept Share :is-primitive Security)
(defconcept Shooting :is-primitive Impelling)
(defconcept ShortSale :is-primitive FinancialTransaction)
(defconcept ShutdownBlock :is-primitive ComputerProgram)
(defconcept Siemens :is-primitive SumofunctionQuantity)
(defconcept Sievert :is-primitive SumofunctionQuantity)
(defconcept SingleOption :is-primitive OptionStrategy)
(defconcept SinglePaymentLoan :is-primitive Loan)
(defconcept SingleRequirement-Complexity :is-primitive ComplexityAttribute)
(defconcept SingleValuedSumorelation :is-primitive Sumorelation)
(defconcept Slack-FormOfAdaptation :is-primitive FormOfAdaptationAttribute)
(defconcept Slug :is-primitive MassMeasure)
(defconcept Smelling :is-primitive Perception)
(defconcept SocialInteraction :is-primitive IntentionalProcess)
(defconcept SocialRole :is-primitive SumorelationalAttribute)
(defconcept Soft-Strictness :is-primitive StrictnessAttribute)
(defconcept SoftwareAttribute :is-primitive Attribute)
(defconcept SoftwareSystem :is-primitive (:and ComputationalSystem RealtimeSystem))
(defconcept Solaris :is-primitive OperatingSystem)
(defconcept SolidAngleMeasure :is-primitive AngleMeasure)
(defconcept Solution :is-primitive Mixture)
(defconcept SoundAttribute :is-primitive PerceptualAttribute)
(defconcept SpatialSumorelation :is-primitive Sumorelation)
(defconcept SplitProcess :is-primitive CompositeProcess)
(defconcept Sport :is-primitive Game)
(defconcept SpreadOption :is-primitive OptionStrategy)
(defconcept StarNetwork :is-primitive LAN)
(defconcept StarRating :is-primitive ServiceRating)
(defconcept StartupBlock :is-primitive ComputerProgram)
(defconcept StateChange :is-primitive InternalChange)
(defconcept StateOfMind :is-primitive PsychologicalAttribute)
(defconcept StateOrProvince :is-primitive (:and GeopoliticalArea LandArea))
(defconcept StaticWaterArea :is-primitive WaterArea)
(defconcept Stating :is-primitive Communication)
(defconcept StationaryArtifact :is-primitive Artifact)
(defconcept StatusAttribute :is-primitive Attribute)
(defconcept Steering :is-primitive Guiding)
(defconcept Steradian :is-primitive SolidAngleMeasure)
(defconcept StochasticDataStream :is-primitive ComputerPathAttribute)
(defconcept Stock :is-primitive (:and FinancialInstrument Investment))
(defconcept StockIndex :is-primitive Index)
(defconcept StockMarket :is-primitive Organization)
(defconcept StockMarketTransaction :is-primitive FinancialTransaction)
(defconcept StockOption :is-primitive Option)
(defconcept StockSplit :is-primitive FinancialTransaction)
(defconcept StopOrder :is-primitive Order)
(defconcept Straddle :is-primitive OptionStrategy)
(defconcept StreamWaterArea :is-primitive WaterArea)
(defconcept StrictnessAttribute :is-primitive TimingRequirementAttribute)
(defconcept SubatomicParticle :is-primitive ElementalSubstance)
(defconcept SubjectiveAssessmentAttribute :is-primitive NormativeAttribute)
(defconcept Substance :is-primitive SelfConnectedObject)
(defconcept Substituting :is-primitive (:and DualObjectProcess Transfer))
(defconcept Summary :is-primitive Text)
(defconcept Sumocharacter :is-primitive SymbolicString)
(defconcept Sumoclass :is-primitive SumosetOrSumoclass)
(defconcept Sumoclassifying :is-primitive IntentionalPsychologicalProcess)
(defconcept Sumocollection :is-primitive Object)
(defconcept Sumofunction :is-primitive SingleValuedSumorelation)
(defconcept SumofunctionQuantity :is (:and PhysicalQuantity Sumofunction))
(defconcept Sumointeger :is-primitive RationalSumonumber
  :partitions (
    ($PARTITION_7$ (OddSumointeger EvenSumointeger))
    ($PARTITION_8$ (NegativeSumointeger NonnegativeSumointeger))
  ))
(defconcept Sumolist :is-primitive Sumorelation)
(defconcept Sumonumber :is-primitive Quantity)
(defconcept Sumoproposition :is-primitive Abstract)
(defconcept SumopropositionalAttitude :is-primitive (:and AsymmetricSumorelation IntentionalSumorelation))
(defconcept Sumorelation :is-primitive Abstract
  :partitions (
    ($PARTITION_12$ (BinarySumorelation TernarySumorelation QuaternarySumorelation QuintarySumorelation VariableAritySumorelation))
    ($PARTITION_13$ (Predicate Sumofunction Sumolist))
    ($PARTITION_14$ (TotalValuedSumorelation PartialValuedSumorelation))
  ))
(defconcept SumorelationExtendedToQuantities :is-primitive Sumorelation)
(defconcept SumorelationalAttribute :is-primitive Attribute)
(defconcept Sumosequence :is-primitive UnarySumofunction)
(defconcept SumosequenceProcess :is-primitive CompositeProcess)
(defconcept SumosequenceSumofunction :is-primitive OneToOneSumofunction)
(defconcept Sumoset :is-primitive SumosetOrSumoclass)
(defconcept SumosetOrSumoclass :is-primitive Abstract
  :partitions (
    ($PARTITION_11$ (Sumoset Sumoclass))
  ))
(defconcept Sunday :is-primitive Day)
(defconcept SurfaceChange :is-primitive InternalChange)
(defconcept Surgery :is-primitive TherapeuticProcess)
(defconcept Swimming :is-primitive BodyMotion)
(defconcept SymbolicString :is-primitive ContentBearingObject)
(defconcept SymmetricSumorelation :is-primitive BinarySumorelation)
(defconcept SystemBehaviorAttribute :is-primitive RealtimeSystemAttribute)
(defconcept SystemeInternationalUnit :is-primitive UnitOfMeasure)
(defconcept TactilePerception :is-primitive Perception)
(defconcept Task-AbstractionLevel :is-primitive AbstractionLevelAttribute)
(defconcept TaskGroup-AbstractionLevel :is-primitive AbstractionLevelAttribute)
(defconcept TaskSumorelationAttribute :is-primitive Attribute)
(defconcept TasteAttribute :is-primitive PerceptualAttribute)
(defconcept Tasting :is-primitive Perception)
(defconcept Tax :is-primitive ChargingAFee)
(defconcept TaxFreeInvestment :is-primitive Investment)
(defconcept TaxableInvestment :is-primitive Investment)
(defconcept TemperatureMeasure :is-primitive ConstantQuantity)
(defconcept TemporalSumorelation :is-primitive Sumorelation)
(defconcept TerminatingEmployment :is-primitive LeavingAnOrganization)
(defconcept TernaryPredicate :is (:and Predicate TernarySumorelation))
(defconcept TernarySumofunction :is (:and QuaternarySumorelation Sumofunction))
(defconcept TernarySumorelation :is-primitive Sumorelation)
(defconcept Tesla :is-primitive SumofunctionQuantity)
(defconcept Text :is-primitive (:and Artifact LinguisticExpression))
(defconcept TextDescription :is-primitive Text)
(defconcept TextureAttribute :is-primitive PerceptualAttribute)
(defconcept TherapeuticProcess :is-primitive Repairing)
(defconcept Thursday :is-primitive Day)
(defconcept TimeDependentQuantity :is (:and ContinuousSumofunction UnaryConstantSumofunctionQuantity))
(defconcept TimeDuration :is-primitive TimeMeasure)
(defconcept TimeInterval :is-primitive TimePosition)
(defconcept TimeMeasure :is-primitive ConstantQuantity)
(defconcept TimePoint :is-primitive TimePosition)
(defconcept TimePosition :is-primitive TimeMeasure
  :partitions (
    ($PARTITION_10$ (TimeInterval TimePoint))
  ))
(defconcept TimeZone :is-primitive SumorelationalAttribute)
(defconcept TimingRequirementAttribute :is-primitive RealtimeSystemAttribute)
(defconcept Tissue :is-primitive BodySubstance
  :partitions (
    ($PARTITION_28$ (Bone Muscle FatTissue))
  ))
(defconcept Title :is-primitive FinancialInstrument)
(defconcept TotalOrderingSumorelation :is (:and PartialOrderingSumorelation TrichotomizingSumorelation))
(defconcept TotalValuedSumorelation :is-primitive Sumorelation)
(defconcept Touching :is-primitive Transfer)
(defconcept ToxicOrganism :is-primitive Organism)
(defconcept TraditionalSavingsAccount :is-primitive SavingsAccount)
(defconcept TraitAttribute :is-primitive PsychologicalAttribute)
(defconcept Transaction :is-primitive (:and ChangeOfPossession DualObjectProcess))
(defconcept Transfer :is-primitive Motion)
(defconcept Transient-SystemBehavior :is-primitive SystemBehaviorAttribute)
(defconcept TransientPath :is-primitive ComputerPathAttribute)
(defconcept TransitiveSumorelation :is-primitive BinarySumorelation)
(defconcept Transportation :is-primitive Motion)
(defconcept TransportationDevice :is-primitive Device)
(defconcept TreasuryBill :is-primitive SavingsAccount)
(defconcept TreasuryBond :is-primitive Bond)
(defconcept Tree :is-primitive Graph)
(defconcept TrichotomizingSumorelation :is-primitive BinarySumorelation)
(defconcept TruthValue :is-primitive SumorelationalAttribute)
(defconcept Tuesday :is-primitive Day)
(defconcept UnaryConstantSumofunctionQuantity :is (:and SumofunctionQuantity UnarySumofunction))
(defconcept UnarySumofunction :is (:and BinarySumorelation Sumofunction))
(defconcept Unconscious :is-primitive ConsciousnessAttribute)
(defconcept Uncovering :is-primitive Removing)
(defconcept UniformResourceIdentifier :is-primitive ContentBearingObject)
(defconcept UniformResourceLocator :is-primitive UniformResourceIdentifier)
(defconcept UniformResourceName :is-primitive UniformResourceIdentifier)
(defconcept UnilateralGetting :is-primitive Getting)
(defconcept UnilateralGiving :is-primitive Giving)
(defconcept UniqueSumolist :is-primitive Sumolist)
(defconcept UnitOfMeasure :is-primitive PhysicalQuantity)
(defconcept UnitedKingdomGallon :is-primitive VolumeMeasure)
(defconcept UnitedStatesCent :is-primitive CurrencyMeasure)
(defconcept UnitedStatesDollar :is-primitive CurrencyMeasure)
(defconcept UnitedStatesGallon :is-primitive VolumeMeasure)
(defconcept UnsecuredLoan :is-primitive Loan)
(defconcept Update :is-primitive (:and ContentDevelopment FinancialTransaction))
(defconcept Uptick :is-primitive StockMarketTransaction)
(defconcept UserAccount :is-primitive ContentBearingObject)
(defconcept UserName :is-primitive SymbolicString)
(defconcept UserRequest :is-primitive ComputerProcess)
(defconcept UsingAResource :is-primitive ComputerProcess)
(defconcept UsingAService :is-primitive ComputerProcess)
(defconcept UsingAnAccount :is-primitive FinancialTransaction)
(defconcept Utility :is-primitive ComputerProgram)
(defconcept Utility-Strictness :is-primitive StrictnessAttribute)
(defconcept ValidCard :is-primitive BankCard)
(defconcept ValueStock :is-primitive Stock)
(defconcept VariableAritySumorelation :is-primitive Sumorelation)
(defconcept Verb :is-primitive Word)
(defconcept VerbPhrase :is-primitive Phrase)
(defconcept VerifyingCardCode :is-primitive AuthorizationOfTransaction)
(defconcept Vertebrate :is-primitive Animal)
(defconcept ViolentContest :is-primitive Contest)
(defconcept Virus :is-primitive Microorganism)
(defconcept VisaCard :is-primitive CreditCard)
(defconcept VisualAttribute :is-primitive PerceptualAttribute)
(defconcept Vitamin :is-primitive Nutrient)
(defconcept Volt :is-primitive SumofunctionQuantity)
(defconcept VolumeMeasure :is-primitive ConstantQuantity)
(defconcept Walking :is-primitive BodyMotion)
(defconcept War :is-primitive ViolentContest)
(defconcept WarmBloodedVertebrate :is-primitive Vertebrate)
(defconcept Water :is-primitive CompoundSubstance)
(defconcept WaterArea :is-primitive GeographicArea)
(defconcept Watt :is-primitive SumofunctionQuantity)
(defconcept Weapon :is-primitive Device)
(defconcept WebService :is-primitive ComputerProgram)
(defconcept Weber :is-primitive SumofunctionQuantity)
(defconcept Website :is-primitive Server)
(defconcept Wednesday :is-primitive Day)
(defconcept Week :is-primitive TimeInterval)
(defconcept WeekDuration :is-primitive TimeDuration)
(defconcept Wetting :is-primitive Combining)
(defconcept Withdrawal :is-primitive FinancialTransaction)
(defconcept Word :is-primitive LinguisticExpression
  :partitions (
    ($PARTITION_29$ (Noun Verb Adjective Adverb Particle))
  ))
(defconcept Worm :is-primitive Invertebrate)
(defconcept Writing :is-primitive ContentDevelopment)
(defconcept Year :is-primitive TimeInterval)
(defconcept YearDuration :is-primitive TimeDuration)
(defconcept YieldAttribute :is-primitive Attribute)
(defconcept ZeroCouponBond :is-primitive Bond)
(defconcept limitOrder :is-primitive Order)
(defrelation <=> :arity 2 :domain Formula :range Formula)
(defrelation => :arity 2 :domain Formula :range Formula)
(defrelation AbsoluteValueFn :arity 2 :domain RealSumonumber :range NonnegativeRealSumonumber)
(defrelation AbstractionFn :arity 2 :domain Sumoclass :range Attribute)
(defrelation AccountFn :arity 2 :domain FinancialAsset :range FinancialAccount)
(defrelation AdditionFn :arity 3 :domains (Quantity Quantity) :range Quantity :characteristics (:commutative))
(defrelation AddressFn :arity 2 :domain ComputerFile :range PhysicalAddress)
(defrelation ArcCosineFn :arity 2 :domain RealSumonumber :range PlaneAngleMeasure :inverse CosineFn)
(defrelation ArcSineFn :arity 2 :domain RealSumonumber :range PlaneAngleMeasure :inverse SineFn)
(defrelation ArcTangentFn :arity 2 :domain RealSumonumber :range PlaneAngleMeasure :inverse TangentFn)
(defrelation AssignmentFn :arity 2 :domain Sumofunction :range Entity)
(defrelation BackFn :arity 2 :domain SelfConnectedObject :range SelfConnectedObject)
(defrelation BeginFn :arity 2 :domain TimeInterval :range TimePoint)
(defrelation BeginNodeFn :arity 2 :domain GraphPath :range GraphNode)
(defrelation CPUUtilizationFn :arity 2 :is-primitive UnarySumofunction :domain ComputerProgram :range ConstantQuantity)
(defrelation CardinalityFn :arity 2 :domain (:or SumosetOrSumoclass Sumocollection) :range Sumonumber)
(defrelation CeilingFn :arity 2 :domain RealSumonumber :range Sumointeger)
(defrelation ComplementFn :arity 2 :domain SumosetOrSumoclass :range SumosetOrSumoclass)
(defrelation ConcatSeqFn :arity 3 :domains (Sumosequence Sumosequence) :range Sumosequence)
(defrelation CosineFn :arity 2 :domain PlaneAngleMeasure :range RealSumonumber :inverse ArcCosineFn)
(defrelation CurrencyFn :arity 2 :domain FinancialAccount :range FinancialInstrument)
(defrelation CutSumosetFn :arity 2 :domain Graph :range GraphPath)
(defrelation DayFn :arity 3 :domains (PositiveRealSumonumber Month) :range Day)
(defrelation DenominatorFn :arity 2 :domain RealSumonumber :range Sumointeger)
(defrelation DensityFn :arity 3 :domains (MassMeasure VolumeMeasure) :range SumofunctionQuantity)
(defrelation DivisionFn :arity 3 :domains (Quantity Quantity) :range Quantity)
(defrelation DomainFn :arity 2 :domain BinarySumorelation :range SumosetOrSumoclass)
(defrelation EditionFn :arity 3 :domains (ContentBearingObject PositiveSumointeger) :range ContentBearingObject)
(defrelation EndFn :arity 2 :domain TimeInterval :range TimePoint)
(defrelation EndNodeFn :arity 2 :domain GraphPath :range GraphNode)
(defrelation ExponentiationFn :arity 3 :domains (Quantity Sumointeger) :range Quantity)
(defrelation ExtensionFn :arity 2 :domain Attribute :range Sumoclass)
(defrelation FloorFn :arity 2 :domain RealSumonumber :range Sumointeger)
(defrelation FrontFn :arity 2 :domain SelfConnectedObject :range SelfConnectedObject)
(defrelation FutureFn :arity 2 :domain TimePosition :range TimeInterval)
(defrelation GeneralizedIntersectionFn :arity 2 :domain SumosetOrSumoclass :range SumosetOrSumoclass)
(defrelation GeneralizedUnionFn :arity 2 :domain SumosetOrSumoclass :range SumosetOrSumoclass)
(defrelation GigaFn :arity 2 :domain UnitOfMeasure :range UnitOfMeasure)
(defrelation GraphPathFn :arity 3 :domains (GraphNode GraphNode) :range GraphPath)
(defrelation GreatestCommonDivisorFn :range Sumointeger)
(defrelation HeadOfSeqFn :arity 2 :domain Sumosequence :range Sumosequence)
(defrelation HourFn :arity 3 :domains (PositiveRealSumonumber Day) :range Hour)
(defrelation IdentityFn :arity 2 :domain Entity :range Entity)
(defrelation ImaginaryPartFn :arity 2 :domain ComplexSumonumber :range ImaginarySumonumber)
(defrelation ImmediateFutureFn :arity 2 :domain TimePosition :range TimeInterval)
(defrelation ImmediatePastFn :arity 2 :domain TimePosition :range TimeInterval)
(defrelation InitialNodeFn :arity 2 :domain GraphArc :range GraphNode)
(defrelation InitialProfileFn :arity 2 :domain ComputerProgram)
(defrelation IntersectionFn :arity 3 :domains (SumosetOrSumoclass SumosetOrSumoclass) :range SumosetOrSumoclass)
(defrelation IntervalFn :arity 3 :domains (ConstantQuantity ConstantQuantity) :range ConstantQuantity)
(defrelation IthMemberOfSeqFn :arity 3 :domains (Sumosequence Sumointeger) :range Entity)
(defrelation KappaFn :arity 3 :domains (SymbolicString Formula) :range SumosetOrSumoclass)
(defrelation KiloFn :arity 2 :domain UnitOfMeasure :range UnitOfMeasure)
(defrelation LeastCommonMultipleFn :range Sumointeger)
(defrelation LengthOfSeqFn :arity 2 :domain Sumosequence :range Sumointeger)
(defrelation LogFn :arity 3 :domains (RealSumonumber PositiveSumointeger) :range RealSumonumber)
(defrelation MagnitudeFn :arity 2 :domain ConstantQuantity :range RealSumonumber)
(defrelation MaxFn :arity 3 :domains (Quantity Quantity) :range Quantity :characteristics (:commutative))
(defrelation MaxSeqFn :arity 2 :domain Sumosequence :range Sumointeger)
(defrelation MaximalWeightedPathFn :arity 3 :domains (GraphNode GraphNode) :range GraphPath)
(defrelation MeasureFn :arity 3 :domains (RealSumonumber UnitOfMeasure) :range ConstantQuantity)
(defrelation MegaFn :arity 2 :domain UnitOfMeasure :range UnitOfMeasure)
(defrelation MereologicalDifferenceFn :arity 3 :domains (Object Object) :range Object)
(defrelation MereologicalProductFn :arity 3 :domains (Object Object) :range Object)
(defrelation MereologicalSumFn :arity 3 :domains (Object Object) :range Object)
(defrelation MicroFn :arity 2 :domain UnitOfMeasure :range UnitOfMeasure)
(defrelation MilliFn :arity 2 :domain UnitOfMeasure :range UnitOfMeasure)
(defrelation MinFn :arity 3 :domains (Quantity Quantity) :range Quantity :characteristics (:commutative))
(defrelation MinSeqFn :arity 2 :domain Sumosequence)
(defrelation MinimalCutSumosetFn :arity 2 :domain Graph :range GraphPath)
(defrelation MinimalWeightedPathFn :arity 3 :domains (GraphNode GraphNode) :range GraphPath)
(defrelation MinimumFn :range Sumointeger)
(defrelation MinuteFn :arity 3 :domains (PositiveRealSumonumber Hour) :range Minute)
(defrelation MonthFn :arity 3 :domains (Month Year) :range Month)
(defrelation MultiplicationFn :arity 3 :domains (Quantity Quantity) :range Quantity :characteristics (:commutative))
(defrelation NanoFn :arity 2 :domain UnitOfMeasure :range UnitOfMeasure)
(defrelation NumeratorFn :arity 2 :domain RealSumonumber :range Sumointeger)
(defrelation OrganizationFn :arity 2 :domain OrganizationUnit :range Organization)
(defrelation PastFn :arity 2 :domain TimePosition :range TimeInterval)
(defrelation PathWeightFn :arity 2 :domain GraphPath :range RealSumonumber)
(defrelation PeriodicalIssueFn :arity 3 :domains (Periodical PositiveSumointeger) :range Periodical)
(defrelation PicoFn :arity 2 :domain UnitOfMeasure :range UnitOfMeasure)
(defrelation PowerSumosetFn :arity 2 :domain SumosetOrSumoclass :range SumosetOrSumoclass)
(defrelation PredecessorFn :arity 2 :domain Sumointeger :range Sumointeger)
(defrelation PrincipalHostFn :arity 2 :domain Hole :range Object)
(defrelation ProbabilityFn :arity 2 :domain Formula :range RealSumonumber)
(defrelation PropertyFn :arity 2 :domain Agent :range Sumoset)
(defrelation RangeFn :arity 2 :domain BinarySumorelation :range SumosetOrSumoclass)
(defrelation RationalSumonumberFn :arity 2 :domain Sumonumber :range RationalSumonumber)
(defrelation RealSumonumberFn :arity 2 :domain Sumonumber :range RealSumonumber)
(defrelation ReciprocalFn :arity 2 :domain Quantity :range Quantity)
(defrelation RecurrentTimeIntervalFn :arity 3 :domains (TimeInterval TimeInterval) :range TimeInterval)
(defrelation RelativeComplementFn :arity 3 :domains (SumosetOrSumoclass SumosetOrSumoclass) :range SumosetOrSumoclass)
(defrelation RelativeTimeFn :arity 3 :domains (TimePosition TimeZone) :range TimePosition)
(defrelation RemainderFn :arity 3 :domains (Quantity Quantity) :range Quantity)
(defrelation ReverseSeqFn :arity 2 :domain Sumosequence :range Sumosequence)
(defrelation RoundFn :arity 2 :domain Quantity :range Quantity)
(defrelation SecondFn :arity 3 :domains (PositiveRealSumonumber Minute) :range Second)
(defrelation SeriesVolumeFn :arity 3 :domains (Series PositiveSumointeger) :range Text)
(defrelation ShutdownFn :arity 2 :domain ComputerProgram :range ShutdownBlock)
(defrelation SignumFn :arity 2 :domain RealSumonumber :range Sumointeger)
(defrelation SineFn :arity 2 :domain PlaneAngleMeasure :range RealSumonumber :inverse ArcSineFn)
(defrelation SkinFn :arity 2 :domain Hole :range Object)
(defrelation SpeedFn :arity 3 :domains (LengthMeasure TimeDuration) :range SumofunctionQuantity)
(defrelation SquareRootFn :arity 2 :domain RealSumonumber :range Sumonumber)
(defrelation StartupFn :arity 2 :domain ComputerProgram :range StartupBlock)
(defrelation SubtractionFn :arity 3 :domains (Quantity Quantity) :range Quantity)
(defrelation SuccessorFn :arity 2 :domain Sumointeger :range Sumointeger)
(defrelation SumointegerSquareRootFn :arity 2 :domain RealSumonumber :range NonnegativeSumointeger)
(defrelation SumolistConcatenateFn :arity 3 :domains (Sumolist Sumolist) :range Sumolist)
(defrelation SumolistFn :range Sumolist)
(defrelation SumolistLengthFn :arity 2 :domain Sumolist :range NonnegativeSumointeger)
(defrelation SumolistOrderFn :arity 3 :domains (Sumolist PositiveSumointeger) :range Entity)
(defrelation Sumosubset :arity 2 :is-primitive subclass :domain Sumoset :range Sumoset)
(defrelation TailOfSeqFn :arity 2 :domain Sumosequence :range Sumosequence)
(defrelation TangentFn :arity 2 :domain PlaneAngleMeasure :range RealSumonumber :inverse ArcTangentFn)
(defrelation TemporalCompositionFn :arity 3 :domains (TimeInterval TimeInterval) :range TimeInterval)
(defrelation TeraFn :arity 2 :domain UnitOfMeasure :range UnitOfMeasure)
(defrelation TerminalNodeFn :arity 2 :domain GraphArc :range GraphNode)
(defrelation TimeIntervalFn :arity 3 :domains (TimePoint TimePoint) :range TimeInterval)
(defrelation UnionFn :arity 3 :domains (SumosetOrSumoclass SumosetOrSumoclass) :range SumosetOrSumoclass)
(defrelation VelocityFn :arity 5 :domains (LengthMeasure TimeDuration Region DirectionalAttribute) :range SumofunctionQuantity)
(defrelation WealthFn :arity 2 :domain Agent :range CurrencyMeasure)
(defrelation WhenFn :arity 2 :domain Physical :range TimeInterval)
(defrelation WhereFn :arity 3 :domains (Physical TimePoint) :range Region)
(defrelation YearFn :arity 2 :domain Sumointeger :range Year)
(defrelation abstractionLevel :arity 2 :is-primitive sumoproperty :domain RealtimeSystem :range AbstractionLevelAttribute)
(defrelation accessCondition :arity 2 :domain WebService :range Formula)
(defrelation accountAt :arity 2 :is-primitive agreementMember :domain FinancialAccount :range FinancialOrganization)
(defrelation accountHolder :arity 2 :is-primitive agreementMember :domain FinancialAccount :range CognitiveAgent)
(defrelation accountStatus :arity 2 :domain FinancialAccount :range StatusAttribute)
(defrelation accountSumonumber :arity 2 :domain FinancialAccount :range PositiveSumointeger)
(defrelation accruedInterest :arity 2 :domain Bond :range Interest)
(defrelation address :arity 2 :is-primitive refers :domain Address :range Agent)
(defrelation administrator :arity 2 :domain FinancialAccount :range Position)
(defrelation administratorStatus :arity 2 :domain Position :range StatusAttribute)
(defrelation afterTaxIncome :arity 3 :is-primitive incomeEarned :domains (Human CurrencyMeasure) :range OrganizationalProcess)
(defrelation age :arity 2 :is-primitive measure :domain Object :range TimeDuration)
(defrelation agent-rel :arity 2 :domain Process :range Agent)
(defrelation agreementActive :arity 2 :domain Contract :range TimePosition)
(defrelation agreementMember :arity 2 :domain Agreement :range Agent)
(defrelation agreementPeriod :arity 2 :domain Contract :range TimeInterval)
(defrelation altitude :is-primitive length)
(defrelation amountCharged :arity 2 :is-primitive transactionAmount :domain ChargingAFee :range CurrencyMeasure)
(defrelation amountDue :arity 3 :domains (FinancialAccount CurrencyMeasure) :range TimePosition)
(defrelation and :arity 2 :domain Formula :range Formula)
(defrelation appraisedValue :arity 2 :is-primitive monetaryValue :domain Collateral :range CurrencyMeasure)
(defrelation arcWeight :arity 2 :domain GraphArc :range RealSumonumber)
(defrelation askPrice :arity 3 :is-primitive price :domains (Object CurrencyMeasure) :range TimePosition)
(defrelation atTheMoney :arity 2 :domain Option :range TimePosition)
(defrelation atTime :arity 2 :is-primitive existant :domain ServiceProcess :range TimePoint)
(defrelation attribute-rel :arity 2 :is-primitive sumoproperty :domain Object :range Attribute)
(defrelation authors :arity 2 :domain Agent :range Text)
(defrelation availableBalance :arity 3 :is-primitive currentAccountBalance :domains (FinancialAccount Day) :range CurrencyMeasure)
(defrelation availableCash :arity 3 :is-primitive availableBalance :domains (FinancialAccount Day) :range CurrencyMeasure)
(defrelation averageResponseTime :is-primitive serviceParameter)
(defrelation bandwidthOf :arity 2 :domain ComputerNetwork :range Bandwidth)
(defrelation bankAccount :arity 2 :domain FinancialAccount :range Bank-FinancialOrganization)
(defrelation batchInterArrival :arity 2 :domain ComputerPath :range TimeDuration)
(defrelation batchLatency :arity 2 :domain ComputerPath :range TimeDuration)
(defrelation before :arity 2 :is-primitive beforeOrEqual :domain TimePoint :range TimePoint)
(defrelation beforeOrEqual :arity 2 :domain TimePoint :range TimePoint)
(defrelation beforeTaxIncome :arity 3 :is-primitive incomeEarned :domains (Human CurrencyMeasure) :range OrganizationalProcess)
(defrelation believes :arity 2 :is-primitive inScopeOfInterest :domain CognitiveAgent :range Formula)
(defrelation benchmark :arity 2 :domain Abstract :range PerformanceMeasure)
(defrelation benchmarkPerformance :arity 3 :domains (ComputationalSystem MonitoringProgram) :range Quantity)
(defrelation between :arity 3 :domains (Object Object) :range Object)
(defrelation bidPrice :arity 3 :is-primitive price :domains (Object CurrencyMeasure) :range TimePosition)
(defrelation bondRating :arity 2 :is-primitive attribute-rel :domain Bond :range FinancialRating)
(defrelation borrower :arity 2 :is-primitive agreementMember :domain Loan :range CognitiveAgent)
(defrelation bottom :arity 2 :is-primitive superficialPart :domain SelfConnectedObject :range SelfConnectedObject)
(defrelation buyingPowerAmount :is-primitive availableBalance)
(defrelation callDate :arity 2 :domain Bond :range Day)
(defrelation capability :arity 3 :domains (Process CaseRole) :range Object)
(defrelation cardAccount :arity 2 :domain BankCard :range FinancialAccount)
(defrelation cardCode :arity 2 :is-primitive represents :domain ContentBearingObject :range BankCard)
(defrelation causes :arity 2 :domain Process :range Process)
(defrelation causesSubclass :arity 2 :domain Process :range Process)
(defrelation checkAccount :arity 2 :domain Check :range FinancialAccount)
(defrelation checkSumonumber :arity 2 :domain Check :range PositiveSumointeger)
(defrelation citizen :arity 2 :domain Human :range Nation)
(defrelation closedOn :arity 2 :domain Sumofunction :range SumosetOrSumoclass)
(defrelation closingPrice :arity 2 :is-primitive monetaryValue :domain Stock :range CurrencyMeasure)
(defrelation collectRate :arity 2 :is-primitive frequency :domain Process :range TimeDuration)
(defrelation commandLineArguments :arity 2 :domain ComputerProgram :range Sumolist)
(defrelation communicationThru :arity 2 :domain WebService :range Formula)
(defrelation compensationPackage :arity 3 :domains (Human Income) :range TimePosition)
(defrelation completelyFills :is-primitive partiallyFills)
(defrelation complexity :arity 2 :is-primitive sumoproperty :domain RealtimeSystem :range TimingRequirementAttribute)
(defrelation component :arity 2 :is-primitive part :domain CorpuscularObject :range CorpuscularObject)
(defrelation componentDataID :arity 5 :domains (TimePosition ComputerComponent ComputerComponent UnitOfMeasure) :range SymbolicString)
(defrelation compoundInterest :arity 3 :is-primitive interestEarned :domains (FinancialAccount Interest) :range TimeInterval)
(defrelation computerRunning :arity 2 :is-primitive instrument :domain ComputerProcess :range Computer)
(defrelation conditionalEffect :arity 2 :is-primitive serviceEffect :domain WebService :range ComputerProcess)
(defrelation conditionalOutput :arity 2 :is-primitive output :domain WebService :range Formula)
(defrelation conditionalProbability :arity 3 :domains (Formula Formula) :range RealSumonumber)
(defrelation confersObligation :arity 3 :domains (Process Entity) :range CognitiveAgent)
(defrelation confersRight :arity 3 :domains (Process Entity) :range CognitiveAgent)
(defrelation confirmationSumonumber :arity 2 :domain FinancialTransaction :range SymbolicString)
(defrelation connectedEngineeringComponents :arity 2 :domain EngineeringComponent :range EngineeringComponent :characteristics (:symmetric))
(defrelation connects :arity 3 :domains (SelfConnectedObject SelfConnectedObject) :range SelfConnectedObject)
(defrelation connectsEngineeringComponents :arity 3 :is-primitive connects :domains (EngineeringConnection EngineeringComponent) :range EngineeringComponent)
(defrelation considers :arity 2 :is-primitive inScopeOfInterest :domain CognitiveAgent :range Formula)
(defrelation containsInformation :arity 2 :is-primitive represents :domain ContentBearingObject :range Sumoproposition)
(defrelation controlStatus :arity 2 :domain Process :range ProcessControlStatus)
(defrelation cooccur :arity 2 :domain Physical :range Physical)
(defrelation copy :arity 2 :domain Object :range Object)
(defrelation couponInterest :arity 2 :domain Bond :range Interest)
(defrelation creditLimit :arity 2 :domain CreditAccount :range CurrencyMeasure)
(defrelation creditRanking :arity 2 :is-primitive attribute-rel :domain CognitiveAgent :range FinancialRating)
(defrelation creditsPerPeriod :arity 3 :domains (FinancialAccount CurrencyMeasure) :range TimeInterval)
(defrelation criticalityLevel :arity 2 :domain ComputerProgram :range Sumointeger)
(defrelation crosses :is-primitive traverses)
(defrelation currentAccountBalance :arity 3 :domains (FinancialAccount Day) :range CurrencyMeasure)
(defrelation currentInterestRate :arity 3 :domains (FinancialAccount Day) :range InterestRate)
(defrelation customer :arity 2 :domain CognitiveAgent :range CognitiveAgent)
(defrelation customerRepresentative :arity 3 :domains (CognitiveAgent CognitiveAgent) :range Organization)
(defrelation dailyLimit :arity 3 :domains (FinancialAccount FinancialTransaction) :range CurrencyMeasure)
(defrelation dataID :arity 2 :domain MonitoringProgram :range SymbolicString)
(defrelation dataProcessed :arity 2 :is-primitive patient :domain ComputerProcess :range ComputerData)
(defrelation dataStreamSlack :arity 2 :domain ComputerPath :range PositiveSumointeger)
(defrelation date :arity 2 :is-primitive time :domain Physical :range Day)
(defrelation dateOfStatement :arity 2 :domain BankStatement :range Day)
(defrelation dayPhone :arity 2 :domain SymbolicString :range Agent)
(defrelation decreasesLikelihood :arity 2 :domain Formula :range Formula)
(defrelation defaultNetwork :arity 2 :domain HardwareSystem :range ComputerNetwork)
(defrelation degreeOfQuality :arity 2 :domain WebService :range ServiceAttribute)
(defrelation dependencyDelay :arity 2 :domain ComputerProgram :range TimeDuration)
(defrelation dependencyType :arity 2 :domain ComputerProgram)
(defrelation describesAModel :inverse serviceIsDescribedByModel)
(defrelation designPattern :arity 2 :is-primitive sumoproperty :domain RealtimeSystem :range DesignPatternAttribute)
(defrelation desires :arity 2 :is-primitive inScopeOfInterest :domain CognitiveAgent :range Formula)
(defrelation destination :arity 2 :domain Process :range Entity)
(defrelation developmentalForm :arity 2 :is-primitive attribute-rel :domain OrganicObject :range DevelopmentalAttribute)
(defrelation diameter :is-primitive width)
(defrelation direction :arity 2 :domain Process :range DirectionalAttribute)
(defrelation directoryOf :arity 2 :domain ComputerFile :range ComputerDirectory)
(defrelation distance :arity 3 :domains (Physical Physical) :range LengthMeasure)
(defrelation distributes :arity 2 :domain BinarySumofunction :range BinarySumofunction)
(defrelation downPayment :arity 2 :domain Loan :range CurrencyMeasure)
(defrelation duration :arity 2 :domain TimeInterval :range TimeDuration)
(defrelation during :arity 2 :is-primitive overlapsTemporally :domain TimeInterval :range TimeInterval)
(defrelation earlier :arity 2 :domain TimeInterval :range TimeInterval)
(defrelation editor :arity 2 :domain Agent :range Text)
(defrelation effectiveDate :arity 2 :is-primitive date :domain Contract :range Day)
(defrelation element :arity 2 :is-primitive instance :domain Entity :range Sumoset)
(defrelation emailAddress :arity 2 :is-primitive refers :domain SymbolicString :range Agent)
(defrelation employeeContribution :arity 3 :domains (Human CurrencyMeasure) :range TimeInterval)
(defrelation employs :arity 2 :domain Organization :range CognitiveAgent)
(defrelation endTime :arity 2 :domain ServiceProcess :range TimePoint)
(defrelation engineeringSubcomponent :arity 2 :is-primitive properPart :domain EngineeringComponent :range EngineeringComponent)
(defrelation entails :arity 2 :domain Formula :range Formula)
(defrelation environmentAttributes :arity 2 :is-primitive sumoproperty :domain ComputerProgram :range EnvironmentSoftwareAttribute)
(defrelation equal :arity 2 :domain Entity :range Entity)
(defrelation equivalenceSumorelationOn :arity 2 :domain BinarySumorelation :range SumosetOrSumoclass)
(defrelation equivalentContentInstance :arity 2 :is-primitive subsumesContentInstance :domain ContentBearingObject :range ContentBearingObject)
(defrelation equivalentContentSumoclass :arity 2 :is-primitive subsumesContentSumoclass :domain ContentBearingObject :range ContentBearingObject)
(defrelation eveningPhone :arity 2 :domain SymbolicString :range Agent)
(defrelation exactlyLocated :is-primitive located)
(defrelation exhaustiveAttribute :arity 2 :domain Attribute)
(defrelation exhaustiveDecomposition :arity 2 :domain Sumoclass)
(defrelation exists :arity 2 :domain Sumolist :range Formula)
(defrelation experiencer :arity 2 :domain Process :range Agent)
(defrelation expirationDate :arity 2 :is-primitive date :domain Contract :range Day)
(defrelation exploits :arity 2 :domain Object :range Agent)
(defrelation expressedInLanguage :arity 2 :domain LinguisticExpression :range Language)
(defrelation faceValue :arity 2 :domain Collateral :range CurrencyMeasure)
(defrelation faces :arity 2 :domain Object :range DirectionalAttribute)
(defrelation familySumorelation :arity 2 :domain Organism :range Organism)
(defrelation father :arity 2 :is-primitive parent :domain Organism :range Organism)
(defrelation fills :arity 2 :is (:and completelyFills properlyFills) :domain Object :range Hole)
(defrelation finalPrice :arity 2 :is-primitive monetaryValue :domain Stock :range CurrencyMeasure)
(defrelation finishes :arity 2 :domain TimeInterval :range TimeInterval)
(defrelation firstName :arity 2 :is-primitive name :domain Agent :range SymbolicString)
(defrelation fixedInterestRate :arity 2 :domain FinancialAccount :range InterestRate)
(defrelation floorLoan :arity 2 :domain Loan :range CurrencyMeasure)
(defrelation forall :arity 2 :domain Sumolist :range Formula)
(defrelation formOfAdaptation :arity 2 :is-primitive sumoproperty :domain RealtimeSystem :range FormOfAdaptationAttribute)
(defrelation frequency :arity 2 :domain Process :range TimeDuration)
(defrelation geographicRadius :arity 2 :domain WebService :range GeographicArea)
(defrelation granularity :arity 2 :domain RealtimeSystem :range TimeDuration)
(defrelation graphPart :arity 2 :domain GraphElement :range Graph)
(defrelation greaterThan :arity 2 :domain Quantity :range Quantity :inverse lessThan)
(defrelation greaterThanOrEqualTo :arity 2 :domain Quantity :range Quantity :inverse lessThanOrEqualTo)
(defrelation groundingSupportsService :inverse supportsAGrounding)
(defrelation hardwareType :arity 2 :is-primitive represents :domain SymbolicString :range Computer)
(defrelation hasAccess :arity 2 :domain ServiceUser :range WebService)
(defrelation hasAccount :arity 2 :is-primitive possesses :domain ComputerUser :range UserAccount)
(defrelation hasDependency :arity 2 :domain ComputerProgram :range ComputerProgram)
(defrelation hasPurpose :arity 2 :domain Physical :range Formula)
(defrelation hasPurposeForAgent :arity 3 :domains (Physical Formula) :range Agent)
(defrelation hasSkill :arity 2 :domain Process :range Agent)
(defrelation heartBeatRate :arity 2 :is-primitive frequency :domain Process :range TimeDuration)
(defrelation height :arity 2 :is-primitive length :domain SelfConnectedObject :range LengthMeasure)
(defrelation holds :arity 2 :domain Sumorelation)
(defrelation holdsDuring :arity 2 :domain TimePosition :range Formula)
(defrelation holdsObligation :arity 2 :domain Process :range CognitiveAgent)
(defrelation holdsRight :arity 2 :domain Process :range CognitiveAgent)
(defrelation hole :arity 2 :domain Hole :range SelfConnectedObject)
(defrelation homomorphism :arity 3 :domains (Sumofunction Sumorelation) :range Sumorelation)
(defrelation hostJitter :arity 2 :domain Computer :range RealSumonumber)
(defrelation hostOf :arity 2 :domain ComputationalSystem :range Computer)
(defrelation hostStatus :arity 2 :is-primitive attribute-rel :domain Computer :range ComputerStatus)
(defrelation identityElement :arity 2 :domain BinarySumofunction :range Entity)
(defrelation imageResolution :arity 2 :domain ComputerImage :range PhysicalQuantity)
(defrelation imagenResolution :arity 2)
(defrelation immediateInstance :is-primitive instance)
(defrelation immediateSubclass :is-primitive subclass)
(defrelation implementsAModel :arity 2 :is-primitive represents :domain ServiceModel :range WebService)
(defrelation inScopeOfInterest :arity 2 :domain CognitiveAgent :range Entity)
(defrelation inSumolist :arity 2 :domain Entity :range Sumolist)
(defrelation inTheMoney :arity 2 :domain Option :range TimePosition)
(defrelation income :arity 3 :domains (Human CurrencyMeasure) :range TimeInterval)
(defrelation incomeEarned :arity 3 :domains (Human CurrencyMeasure) :range OrganizationalProcess)
(defrelation increasesLikelihood :arity 2 :domain Formula :range Formula)
(defrelation independentProbability :arity 2 :domain Formula :range Formula :characteristics (:symmetric))
(defrelation inflationRate :arity 2 :domain Inflation :range RealSumonumber)
(defrelation inhabits :arity 2 :domain Organism :range Object)
(defrelation inhibits :arity 2 :domain Process :range Process)
(defrelation initialSumolist :arity 2 :is-primitive subSumolist)
(defrelation instance :arity 2 :domain Entity :range SumosetOrSumoclass)
(defrelation instrument :arity 2 :is-primitive patient :domain Process :range Object)
(defrelation insured :arity 2 :domain Contract :range Organization)
(defrelation intendedPurpose :arity 2 :domain WebService :range Formula)
(defrelation interestEarned :arity 3 :domains (FinancialAccount Interest) :range TimeInterval)
(defrelation interestRatePerPeriod :arity 3 :domains (FinancialAccount InterestRate) :range TimeInterval)
(defrelation interiorPart :is-primitive part)
(defrelation ipAddressOf :arity 2 :domain Computer :range IPAddress)
(defrelation irreflexiveOn :arity 2 :domain BinarySumorelation :range SumosetOrSumoclass)
(defrelation isProvidedByService :inverse providesAService)
(defrelation isomorphism :arity 3 :domains (Sumofunction Sumorelation) :range Sumorelation)
(defrelation issuedBy :arity 2 :domain FinancialInstrument :range CognitiveAgent)
(defrelation knows :arity 2 :is-primitive inScopeOfInterest :domain CognitiveAgent :range Formula)
(defrelation larger :arity 2 :domain Object :range Object :inverse smaller)
(defrelation lastStatement :arity 2 :domain FinancialAccount :range BankStatement)
(defrelation lastStatementBalance :arity 2 :domain FinancialAccount :range CurrencyMeasure)
(defrelation lender :arity 2 :is-primitive agreementMember :domain Loan :range CognitiveAgent)
(defrelation length :arity 2 :is-primitive measure :domain Object :range LengthMeasure)
(defrelation lessThan :arity 2 :domain Quantity :range Quantity :inverse greaterThan)
(defrelation lessThanOrEqualTo :arity 2 :domain Quantity :range Quantity :inverse greaterThanOrEqualTo)
(defrelation limitPrice :arity 2 :domain LimitOrder :range CurrencyMeasure)
(defrelation links :arity 3 :domains (GraphNode GraphNode) :range GraphArc)
(defrelation liquidity :arity 2 :domain FinancialAccount :range LiquidtityAttribute)
(defrelation listedOn :arity 2 :domain Stock :range Organization)
(defrelation load :arity 2 :is-primitive measure :domain ComputerComponent :range ConstantQuantity)
(defrelation loanFeeAmount :arity 2 :domain Loan :range CurrencyMeasure)
(defrelation loanForPurchase :arity 2 :domain Loan :range Object)
(defrelation loanInterest :arity 2 :domain Loan :range Amount)
(defrelation located :arity 2 :is-primitive partlyLocated :domain Physical :range Object)
(defrelation manner :arity 2 :is-primitive sumoproperty :domain Process :range Attribute)
(defrelation marginBalanceAmount :is-primitive availableBalance)
(defrelation marketValueAmount :is-primitive availableBalance)
(defrelation material :arity 2 :domain Substance :range CorpuscularObject)
(defrelation maturityDate :arity 2 :is-primitive expirationDate :domain FinancialAccount :range Day)
(defrelation maxResponseTime :is-primitive serviceParameter)
(defrelation maximumReplications :arity 2 :domain ComputerProgram :range PositiveSumointeger)
(defrelation measure :arity 2 :domain Object :range PhysicalQuantity)
(defrelation meetsSpatially :characteristics (:symmetric))
(defrelation meetsTemporally :arity 2 :domain TimeInterval :range TimeInterval)
(defrelation member :arity 2 :is-primitive part :domain SelfConnectedObject :range Sumocollection)
(defrelation memorySize :arity 2 :is-primitive measure :domain ComputationalSystem :range ConstantQuantity)
(defrelation minimumBalance :arity 3 :domains (FinancialAccount FinancialTransaction) :range CurrencyMeasure)
(defrelation minimumPayment :arity 3 :domains (LiabilityAccount CurrencyMeasure) :range TimeDuration)
(defrelation minimumReplications :arity 2 :domain ComputerProgram :range PositiveSumointeger)
(defrelation modalAttribute :arity 2 :is-primitive sumoproperty :domain Formula :range NormativeAttribute)
(defrelation monetaryValue :arity 2 :is-primitive measure :domain Object :range CurrencyMeasure)
(defrelation monitorApplicationData :arity 2 :domain TimePosition :range ComputerProgram)
(defrelation monitorComponentData :arity 3 :domains (TimePosition SymbolicString) :range RealSumonumber)
(defrelation monitorConnectivityData :arity 2 :domain TimePosition :range IPAddress)
(defrelation monthlyIncome :arity 2 :domain Human :range CurrencyMeasure)
(defrelation mother :arity 2 :is-primitive parent :domain Organism :range Organism)
(defrelation names :arity 2 :is-primitive refers :domain SymbolicString)
(defrelation needs :arity 2 :is-primitive inScopeOfInterest :domain CognitiveAgent :range Object)
(defrelation netAmount :arity 2 :domain Investment :range CurrencyMeasure)
(defrelation netWorth :arity 3 :domains (CognitiveAgent CurrencyMeasure) :range Day)
(defrelation not :arity 2 :domain Formula)
(defrelation notices :arity 2 :is-primitive InScopeOfInterest :domain CognitiveAgent :range Object)
(defrelation numberOfCPUs :arity 2 :domain Computer :range PositiveSumointeger)
(defrelation occupiesPosition :arity 3 :domains (Human Position) :range Organization)
(defrelation optionHolder :arity 2 :is-primitive agreementMember :domain Option :range CognitiveAgent)
(defrelation optionSeller :arity 2 :is-primitive agreementMember :domain Option :range CognitiveAgent)
(defrelation or :arity 2 :domain Formula :range Formula)
(defrelation orderFor :arity 3 :domains (FinancialTransaction FinancialTransaction) :range Security)
(defrelation orientation :arity 3 :domains (Object Object) :range PositionalAttribute)
(defrelation origin :arity 2 :domain Process :range Object)
(defrelation originalBalance :arity 2 :domain FinancialAccount :range CurrencyMeasure)
(defrelation outOfTheMoney :arity 2 :domain Option :range TimePosition)
(defrelation overdraft :arity 3 :domains (FinancialAccount CurrencyMeasure) :range Day)
(defrelation overlapsPartially :is-primitive overlapsSpatially :characteristics (:symmetric))
(defrelation overlapsSpatially :characteristics (:symmetric))
(defrelation overlapsTemporally :arity 2 :domain TimeInterval :range TimeInterval)
(defrelation parent :arity 2 :is-primitive familySumorelation :domain Organism :range Organism)
(defrelation part :arity 2 :is-primitive located :domain Object :range Object)
(defrelation partialOrderingOn :arity 2 :domain BinarySumorelation :range SumosetOrSumoclass)
(defrelation partiallyFills :arity 2 :is-primitive located :domain Object :range Hole)
(defrelation partition :arity 2 :domain Sumoclass)
(defrelation partlyLocated :arity 2 :domain Object :range Region)
(defrelation password :arity 2 :is-primitive name :domain ComputerPassword :range ComputerUser)
(defrelation path :arity 2 :domain Motion :range Region)
(defrelation pathLength :arity 2 :domain GraphPath :range PositiveSumointeger)
(defrelation patient :arity 2 :domain Process :range Entity)
(defrelation paymentsPerPeriod :arity 3 :domains (FinancialAccount CurrencyMeasure) :range TimeInterval)
(defrelation penetrates :is-primitive meetsSpatially)
(defrelation performanceResult :arity 3 :domains (MeasuringPerformance ComputerComponent) :range RealSumonumber)
(defrelation periodicPayment :arity 3 :domains (FinancialAccount CurrencyMeasure) :range TimeDuration)
(defrelation phoneSumonumber :arity 2 :is-primitive refers :domain SymbolicString :range Telephone)
(defrelation piece :arity 2 :is-primitive part :domain Substance :range Substance)
(defrelation pin :arity 2 :is-primitive represents :domain SymbolicString :range BankCard)
(defrelation portSumonumber :arity 2 :domain ComputerProgram :range PositiveSumointeger)
(defrelation possesses :arity 2 :domain Agent :range Object)
(defrelation postalCode :arity 2 :is-primitive BinaryPredicate :domain Address)
(defrelation potentialLoss :arity 3 :domains (CognitiveAgent Investment) :range CurrencyMeasure)
(defrelation precondition :arity 2 :domain Process :range Process)
(defrelation prefers :arity 3 :domains (CognitiveAgent Formula) :range Formula)
(defrelation premium :arity 2 :domain Option :range CurrencyMeasure)
(defrelation presentsAProfile :arity 2 :is-primitive represents :domain ServiceProfile :range WebService :inverse profileIsPresentedByService)
(defrelation prevents :arity 2 :domain Process :range Process)
(defrelation price :arity 3 :domains (Physical CurrencyMeasure) :range TimePosition)
(defrelation primeInterestRate :arity 2 :domain Day :range InterestRate)
(defrelation principalAmount :arity 2 :domain FinancialAccount :range CurrencyMeasure)
(defrelation priority :arity 2 :domain ComputationalSystem :range PriorityAttribute)
(defrelation processAborted :arity 2 :domain Abort :range ComputerProcess)
(defrelation processComponent :arity 2 :is-primitive subProcess :domain ComputerProcess :range ServiceProcess)
(defrelation processEffect :arity 2 :domain ComputerProcess :range Formula)
(defrelation processID :arity 2 :domain ComputerProcess :range PositiveSumointeger)
(defrelation processInput :arity 2 :is-primitive processParameter :domain ComputerProcess :range Entity)
(defrelation processName :arity 2 :domain ComputerProcess :range Formula)
(defrelation processOutput :arity 2 :is-primitive processParameter :domain ComputerProcess :range Entity)
(defrelation processParticipant :arity 2 :is-primitive processParameter :domain ComputerProcess :range Entity)
(defrelation processPrecondition :arity 2 :domain ComputerProcess :range Formula)
(defrelation productModel :arity 2 :is-primitive represents :domain SymbolicString :range Product)
(defrelation profileIsPresentedByService :inverse presentsAProfile)
(defrelation profit :arity 2 :domain FinancialTransaction :range CurrencyMeasure)
(defrelation programCopy :arity 2 :is-primitive containsInformation :domain ComputerFile :range ComputerProgram)
(defrelation programRunning :arity 2 :domain ComputerProcess :range ComputerProgram)
(defrelation properPart :is-primitive part)
(defrelation properlyFills :arity 2 :is-primitive partiallyFills :domain Object :range Hole)
(defrelation providesAService :arity 2 :domain WebService :range ServiceProvider :inverse isProvidedByService)
(defrelation publishes :arity 2 :domain Organization :range Text)
(defrelation purchasesPerPeriod :arity 3 :domains (FinancialAccount CurrencyMeasure) :range TimeInterval)
(defrelation qoSSlack :arity 3 :domains (ComputerPath ConstantQuantity) :range ConstantQuantity)
(defrelation qualityGuarantee :arity 2 :domain WebService :range Formula)
(defrelation qualityRating :arity 2 :domain WebService :range ServiceRating)
(defrelation rMProgram-of :arity 2 :domain ResourceManagementProgram :range SoftwareSystem)
(defrelation realization :arity 2 :is-primitive represents :domain Process :range Sumoproposition)
(defrelation refers :arity 2 :domain Physical :range Entity)
(defrelation reflexiveOn :arity 2 :domain BinarySumorelation :range SumosetOrSumoclass)
(defrelation relatedExternalConcept :arity 3 :domains (SymbolicString Entity) :range Language)
(defrelation relatedInternalConcept :arity 2 :domain Entity :range Entity)
(defrelation represents :is-primitive refers)
(defrelation representsForAgent :arity 3 :domains (Physical Entity) :range Agent)
(defrelation representsInLanguage :arity 3 :domains (Physical Entity) :range Language)
(defrelation requestRate :arity 2 :is-primitive frequency :domain UserRequest :range TimeDuration)
(defrelation requestedBy :arity 2 :domain WebService :range Agent)
(defrelation resource :arity 2 :is-primitive patient :domain Process :range Object)
(defrelation resourceUsed :arity 2 :is-primitive patient :domain ComputerProcess :range ComputerResource)
(defrelation responseRate :arity 2 :is-primitive frequency :domain ComputerResponse :range TimeDuration)
(defrelation responseTime :arity 2 :domain UserRequest :range TimeInterval)
(defrelation responseTo :arity 2 :domain Response :range Request)
(defrelation result :arity 2 :is-primitive patient :domain Process :range Object)
(defrelation riskLevel :arity 2 :domain Investment :range RiskAttribute)
(defrelation riskTolerance :arity 2 :domain Investor :range RiskAttribute)
(defrelation role :arity 2 :domain ServiceProfile :range ServiceActor)
(defrelation runningOn :arity 2 :domain ComputerProgram :range Computer)
(defrelation runsOn :arity 2 :domain ComputerProgram :range Computer)
(defrelation securedBy :arity 2 :domain FinancialAccount :range Collateral)
(defrelation sendRate :arity 2 :is-primitive frequency :domain Process :range TimeDuration)
(defrelation serviceAddress :arity 2 :domain ServiceProvider :range ServiceAddress)
(defrelation serviceCategory :arity 2 :is-primitive AsymmetricSumorelation :domain ServiceProfile :range Entity)
(defrelation serviceEffect :arity 2 :domain WebService :range ComputerProcess)
(defrelation serviceEmail :arity 2 :domain ServiceProvider :range ServiceEmail)
(defrelation serviceFax :arity 2 :domain ServiceProvider :range ServiceFax)
(defrelation serviceFee :arity 3 :domains (FinancialOrganization FinancialTransaction) :range CurrencyMeasure)
(defrelation serviceInput :arity 2 :domain WebService :range Formula)
(defrelation serviceIsDescribedByModel :inverse describesAModel)
(defrelation serviceLocation :arity 2 :domain WebService :range GeographicArea)
(defrelation serviceName :arity 2 :is-primitive represents :domain ServiceProvider :range ServiceName)
(defrelation serviceOutput :arity 2 :domain WebService :range Formula)
(defrelation serviceParameter :arity 2 :domain ServiceProfile :range Entity)
(defrelation servicePhone :arity 2 :domain ServiceProvider :range ServicePhoneSumonumber)
(defrelation servicePrecondition :arity 2 :domain WebService :range Formula)
(defrelation serviceProduct :arity 2 :domain WebService :range Artifact)
(defrelation serviceTextDescription :arity 2 :domain ServiceName :range TextDescription)
(defrelation serviceType :arity 2 :domain WebService :range WebService)
(defrelation serviceWebUrl :arity 2 :domain ServiceProvider :range ServiceWebUrl)
(defrelation settlingTime :arity 2 :domain ComputerProgram :range TimeDuration)
(defrelation shareHolder :arity 2 :domain Share :range CognitiveAgent)
(defrelation shareOf :arity 2 :is-primitive BinaryPredicate :domain Share :range Organization)
(defrelation shortBalanceAmount :is-primitive availableBalance)
(defrelation shutdownOf :arity 2 :domain ShutdownBlock :range ComputerProgram)
(defrelation sibling :arity 2 :is-primitive familySumorelation :domain Organism :range Organism :characteristics (:symmetric))
(defrelation side :arity 2 :is-primitive superficialPart :domain SelfConnectedObject :range SelfConnectedObject)
(defrelation signedBy :arity 2 :domain FinancialInstrument :range CognitiveAgent)
(defrelation simpleDeadline :arity 2 :domain ComputerPath :range TimeDuration)
(defrelation simpleInterest :arity 3 :is-primitive interestEarned :domains (FinancialAccount Interest) :range TimeInterval)
(defrelation slidingWindowSize :arity 2 :domain ComputerPath :range PositiveSumointeger)
(defrelation smaller :arity 2 :domain Object :range Object :inverse larger)
(defrelation softwarePath :arity 2 :domain SoftwareSystem :range ComputerPath)
(defrelation splitFor :arity 3 :domains (StockSplit Sumointeger) :range Sumointeger)
(defrelation standardErrorDevice :arity 2 :is-primitive instrument :domain ComputerProcess :range ComputerOutputDevice)
(defrelation standardInputDevice :arity 2 :is-primitive instrument :domain ComputerProcess :range ComputerInputDevice)
(defrelation standardOutputDevice :arity 2 :is-primitive instrument :domain ComputerProcess :range ComputerOutputDevice)
(defrelation startTime :arity 2 :domain ServiceProcess :range TimePoint)
(defrelation starts :arity 2 :domain TimeInterval :range TimeInterval)
(defrelation startupOf :arity 2 :domain StartupBlock :range ComputerProgram)
(defrelation startupTimeDelay :arity 2 :domain ComputerProgram :range TimeDuration)
(defrelation stateOfProcess :arity 2 :domain ComputerProcess :range ProcessState)
(defrelation statementAccount :arity 2 :domain BankStatement :range FinancialAccount)
(defrelation statementInterest :arity 2 :domain BankStatement :range CurrencyMeasure)
(defrelation statementPeriod :arity 2 :domain BankStatement :range TimeInterval)
(defrelation status :arity 2 :is-primitive sumoproperty :domain ComputerProcess :range ProcessStatus)
(defrelation stockSymbol :arity 2 :domain Stock :range SymbolicString)
(defrelation strictness :arity 2 :is-primitive sumoproperty :domain RealtimeSystem :range StrictnessAttribute)
(defrelation strikePrice :arity 2 :domain FinancialInstrument :range CurrencyMeasure)
(defrelation subAttribute :arity 2 :domain Attribute :range Attribute)
(defrelation subGraph :arity 2 :domain Graph :range Graph)
(defrelation subOrganizations :arity 2 :is-primitive subSumocollection :domain Organization :range Organization)
(defrelation subPlan :arity 2 :is-primitive subSumoproposition :domain Plan :range Plan)
(defrelation subProcess :arity 2 :domain Process :range Process)
(defrelation subSumocollection :arity 2 :domain Sumocollection :range Sumocollection)
(defrelation subSumolist :arity 2 :domain Sumolist :range Sumolist)
(defrelation subSumoproposition :arity 2 :domain Sumoproposition :range Sumoproposition)
(defrelation subclass :arity 2 :domain SumosetOrSumoclass :range SumosetOrSumoclass)
(defrelation subrelation :arity 2 :domain Sumorelation :range Sumorelation)
(defrelation subsumedExternalConcept :is-primitive relatedExternalConcept)
(defrelation subsumesContentInstance :arity 2 :domain ContentBearingObject :range ContentBearingObject)
(defrelation subsumesContentSumoclass :arity 2 :domain ContentBearingObject :range ContentBearingObject)
(defrelation subsumingExternalConcept :is-primitive relatedExternalConcept)
(defrelation successorAttribute :arity 2 :domain Attribute :range Attribute)
(defrelation successorAttributeClosure :arity 2 :domain Attribute :range Attribute)
(defrelation sumodisjoint :arity 2 :domain SumosetOrSumoclass :range SumosetOrSumoclass :characteristics (:symmetric))
(defrelation sumodisjointDecomposition :arity 2 :domain Sumoclass)
(defrelation sumodocumentation :arity 2 :domain Entity :range SymbolicString)
(defrelation sumodomain :arity 3 :domains (Sumorelation PositiveSumointeger) :range SumosetOrSumoclass)
(defrelation sumodomainResource :arity 2 :domain WebService :range Formula)
(defrelation sumodomainSubclass :arity 3 :domains (Sumorelation PositiveSumointeger) :range SumosetOrSumoclass)
(defrelation sumoinverse :arity 2 :domain BinarySumorelation :range BinarySumorelation :characteristics (:symmetric))
(defrelation sumoproperty :arity 2 :domain Entity :range Attribute)
(defrelation sumorange :arity 2 :domain Sumofunction :range SumosetOrSumoclass)
(defrelation sumorangeSubclass :arity 2 :domain Sumofunction :range SumosetOrSumoclass)
(defrelation superficialPart :is-primitive part)
(defrelation supportsAGrounding :arity 2 :is-primitive represents :domain ServiceGrounding :range WebService :inverse groundingSupportsService)
(defrelation surface :arity 2 :is-primitive superficialPart :domain SelfConnectedObject :range SelfConnectedObject)
(defrelation synonymousExternalConcept :is-primitive relatedExternalConcept)
(defrelation systemBehavior :arity 2 :is-primitive sumoproperty :domain RealtimeSystem :range SystemBehaviorAttribute)
(defrelation systemMeasured :arity 2 :domain MeasuringPerformance :range ComputationalSystem)
(defrelation task :arity 2 :domain ComputerProcess :range ProcessTask)
(defrelation taskSumorelation :arity 2 :is-primitive sumoproperty :domain RealtimeSystem :range TaskSumorelationAttribute)
(defrelation taxDeferredIncome :arity 3 :is-primitive incomeEarned :domains (Human CurrencyMeasure) :range OrganizationalProcess)
(defrelation temporalPart :arity 2 :domain TimePosition :range TimePosition)
(defrelation temporallyBetween :arity 3 :is-primitive temporallyBetweenOrEqual :domains (TimePoint TimePoint) :range TimePoint)
(defrelation temporallyBetweenOrEqual :arity 3 :domains (TimePoint TimePoint) :range TimePoint)
(defrelation thresholdOf :arity 2 :domain Computer :range PositiveRealSumonumber)
(defrelation time :arity 2 :domain Physical :range TimePosition)
(defrelation top :arity 2 :is-primitive superficialPart :domain SelfConnectedObject :range SelfConnectedObject)
(defrelation topLevelProcess :arity 2 :is-primitive subProcess :domain ComputerProcess :range ServiceProcess)
(defrelation totalOrderingOn :arity 2 :domain BinarySumorelation :range SumosetOrSumoclass)
(defrelation transactionAmount :arity 2 :domain FinancialTransaction :range CurrencyMeasure)
(defrelation traverses :arity 2 :domain Object :range Object)
(defrelation trichotomizingOn :arity 2 :domain BinarySumorelation :range SumosetOrSumoclass)
(defrelation true :arity 2 :is-primitive sumoproperty :domain (:or Sentence Sumoproposition) :range TruthValue)
(defrelation underlier :arity 2 :domain Option :range FinancialInstrument)
(defrelation uniqueIdentifier :is-primitive names)
(defrelation unitMeasuringPerformance :arity 2 :domain ComputerComponent :range UnitOfMeasure)
(defrelation userName :arity 2 :is-primitive name :domain ComputerUser :range UserName)
(defrelation uses :arity 2 :domain Object :range Agent)
(defrelation valence :arity 2 :domain Sumorelation :range PositiveSumointeger)
(defrelation version :arity 2 :domain Artifact :range Artifact)
(defrelation wants :arity 2 :is-primitive inScopeOfInterest :domain CognitiveAgent :range Object)
(defrelation width :is-primitive length)
(defrelation yield :arity 2 :domain Investment :range SumofunctionQuantity)
(defrelation yieldLevel :arity 2 :domain FinancialAccount :range YieldAttribute)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER ?PRED1 ?PRED2) (:and
  (:and (superrelations ?PRED1 ?PRED2) (valence ?PRED1 ?NUMBER))
  (= ?FOO0 ?PRED2)
  (= ?FOO1 ?NUMBER)
))) valence)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?CLASS1 ?NUMBER ?PRED1 ?PRED2) (:and
  (:and (superrelations ?PRED1 ?PRED2) (sumodomain ?PRED2 ?NUMBER ?CLASS1))
  (= ?FOO0 ?PRED1)
  (= ?FOO1 ?NUMBER)
  (= ?FOO2 ?CLASS1)
))) sumodomain)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?CLASS ?PRED1 ?PRED2) (:and
  (:and (superrelations ?PRED1 ?PRED2) (instance-of ?PRED2 ?CLASS) (instance-of ?CLASS InheritableSumorelation))
  (= ?FOO0 ?PRED1)
  (= ?FOO1 ?CLASS)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?CLASS2 ?NUMBER ?REL1 ?REL2) (:and
  (:and (superrelations ?REL1 ?REL2) (sumodomainSubclass ?REL1 ?NUMBER ?CLASS2))
  (= ?FOO0 ?REL2)
  (= ?FOO1 ?NUMBER)
  (= ?FOO2 ?CLASS2)
))) sumodomainSubclass)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?CLASS1 ?REL1 ?REL2) (:and
  (:and (superrelations ?REL1 ?REL2) (sumorange ?REL1 ?CLASS1))
  (= ?FOO0 ?REL2)
  (= ?FOO1 ?CLASS1)
))) sumorange)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?CLASS1 ?REL1 ?REL2) (:and
  (:and (superrelations ?REL1 ?REL2) (sumorangeSubclass ?REL1 ?CLASS1))
  (= ?FOO0 ?REL2)
  (= ?FOO1 ?CLASS1)
))) sumorangeSubclass)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?REL) (:and
  (instance-of ?REL BinarySumorelation)
  (= ?FOO0 ?REL)
  (= ?FOO1 2)
  (= ?FOO2 (DomainFn ?REL))
))) sumodomain)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?REL) (:and
  (instance-of ?REL UnarySumofunction)
  (= ?FOO0 ?REL)
  (= ?FOO1 (RangeFn ?REL))
))) sumorange)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?REL) (:and
  (instance-of ?REL BinaryPredicate)
  (= ?FOO0 ?REL)
  (= ?FOO1 2)
  (= ?FOO2 (RangeFn ?REL))
))) sumodomain)
(implies subsumedExternalConcept (:satisfies (?x ?y) (:not (subsumingExternalConcept ?x ?y))))
(implies subsumedExternalConcept (:satisfies (?x ?y) (:not (synonymousExternalConcept ?x ?y))))
(implies subsumingExternalConcept (:satisfies (?x ?y) (:not (subsumedExternalConcept ?x ?y))))
(implies subsumingExternalConcept (:satisfies (?x ?y) (:not (synonymousExternalConcept ?x ?y))))
(implies synonymousExternalConcept (:satisfies (?x ?y) (:not (subsumedExternalConcept ?x ?y))))
(implies synonymousExternalConcept (:satisfies (?x ?y) (:not (subsumingExternalConcept ?x ?y))))
(implies subAttribute (:satisfies (?x ?y) (:not (successorAttribute ?x ?y))))
(implies successorAttribute (:satisfies (?x ?y) (:not (subAttribute ?x ?y))))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ATTR1 ?ATTR2 ?CLASS) (:and
  (:and (subAttribute ?ATTR1 ?ATTR2) (instance-of ?ATTR2 ?CLASS))
  (= ?FOO0 ?ATTR1)
  (= ?FOO1 ?CLASS)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ATTR1 ?ATTR2) (:and
  (successorAttribute ?ATTR1 ?ATTR2)
  (= ?FOO0 ?ATTR1)
  (= ?FOO1 ?ATTR2)
))) successorAttributeClosure)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?CLASS ?SUBCLASS) (:and
  (instance-of ?SUBCLASS (PowerSumosetFn ?CLASS))
  (= ?FOO0 ?SUBCLASS)
  (= ?FOO1 ?CLASS)
))) subclass)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?CLASS ?SUBCLASS) (:and
  (superrelations ?SUBCLASS ?CLASS)
  (= ?FOO0 ?SUBCLASS)
  (= ?FOO1 (PowerSumosetFn ?CLASS))
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?CLASS) (:and
  (instance-of ?CLASS Sumoclass)
  (= ?FOO0 ?CLASS)
  (= ?FOO1 Entity)
))) subclass)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?LOC ?PHYS ?TIME) (:and
  (:and (located ?PHYS ?LOC) (time ?PHYS ?TIME))
  (= ?FOO0 ?PHYS)
  (= ?FOO1 Physical)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?OBJ) (:and
  (instance-of ?OBJ SelfConnectedObject)
  (= ?FOO0 (FrontFn ?OBJ))
  (= ?FOO1 ?OBJ)
))) part)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?OBJ) (:and
  (instance-of ?OBJ SelfConnectedObject)
  (= ?FOO0 (BackFn ?OBJ))
  (= ?FOO1 ?OBJ)
))) part)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?OBJ1 ?OBJ2) (:and
  (:and (part ?OBJ1 ?OBJ2) (:fail (part ?OBJ2 ?OBJ1)))
  (= ?FOO0 ?OBJ1)
  (= ?FOO1 ?OBJ2)
))) properPart)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?OBJECT ?OBJECTTYPE ?PART) (:and
  (:and (superrelations ?OBJECTTYPE Substance) (instance-of ?OBJECT ?OBJECTTYPE) (part ?PART ?OBJECT))
  (= ?FOO0 ?PART)
  (= ?FOO1 ?OBJECTTYPE)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ATTR ?OBJ ?PART) (:and
  (:and (instance-of ?OBJ Substance) (attribute-rel ?OBJ ?ATTR) (part ?PART ?OBJ))
  (= ?FOO0 ?PART)
  (= ?FOO1 ?ATTR)
))) attribute-rel)
(implies CorpuscularObject (not Substance))
(implies Substance (not CorpuscularObject))
(implies Sumocollection (not SelfConnectedObject))
(implies SelfConnectedObject (not Sumocollection))
(implies LinguisticExpression (not Icon))
(implies Icon (not LinguisticExpression))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?AGENT ?LANG ?PROC) (:and
  (:and (instance-of ?LANG ComputerLanguage) (agent-rel ?PROC ?AGENT) (instrument ?PROC ?LANG))
  (= ?FOO0 ?AGENT)
  (= ?FOO1 Machine)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?AGENT ?LANG ?PROC) (:and
  (:and (instance-of ?LANG HumanLanguage) (agent-rel ?PROC ?AGENT) (instrument ?PROC ?LANG))
  (= ?FOO0 ?AGENT)
  (= ?FOO1 Human)
))) instance)
(implies NaturalLanguage (not ConstructedLanguage))
(implies ConstructedLanguage (not NaturalLanguage))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?AGENT ?PROC) (:and
  (agent-rel ?PROC ?AGENT)
  (= ?FOO0 ?AGENT)
  (= ?FOO1 Agent)
))) instance)
(implies Abstract (not Physical))
(implies Physical (not Abstract))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ABS ?POINT) (:and
  (:fail (:or (located ?ABS ?POINT) (time ?ABS ?POINT)))
  (= ?FOO0 ?ABS)
  (= ?FOO1 Abstract)
))) instance)
(implies Attribute (not Quantity))
(implies Quantity (not Attribute))
(implies attribute-rel (:satisfies (?x ?y) (:not (manner ?x ?y))))
(implies manner (:satisfies (?x ?y) (:not (attribute-rel ?x ?y))))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ATTRIBUTE ?CLASS) (:and
  (= (ExtensionFn ?ATTRIBUTE) ?CLASS)
  (= ?FOO0 (AbstractionFn ?CLASS))
  (= ?FOO1 ?ATTRIBUTE)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ATTRIBUTE ?CLASS) (:and
  (= (AbstractionFn ?CLASS) ?ATTRIBUTE)
  (= ?FOO0 (ExtensionFn ?ATTRIBUTE))
  (= ?FOO1 ?CLASS)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER1 ?NUMBER2) (:and
  (:or (= ?NUMBER1 ?NUMBER2) (lessThan ?NUMBER1 ?NUMBER2))
  (= ?FOO0 ?NUMBER1)
  (= ?FOO1 ?NUMBER2)
))) lessThanOrEqualTo)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER1 ?NUMBER2) (:and
  (:or (= ?NUMBER1 ?NUMBER2) (greaterThan ?NUMBER1 ?NUMBER2))
  (= ?FOO0 ?NUMBER1)
  (= ?FOO1 ?NUMBER2)
))) greaterThanOrEqualTo)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER NonnegativeRealSumonumber)
  (= ?FOO0 ?NUMBER)
  (= ?FOO1 0)
))) greaterThanOrEqualTo)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER PositiveRealSumonumber)
  (= ?FOO0 ?NUMBER)
  (= ?FOO1 0)
))) greaterThan)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER NegativeRealSumonumber)
  (= ?FOO0 ?NUMBER)
  (= ?FOO1 0)
))) lessThan)
(implies ComplexSumonumber (not RealSumonumber))
(implies RealSumonumber (not ComplexSumonumber))
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?FUNCTION) (:and
  (instance-of ?FUNCTION TimeDependentQuantity)
  (= ?FOO0 ?FUNCTION)
  (= ?FOO1 1)
  (= ?FOO2 TimeMeasure)
))) sumodomain)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?CLASS1 ?CLASS2 ?REL) (:and
  (:and (instance-of ?REL BinarySumorelation) (:or (sumodomain ?REL 1 ?CLASS1) (sumodomainSubclass ?REL 1 ?CLASS1)) (:or (sumodomain ?REL 2 ?CLASS2) (sumodomainSubclass ?REL 2 ?CLASS2) (sumorange ?REL ?CLASS2) (sumorangeSubclass ?REL ?CLASS2)) (sumodisjoint ?CLASS1 ?CLASS2))
  (= ?FOO0 ?REL)
  (= ?FOO1 AsymmetricSumorelation)
))) instance)
(implies instrument (:satisfies (?x ?y) (:not (resource ?x ?y))))
(implies instrument (:satisfies (?x ?y) (:not (result ?x ?y))))
(implies resource (:satisfies (?x ?y) (:not (instrument ?x ?y))))
(implies resource (:satisfies (?x ?y) (:not (result ?x ?y))))
(implies result (:satisfies (?x ?y) (:not (instrument ?x ?y))))
(implies result (:satisfies (?x ?y) (:not (resource ?x ?y))))
(implies decreasesLikelihood (:satisfies (?x ?y) (:not (increasesLikelihood ?x ?y))))
(implies decreasesLikelihood (:satisfies (?x ?y) (:not (independentProbability ?x ?y))))
(implies increasesLikelihood (:satisfies (?x ?y) (:not (decreasesLikelihood ?x ?y))))
(implies increasesLikelihood (:satisfies (?x ?y) (:not (independentProbability ?x ?y))))
(implies independentProbability (:satisfies (?x ?y) (:not (decreasesLikelihood ?x ?y))))
(implies independentProbability (:satisfies (?x ?y) (:not (increasesLikelihood ?x ?y))))
(implies ObjectAttitude (not SumopropositionalAttitude))
(implies SumopropositionalAttitude (not ObjectAttitude))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?AGENT ?OBJECT) (:and
  (needs ?AGENT ?OBJECT)
  (= ?FOO0 ?AGENT)
  (= ?FOO1 ?OBJECT)
))) wants)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ITEM ?LIST) (:and
  (:fail (inSumolist ?ITEM ?LIST))
  (= ?FOO0 ?LIST)
  (= ?FOO1 NullSumolist)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ITEM ?LIST ?NUMBER) (:and
  (= (SumolistOrderFn ?LIST ?NUMBER) ?ITEM)
  (= ?FOO0 ?ITEM)
  (= ?FOO1 ?LIST)
))) inSumolist)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?FUNCTION) (:and
  (instance-of ?FUNCTION UnarySumofunction)
  (= ?FOO0 ?FUNCTION)
  (= ?FOO1 1)
))) valence)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?SEQ) (:and
  (instance-of ?SEQ SumosequenceSumofunction)
  (= ?FOO0 (RangeFn ?SEQ))
  (= ?FOO1 Sumointeger)
))) subclass)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?FUNCTION) (:and
  (instance-of ?FUNCTION BinarySumofunction)
  (= ?FOO0 ?FUNCTION)
  (= ?FOO1 2)
))) valence)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?FUNCTION) (:and
  (instance-of ?FUNCTION TernarySumofunction)
  (= ?FOO0 ?FUNCTION)
  (= ?FOO1 3)
))) valence)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?FUNCTION) (:and
  (instance-of ?FUNCTION QuaternarySumofunction)
  (= ?FOO0 ?FUNCTION)
  (= ?FOO1 4)
))) valence)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?REL) (:and
  (instance-of ?REL BinaryPredicate)
  (= ?FOO0 ?REL)
  (= ?FOO1 2)
))) valence)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?REL) (:and
  (instance-of ?REL TernaryPredicate)
  (= ?FOO0 ?REL)
  (= ?FOO1 3)
))) valence)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?REL) (:and
  (instance-of ?REL QuaternaryPredicate)
  (= ?FOO0 ?REL)
  (= ?FOO1 4)
))) valence)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?REL) (:and
  (instance-of ?REL QuintaryPredicate)
  (= ?FOO0 ?REL)
  (= ?FOO1 5)
))) valence)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?CLASS ?RELATION) (:and
  (:and (partialOrderingOn ?RELATION ?CLASS) (trichotomizingOn ?RELATION ?CLASS))
  (= ?FOO0 ?RELATION)
  (= ?FOO1 ?CLASS)
))) totalOrderingOn)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?AGENT ?PROC) (:and
  (hasSkill ?PROC ?AGENT)
  (= ?FOO0 ?PROC)
  (= ?FOO1 agent-rel)
  (= ?FOO2 ?AGENT)
))) capability)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?AGENT ?PROCESS) (:and
  (holdsRight ?PROCESS ?AGENT)
  (= ?FOO0 ?PROCESS)
  (= ?FOO1 agent-rel)
  (= ?FOO2 ?AGENT)
))) capability)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?AGENT1 ?AGENT2 ?PROCESS) (:and
  (confersRight ?PROCESS ?AGENT1 ?AGENT2)
  (= ?FOO0 ?PROCESS)
  (= ?FOO1 ?AGENT2)
))) holdsRight)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?AGENT ?PROCESS) (:and
  (holdsObligation ?PROCESS ?AGENT)
  (= ?FOO0 ?PROCESS)
  (= ?FOO1 agent-rel)
  (= ?FOO2 ?AGENT)
))) capability)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?AGENT1 ?AGENT2 ?PROCESS) (:and
  (confersObligation ?PROCESS ?AGENT1 ?AGENT2)
  (= ?FOO0 ?PROCESS)
  (= ?FOO1 ?AGENT2)
))) holdsObligation)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?OBJ ?PERSON) (:and
  (instance-of ?OBJ (PropertyFn ?PERSON))
  (= ?FOO0 ?PERSON)
  (= ?FOO1 ?OBJ)
))) possesses)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?OBJ ?PERSON) (:and
  (possesses ?PERSON ?OBJ)
  (= ?FOO0 ?OBJ)
  (= ?FOO1 (PropertyFn ?PERSON))
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?AGENT ?ENTITY ?REP) (:and
  (representsForAgent ?REP ?ENTITY ?AGENT)
  (= ?FOO0 ?REP)
  (= ?FOO1 ?ENTITY)
))) represents)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?CLASS1 ?CLASS2) (:and
  (:and (subsumesContentSumoclass ?CLASS1 ?CLASS2) (subsumesContentSumoclass ?CLASS2 ?CLASS1))
  (= ?FOO0 ?CLASS1)
  (= ?FOO1 ?CLASS2)
))) equivalentContentSumoclass)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?OBJ1 ?OBJ2) (:and
  (:and (subsumesContentInstance ?OBJ1 ?OBJ2) (subsumesContentInstance ?OBJ2 ?OBJ1))
  (= ?FOO0 ?OBJ1)
  (= ?FOO1 ?OBJ2)
))) equivalentContentInstance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?EXPRESS ?LANGUAGE ?PROP) (:and
  (representsInLanguage ?EXPRESS ?PROP ?LANGUAGE)
  (= ?FOO0 ?EXPRESS)
  (= ?FOO1 ?LANGUAGE)
))) expressedInLanguage)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER1 ?NUMBER2) (:and
  (:or (:and (instance-of ?NUMBER1 PositiveSumointeger) (= ?NUMBER1 ?NUMBER2)) (:and (instance-of ?NUMBER1 NegativeSumointeger) (= ?NUMBER2 (SubtractionFn 0 ?NUMBER1))))
  (= ?FOO0 (AbsoluteValueFn ?NUMBER1))
  (= ?FOO1 ?NUMBER2)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER Quantity)
  (= ?FOO0 (ReciprocalFn ?NUMBER))
  (= ?FOO1 (ExponentiationFn ?NUMBER -1))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER Quantity)
  (= ?FOO0 1)
  (= ?FOO1 (MultiplicationFn ?NUMBER (ReciprocalFn ?NUMBER)))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER ?NUMBER1 ?NUMBER2) (:and
  (= (RemainderFn ?NUMBER1 ?NUMBER2) ?NUMBER)
  (= ?FOO0 (AdditionFn (MultiplicationFn (FloorFn (DivisionFn ?NUMBER1 ?NUMBER2)) ?NUMBER2) ?NUMBER))
  (= ?FOO1 ?NUMBER1)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER ?NUMBER1 ?NUMBER2) (:and
  (= (AdditionFn (MultiplicationFn (FloorFn (DivisionFn ?NUMBER1 ?NUMBER2)) ?NUMBER2) ?NUMBER) ?NUMBER1)
  (= ?FOO0 (RemainderFn ?NUMBER1 ?NUMBER2))
  (= ?FOO1 ?NUMBER)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER ?NUMBER1 ?NUMBER2) (:and
  (= (RemainderFn ?NUMBER1 ?NUMBER2) ?NUMBER)
  (= ?FOO0 (SignumFn ?NUMBER2))
  (= ?FOO1 (SignumFn ?NUMBER))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER EvenSumointeger)
  (= ?FOO0 (RemainderFn ?NUMBER 2))
  (= ?FOO1 0)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER OddSumointeger)
  (= ?FOO0 (RemainderFn ?NUMBER 2))
  (= ?FOO1 1)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER PositiveRealSumonumber)
  (= ?FOO0 (SignumFn ?NUMBER))
  (= ?FOO1 1)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER NegativeRealSumonumber)
  (= ?FOO0 (SignumFn ?NUMBER))
  (= ?FOO1 -1)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER1 ?NUMBER2) (:and
  (= (SquareRootFn ?NUMBER1) ?NUMBER2)
  (= ?FOO0 (MultiplicationFn ?NUMBER2 ?NUMBER2))
  (= ?FOO1 ?NUMBER1)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?DEGREE) (:and
  (instance-of ?DEGREE PlaneAngleMeasure)
  (= ?FOO0 (TangentFn ?DEGREE))
  (= ?FOO1 (DivisionFn (SineFn ?DEGREE) (CosineFn ?DEGREE)))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?INT1 ?INT2) (:and
  (= (SuccessorFn ?INT1) (SuccessorFn ?INT2))
  (= ?FOO0 ?INT1)
  (= ?FOO1 ?INT2)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?INT) (:and
  (instance-of ?INT Sumointeger)
  (= ?FOO0 ?INT)
  (= ?FOO1 (SuccessorFn ?INT))
))) lessThan)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?INT) (:and
  (instance-of ?INT Sumointeger)
  (= ?FOO0 ?INT)
  (= ?FOO1 (SuccessorFn (PredecessorFn ?INT)))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?INT) (:and
  (instance-of ?INT Sumointeger)
  (= ?FOO0 ?INT)
  (= ?FOO1 (PredecessorFn (SuccessorFn ?INT)))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?INT1 ?INT2) (:and
  (= (PredecessorFn ?INT1) (PredecessorFn ?INT2))
  (= ?FOO0 ?INT1)
  (= ?FOO1 ?INT2)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?INT) (:and
  (instance-of ?INT Sumointeger)
  (= ?FOO0 ?INT)
  (= ?FOO1 (PredecessorFn ?INT))
))) greaterThan)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?CLASS1 ?CLASS2 ?ENTITY) (:and
  (:or (instance-of ?ENTITY ?CLASS1) (instance-of ?ENTITY ?CLASS2))
  (= ?FOO0 ?ENTITY)
  (= ?FOO1 (UnionFn ?CLASS1 ?CLASS2))
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?CLASS1 ?CLASS2 ?ENTITY) (:and
  (:and (instance-of ?ENTITY ?CLASS1) (instance-of ?ENTITY ?CLASS2))
  (= ?FOO0 ?ENTITY)
  (= ?FOO1 (IntersectionFn ?CLASS1 ?CLASS2))
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?CLASS1 ?CLASS2) (:and
  (:and (instance-of ?CLASS1 SumosetOrSumoclass) (instance-of ?CLASS2 SumosetOrSumoclass))
  (= ?FOO0 (RelativeComplementFn ?CLASS1 ?CLASS2))
  (= ?FOO1 (IntersectionFn ?CLASS1 (ComplementFn ?CLASS2)))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER ImaginarySumonumber)
  (= ?FOO0 ?NUMBER)
  (= ?FOO1 (RelativeComplementFn Sumonumber RealSumonumber))
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?CLASS ?ENTITY) (:and
  (:fail (instance-of ?ENTITY ?CLASS))
  (= ?FOO0 ?ENTITY)
  (= ?FOO1 (ComplementFn ?CLASS))
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?CLASS ?ENTITY ?SUPERCLASS) (:and
  (:and (instance-of ?CLASS ?SUPERCLASS) (instance-of ?ENTITY ?CLASS))
  (= ?FOO0 ?ENTITY)
  (= ?FOO1 (GeneralizedUnionFn ?SUPERCLASS))
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?CLASS) (:and
  (instance-of ?CLASS MutuallyDisjointSumoclass)
  (= ?FOO0 (GeneralizedIntersectionFn ?CLASS))
  (= ?FOO1 NullSumoset)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?GRAPH ?NODE) (:and
  (:and (= (BeginNodeFn ?GRAPH) ?NODE) (= (EndNodeFn ?GRAPH) ?NODE))
  (= ?FOO0 ?GRAPH)
  (= ?FOO1 GraphCircuit)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ARC1 ?ARC2 ?GRAPH ?NODE1 ?NODE2) (:and
  (:and (graphPart ?ARC1 ?GRAPH) (graphPart ?ARC2 ?GRAPH) (graphPart ?NODE1 ?GRAPH) (graphPart ?NODE2 ?GRAPH) (links ?NODE1 ?NODE2 ?ARC1) (links ?NODE1 ?NODE2 ?ARC2) (:fail (= ?ARC1 ?ARC2)))
  (= ?FOO0 ?GRAPH)
  (= ?FOO1 MultiGraph)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?GRAPH ?LOOP) (:and
  (:and (instance-of ?LOOP GraphLoop) (graphPart ?LOOP ?GRAPH))
  (= ?FOO0 ?GRAPH)
  (= ?FOO1 PseudoGraph)
))) instance)
(implies GraphElement (not Graph))
(implies Graph (not GraphElement))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?LOOP ?NODE) (:and
  (links ?NODE ?NODE ?LOOP)
  (= ?FOO0 ?LOOP)
  (= ?FOO1 GraphLoop)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ARC ?NODE) (:and
  (:and (= (InitialNodeFn ?ARC) ?NODE) (= (TerminalNodeFn ?ARC) ?NODE))
  (= ?FOO0 ?ARC)
  (= ?FOO1 GraphLoop)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?ARC ?NODE1 ?NODE2) (:and
  (links ?NODE1 ?NODE2 ?ARC)
  (= ?FOO0 ?NODE2)
  (= ?FOO1 ?NODE1)
  (= ?FOO2 ?ARC)
))) links)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ELEMENT ?GRAPH1 ?GRAPH2) (:and
  (:and (subGraph ?GRAPH1 ?GRAPH2) (graphPart ?ELEMENT ?GRAPH1))
  (= ?FOO0 ?ELEMENT)
  (= ?FOO1 ?GRAPH2)
))) graphPart)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NODE1 ?NODE2 ?PATH) (:and
  (= (MinimalWeightedPathFn ?NODE1 ?NODE2) ?PATH)
  (= ?FOO0 ?PATH)
  (= ?FOO1 (GraphPathFn ?NODE1 ?NODE2))
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NODE1 ?NODE2 ?PATH) (:and
  (= (MaximalWeightedPathFn ?NODE1 ?NODE2) ?PATH)
  (= ?FOO0 ?PATH)
  (= ?FOO1 (GraphPathFn ?NODE1 ?NODE2))
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?GRAPH) (:and
  (instance-of ?GRAPH Graph)
  (= ?FOO0 (MinimalCutSumosetFn ?GRAPH))
  (= ?FOO1 (CutSumosetFn ?GRAPH))
))) subclass)
(implies SolidAngleMeasure (not PlaneAngleMeasure))
(implies PlaneAngleMeasure (not SolidAngleMeasure))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER ?QUANT ?QUANTTYPE ?UNIT) (:and
  (:and (= (MeasureFn ?NUMBER ?UNIT) ?QUANT) (instance-of ?UNIT ?QUANTTYPE) (:fail (= ?QUANTTYPE UnitOfMeasure)))
  (= ?FOO0 ?QUANT)
  (= ?FOO1 ?QUANTTYPE)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?UNIT) (:and
  (instance-of ?UNIT UnitOfMeasure)
  (= ?FOO0 (KiloFn ?UNIT))
  (= ?FOO1 (MeasureFn 1000 ?UNIT))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?UNIT) (:and
  (instance-of ?UNIT UnitOfMeasure)
  (= ?FOO0 (MegaFn ?UNIT))
  (= ?FOO1 (MeasureFn 1000000 ?UNIT))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?UNIT) (:and
  (instance-of ?UNIT UnitOfMeasure)
  (= ?FOO0 (GigaFn ?UNIT))
  (= ?FOO1 (MeasureFn 1000000000 ?UNIT))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?UNIT) (:and
  (instance-of ?UNIT UnitOfMeasure)
  (= ?FOO0 (TeraFn ?UNIT))
  (= ?FOO1 (MeasureFn 1000000000000 ?UNIT))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?UNIT) (:and
  (instance-of ?UNIT UnitOfMeasure)
  (= ?FOO0 (MilliFn ?UNIT))
  (= ?FOO1 (MeasureFn 0.001 ?UNIT))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?UNIT) (:and
  (instance-of ?UNIT UnitOfMeasure)
  (= ?FOO0 (MicroFn ?UNIT))
  (= ?FOO1 (MeasureFn 0.000001 ?UNIT))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?UNIT) (:and
  (instance-of ?UNIT UnitOfMeasure)
  (= ?FOO0 (NanoFn ?UNIT))
  (= ?FOO1 (MeasureFn 0.000000001 ?UNIT))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?UNIT) (:and
  (instance-of ?UNIT UnitOfMeasure)
  (= ?FOO0 (PicoFn ?UNIT))
  (= ?FOO1 (MeasureFn 0.000000000001 ?UNIT))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?FROM ?QUANTITY ?TO) (:and
  (:and (greaterThanOrEqualTo ?QUANTITY ?FROM) (lessThanOrEqualTo ?QUANTITY ?TO))
  (= ?FOO0 ?QUANTITY)
  (= ?FOO1 (IntervalFn ?FROM ?TO))
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER ?UNIT) (:and
  (:and (instance-of ?NUMBER RealSumonumber) (instance-of ?UNIT UnitOfMeasure))
  (= ?FOO0 (MagnitudeFn (MeasureFn ?NUMBER ?UNIT)))
  (= ?FOO1 ?NUMBER)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?DIRECTION ?DISTANCE ?OBJECT ?REF ?TIME) (:and
  (measure ?OBJECT (VelocityFn ?DISTANCE ?TIME ?REF ?DIRECTION))
  (= ?FOO0 ?OBJECT)
  (= ?FOO1 (SpeedFn ?DISTANCE ?TIME))
))) measure)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER Centimeter))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 0.01) Meter))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER CelsiusDegree))
  (= ?FOO1 (MeasureFn (SubtractionFn ?NUMBER 273.15) KelvinDegree))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER CelsiusDegree))
  (= ?FOO1 (MeasureFn (DivisionFn (SubtractionFn ?NUMBER 32) 1.8) FahrenheitDegree))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER DayDuration))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 24) HourDuration))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER HourDuration))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 60) MinuteDuration))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER MinuteDuration))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 60) SecondDuration))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER WeekDuration))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 7) DayDuration))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER YearDuration))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 365) DayDuration))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER Amu))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 1.6605402E-24) Gram))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER ElectronVolt))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 1.60217733E-19) Joule))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER Angstrom))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 1.0E-10) Meter))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER Foot))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 0.3048) Meter))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER Inch))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 0.0254) Meter))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER Mile))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 1609.344) Meter))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER UnitedStatesGallon))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 3.785411784) Liter))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER Quart))
  (= ?FOO1 (MeasureFn (DivisionFn ?NUMBER 4) UnitedStatesGallon))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER Pint))
  (= ?FOO1 (MeasureFn (DivisionFn ?NUMBER 2) Quart))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER Cup))
  (= ?FOO1 (MeasureFn (DivisionFn ?NUMBER 2) Pint))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER Ounce))
  (= ?FOO1 (MeasureFn (DivisionFn ?NUMBER 8) Cup))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER UnitedKingdomGallon))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 4.54609) Liter))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER PoundMass))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 453.59237) Gram))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER Slug))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 14593.90) Gram))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER Rankine))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 1.8) Kelvin))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER PoundForce))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 4.448222) Newton))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER Calorie))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 4.1868) Joule))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER BritishThermalUnit))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 1055.05585262) Joule))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER AngularDegree))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER (DivisionFn Pi 180)) Radian))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER UnitedStatesCent))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 0.01) UnitedStatesDollar))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER EuroCent))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 0.01) EuroDollar))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER Byte))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 8) Bit))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER KiloByte))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 1024) Byte))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER) (:and
  (instance-of ?NUMBER RealSumonumber)
  (= ?FOO0 (MeasureFn ?NUMBER MegaByte))
  (= ?FOO1 (MeasureFn (MultiplicationFn ?NUMBER 1024) KiloByte))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?AMOUNT ?PERSON) (:and
  (= (WealthFn ?PERSON) ?AMOUNT)
  (= ?FOO0 (PropertyFn ?PERSON))
  (= ?FOO1 ?AMOUNT)
))) monetaryValue)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?AMOUNT ?PERSON) (:and
  (monetaryValue (PropertyFn ?PERSON) ?AMOUNT)
  (= ?FOO0 (WealthFn ?PERSON))
  (= ?FOO1 ?AMOUNT)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?POINT) (:and
  (:and (instance-of ?POINT TimePoint) (:fail (= ?POINT PositiveInfinity)))
  (= ?FOO0 ?POINT)
  (= ?FOO1 PositiveInfinity)
))) before)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?POINT) (:and
  (:and (instance-of ?POINT TimePoint) (:fail (= ?POINT NegativeInfinity)))
  (= ?FOO0 NegativeInfinity)
  (= ?FOO1 ?POINT)
))) before)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?POS ?THING) (:and
  (temporalPart ?POS (WhenFn ?THING))
  (= ?FOO0 ?THING)
  (= ?FOO1 ?POS)
))) time)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?POS ?THING) (:and
  (time ?THING ?POS)
  (= ?FOO0 ?POS)
  (= ?FOO1 (WhenFn ?THING))
))) temporalPart)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?OBJ ?PROCESS) (:and
  (origin ?PROCESS ?OBJ)
  (= ?FOO0 (WhereFn ?PROCESS (BeginFn (WhenFn ?PROCESS))))
  (= ?FOO1 (WhereFn ?OBJ (BeginFn (WhenFn ?OBJ))))
))) located)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?INTERVAL1 ?INTERVAL2) (:and
  (:and (= (BeginFn ?INTERVAL1) (BeginFn ?INTERVAL2)) (before (EndFn ?INTERVAL1) (EndFn ?INTERVAL2)))
  (= ?FOO0 ?INTERVAL1)
  (= ?FOO1 ?INTERVAL2)
))) starts)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?INTERVAL1 ?INTERVAL2) (:and
  (:and (before (BeginFn ?INTERVAL2) (BeginFn ?INTERVAL1)) (= (EndFn ?INTERVAL2) (EndFn ?INTERVAL1)))
  (= ?FOO0 ?INTERVAL1)
  (= ?FOO1 ?INTERVAL2)
))) finishes)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?POINT1 ?POINT2 ?POINT3) (:and
  (:and (before ?POINT1 ?POINT2) (before ?POINT2 ?POINT3))
  (= ?FOO0 ?POINT1)
  (= ?FOO1 ?POINT2)
  (= ?FOO2 ?POINT3)
))) temporallyBetween)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?POINT1 ?POINT2 ?POINT3) (:and
  (:and (beforeOrEqual ?POINT1 ?POINT2) (beforeOrEqual ?POINT2 ?POINT3))
  (= ?FOO0 ?POINT1)
  (= ?FOO1 ?POINT2)
  (= ?FOO2 ?POINT3)
))) temporallyBetweenOrEqual)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?PHYS ?TIME) (:and
  (:and (time ?PHYS ?TIME) (instance-of ?TIME TimePoint))
  (= ?FOO0 (BeginFn (WhenFn ?PHYS)))
  (= ?FOO1 ?TIME)
  (= ?FOO2 (EndFn (WhenFn ?PHYS)))
))) temporallyBetweenOrEqual)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?INTERVAL1 ?INTERVAL2) (:and
  (:or (= ?INTERVAL1 ?INTERVAL2) (during ?INTERVAL1 ?INTERVAL2) (starts ?INTERVAL1 ?INTERVAL2) (finishes ?INTERVAL1 ?INTERVAL2))
  (= ?FOO0 ?INTERVAL1)
  (= ?FOO1 ?INTERVAL2)
))) overlapsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?INTERVAL1 ?INTERVAL2) (:and
  (meetsTemporally ?INTERVAL1 ?INTERVAL2)
  (= ?FOO0 (EndFn ?INTERVAL1))
  (= ?FOO1 (BeginFn ?INTERVAL2))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?INTERVAL1 ?INTERVAL2) (:and
  (= (EndFn ?INTERVAL1) (BeginFn ?INTERVAL2))
  (= ?FOO0 ?INTERVAL1)
  (= ?FOO1 ?INTERVAL2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?INTERVAL1 ?INTERVAL2) (:and
  (:and (= (BeginFn ?INTERVAL1) (BeginFn ?INTERVAL2)) (= (EndFn ?INTERVAL1) (EndFn ?INTERVAL2)))
  (= ?FOO0 ?INTERVAL1)
  (= ?FOO1 ?INTERVAL2)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?INTERVAL1 ?INTERVAL2) (:and
  (earlier ?INTERVAL1 ?INTERVAL2)
  (= ?FOO0 (EndFn ?INTERVAL1))
  (= ?FOO1 (BeginFn ?INTERVAL2))
))) before)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?INTERVAL1 ?INTERVAL2) (:and
  (before (EndFn ?INTERVAL1) (BeginFn ?INTERVAL2))
  (= ?FOO0 ?INTERVAL1)
  (= ?FOO1 ?INTERVAL2)
))) earlier)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?PHYS1 ?PHYS2) (:and
  (cooccur ?PHYS1 ?PHYS2)
  (= ?FOO0 (WhenFn ?PHYS1))
  (= ?FOO1 (WhenFn ?PHYS2))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?PHYS1 ?PHYS2) (:and
  (= (WhenFn ?PHYS1) (WhenFn ?PHYS2))
  (= ?FOO0 ?PHYS1)
  (= ?FOO1 ?PHYS2)
))) cooccur)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?THING) (:and
  (instance-of ?THING Physical)
  (= ?FOO0 (BeginFn (WhenFn ?THING)))
  (= ?FOO1 (EndFn (WhenFn ?THING)))
))) before)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?THING) (:and
  (instance-of ?THING Physical)
  (= ?FOO0 (PastFn (WhenFn ?THING)))
  (= ?FOO1 (WhenFn ?THING))
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?PROCESS) (:and
  (instance-of ?PROCESS Physical)
  (= ?FOO0 (PastFn (WhenFn ?PROCESS)))
  (= ?FOO1 (TimeIntervalFn NegativeInfinity (BeginFn (WhenFn ?PROCESS))))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?THING) (:and
  (instance-of ?THING Physical)
  (= ?FOO0 (ImmediatePastFn (WhenFn ?THING)))
  (= ?FOO1 (PastFn (WhenFn ?THING)))
))) finishes)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?THING) (:and
  (instance-of ?THING Physical)
  (= ?FOO0 (WhenFn ?THING))
  (= ?FOO1 (FutureFn (WhenFn ?THING)))
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?PROCESS) (:and
  (instance-of ?PROCESS Physical)
  (= ?FOO0 (FutureFn (WhenFn ?PROCESS)))
  (= ?FOO1 (TimeIntervalFn (EndFn (WhenFn ?PROCESS)) PositiveInfinity))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?THING) (:and
  (instance-of ?THING Physical)
  (= ?FOO0 (ImmediateFutureFn (WhenFn ?THING)))
  (= ?FOO1 (FutureFn (WhenFn ?THING)))
))) starts)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?DAY ?MONTH ?NUMBER) (:and
  (instance-of ?DAY (DayFn ?NUMBER ?MONTH))
  (= ?FOO0 ?NUMBER)
  (= ?FOO1 31)
))) lessThanOrEqualTo)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?DAY1 ?DAY2 ?MONTH ?NUMBER1 ?NUMBER2) (:and
  (:and (instance-of ?DAY1 (DayFn ?NUMBER1 ?MONTH)) (instance-of ?DAY2 (DayFn ?NUMBER2 ?MONTH)) (= (SubtractionFn ?NUMBER2 ?NUMBER1) 1))
  (= ?FOO0 ?DAY1)
  (= ?FOO1 ?DAY2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?DAY ?HOUR ?NUMBER) (:and
  (instance-of ?HOUR (HourFn ?NUMBER ?DAY))
  (= ?FOO0 ?NUMBER)
  (= ?FOO1 24)
))) lessThan)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?DAY ?HOUR1 ?HOUR2 ?NUMBER1 ?NUMBER2) (:and
  (:and (instance-of ?HOUR1 (HourFn ?NUMBER1 ?DAY)) (instance-of ?HOUR2 (HourFn ?NUMBER2 ?DAY)) (= (SubtractionFn ?NUMBER2 ?NUMBER1) 1))
  (= ?FOO0 ?HOUR1)
  (= ?FOO1 ?HOUR2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?HOUR ?MINUTE ?NUMBER) (:and
  (instance-of ?MINUTE (MinuteFn ?NUMBER ?HOUR))
  (= ?FOO0 ?NUMBER)
  (= ?FOO1 60)
))) lessThan)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?HOUR ?MINUTE1 ?MINUTE2 ?NUMBER1 ?NUMBER2) (:and
  (:and (instance-of ?MINUTE1 (MinuteFn ?NUMBER1 ?HOUR)) (instance-of ?MINUTE2 (MinuteFn ?NUMBER2 ?HOUR)) (= (SubtractionFn ?NUMBER2 ?NUMBER1) 1))
  (= ?FOO0 ?MINUTE1)
  (= ?FOO1 ?MINUTE2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MINUTE ?NUMBER ?SECOND) (:and
  (instance-of ?SECOND (SecondFn ?NUMBER ?MINUTE))
  (= ?FOO0 ?NUMBER)
  (= ?FOO1 60)
))) lessThan)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MINUTE ?NUMBER1 ?NUMBER2 ?SECOND1 ?SECOND2) (:and
  (:and (instance-of ?SECOND1 (SecondFn ?NUMBER1 ?MINUTE)) (instance-of ?SECOND2 (SecondFn ?NUMBER2 ?MINUTE)) (= (SubtractionFn ?NUMBER2 ?NUMBER1) 1))
  (= ?FOO0 ?SECOND1)
  (= ?FOO1 ?SECOND2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?YEAR) (:and
  (instance-of ?YEAR Year)
  (= ?FOO0 ?YEAR)
  (= ?FOO1 (MeasureFn 1 YearDuration))
))) duration)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?YEAR1 ?YEAR2) (:and
  (:and (instance-of ?YEAR1 Year) (instance-of ?YEAR2 Year) (= (SubtractionFn ?YEAR2 ?YEAR1) 1))
  (= ?FOO0 ?YEAR1)
  (= ?FOO1 ?YEAR2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH) (:and
  (instance-of ?MONTH January)
  (= ?FOO0 ?MONTH)
  (= ?FOO1 (MeasureFn 31 DayDuration))
))) duration)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH1 ?MONTH2 ?YEAR) (:and
  (:and (= ?MONTH1 (MonthFn January ?YEAR)) (= ?MONTH2 (MonthFn February ?YEAR)))
  (= ?FOO0 ?MONTH1)
  (= ?FOO1 ?MONTH2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH ?YEAR) (:and
  (:and (= (MonthFn February ?YEAR) ?MONTH) (:fail (instance-of ?YEAR LeapYear)))
  (= ?FOO0 ?MONTH)
  (= ?FOO1 (MeasureFn 28 DayDuration))
))) duration)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH ?YEAR) (:and
  (:and (= (MonthFn February ?YEAR) ?MONTH) (instance-of ?YEAR LeapYear))
  (= ?FOO0 ?MONTH)
  (= ?FOO1 (MeasureFn 29 DayDuration))
))) duration)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH1 ?MONTH2 ?YEAR) (:and
  (:and (= ?MONTH1 (MonthFn February ?YEAR)) (= ?MONTH2 (MonthFn March ?YEAR)))
  (= ?FOO0 ?MONTH1)
  (= ?FOO1 ?MONTH2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH) (:and
  (instance-of ?MONTH March)
  (= ?FOO0 ?MONTH)
  (= ?FOO1 (MeasureFn 31 DayDuration))
))) duration)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH1 ?MONTH2 ?YEAR) (:and
  (:and (= ?MONTH1 (MonthFn March ?YEAR)) (= ?MONTH2 (MonthFn April ?YEAR)))
  (= ?FOO0 ?MONTH1)
  (= ?FOO1 ?MONTH2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH) (:and
  (instance-of ?MONTH April)
  (= ?FOO0 ?MONTH)
  (= ?FOO1 (MeasureFn 30 DayDuration))
))) duration)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH1 ?MONTH2 ?YEAR) (:and
  (:and (= ?MONTH1 (MonthFn April ?YEAR)) (= ?MONTH2 (MonthFn May ?YEAR)))
  (= ?FOO0 ?MONTH1)
  (= ?FOO1 ?MONTH2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH) (:and
  (instance-of ?MONTH May)
  (= ?FOO0 ?MONTH)
  (= ?FOO1 (MeasureFn 31 DayDuration))
))) duration)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH1 ?MONTH2 ?YEAR) (:and
  (:and (= ?MONTH1 (MonthFn May ?YEAR)) (= ?MONTH2 (MonthFn June ?YEAR)))
  (= ?FOO0 ?MONTH1)
  (= ?FOO1 ?MONTH2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH) (:and
  (instance-of ?MONTH June)
  (= ?FOO0 ?MONTH)
  (= ?FOO1 (MeasureFn 30 DayDuration))
))) duration)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH1 ?MONTH2 ?YEAR) (:and
  (:and (= ?MONTH1 (MonthFn June ?YEAR)) (= ?MONTH2 (MonthFn July ?YEAR)))
  (= ?FOO0 ?MONTH1)
  (= ?FOO1 ?MONTH2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH) (:and
  (instance-of ?MONTH July)
  (= ?FOO0 ?MONTH)
  (= ?FOO1 (MeasureFn 31 DayDuration))
))) duration)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH1 ?MONTH2 ?YEAR) (:and
  (:and (= ?MONTH1 (MonthFn July ?YEAR)) (= ?MONTH2 (MonthFn August ?YEAR)))
  (= ?FOO0 ?MONTH1)
  (= ?FOO1 ?MONTH2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH) (:and
  (instance-of ?MONTH August)
  (= ?FOO0 ?MONTH)
  (= ?FOO1 (MeasureFn 31 DayDuration))
))) duration)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH1 ?MONTH2 ?YEAR) (:and
  (:and (= ?MONTH1 (MonthFn August ?YEAR)) (= ?MONTH2 (MonthFn September ?YEAR)))
  (= ?FOO0 ?MONTH1)
  (= ?FOO1 ?MONTH2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH) (:and
  (instance-of ?MONTH September)
  (= ?FOO0 ?MONTH)
  (= ?FOO1 (MeasureFn 30 DayDuration))
))) duration)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH1 ?MONTH2 ?YEAR) (:and
  (:and (= ?MONTH1 (MonthFn September ?YEAR)) (= ?MONTH2 (MonthFn October ?YEAR)))
  (= ?FOO0 ?MONTH1)
  (= ?FOO1 ?MONTH2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH) (:and
  (instance-of ?MONTH October)
  (= ?FOO0 ?MONTH)
  (= ?FOO1 (MeasureFn 31 DayDuration))
))) duration)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH1 ?MONTH2 ?YEAR) (:and
  (:and (= ?MONTH1 (MonthFn October ?YEAR)) (= ?MONTH2 (MonthFn November ?YEAR)))
  (= ?FOO0 ?MONTH1)
  (= ?FOO1 ?MONTH2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH) (:and
  (instance-of ?MONTH November)
  (= ?FOO0 ?MONTH)
  (= ?FOO1 (MeasureFn 30 DayDuration))
))) duration)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH1 ?MONTH2 ?YEAR) (:and
  (:and (= ?MONTH1 (MonthFn November ?YEAR)) (= ?MONTH2 (MonthFn December ?YEAR)))
  (= ?FOO0 ?MONTH1)
  (= ?FOO1 ?MONTH2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH) (:and
  (instance-of ?MONTH December)
  (= ?FOO0 ?MONTH)
  (= ?FOO1 (MeasureFn 31 DayDuration))
))) duration)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH1 ?MONTH2 ?YEAR1 ?YEAR2) (:and
  (:and (= ?MONTH1 (MonthFn December ?YEAR1)) (= ?MONTH2 (MonthFn January ?YEAR2)) (meetsTemporally ?YEAR1 ?YEAR2))
  (= ?FOO0 ?MONTH1)
  (= ?FOO1 ?MONTH2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?DAY) (:and
  (instance-of ?DAY Day)
  (= ?FOO0 ?DAY)
  (= ?FOO1 (MeasureFn 1 DayDuration))
))) duration)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?DAY1 ?DAY2 ?WEEK) (:and
  (:and (instance-of ?DAY1 Monday) (instance-of ?DAY2 Tuesday) (instance-of ?WEEK Week) (temporalPart ?DAY1 ?WEEK) (temporalPart ?DAY2 ?WEEK))
  (= ?FOO0 ?DAY1)
  (= ?FOO1 ?DAY2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?DAY1 ?DAY2 ?WEEK) (:and
  (:and (instance-of ?DAY1 Tuesday) (instance-of ?DAY2 Wednesday) (instance-of ?WEEK Week) (temporalPart ?DAY1 ?WEEK) (temporalPart ?DAY2 ?WEEK))
  (= ?FOO0 ?DAY1)
  (= ?FOO1 ?DAY2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?DAY1 ?DAY2 ?WEEK) (:and
  (:and (instance-of ?DAY1 Wednesday) (instance-of ?DAY2 Thursday) (instance-of ?WEEK Week) (temporalPart ?DAY1 ?WEEK) (temporalPart ?DAY2 ?WEEK))
  (= ?FOO0 ?DAY1)
  (= ?FOO1 ?DAY2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?DAY1 ?DAY2 ?WEEK) (:and
  (:and (instance-of ?DAY1 Thursday) (instance-of ?DAY2 Friday) (instance-of ?WEEK Week) (temporalPart ?DAY1 ?WEEK) (temporalPart ?DAY2 ?WEEK))
  (= ?FOO0 ?DAY1)
  (= ?FOO1 ?DAY2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?DAY1 ?DAY2 ?WEEK) (:and
  (:and (instance-of ?DAY1 Friday) (instance-of ?DAY2 Saturday) (instance-of ?WEEK Week) (temporalPart ?DAY1 ?WEEK) (temporalPart ?DAY2 ?WEEK))
  (= ?FOO0 ?DAY1)
  (= ?FOO1 ?DAY2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?DAY1 ?DAY2 ?WEEK) (:and
  (:and (instance-of ?DAY1 Saturday) (instance-of ?DAY2 Sunday) (instance-of ?WEEK Week) (temporalPart ?DAY1 ?WEEK) (temporalPart ?DAY2 ?WEEK))
  (= ?FOO0 ?DAY1)
  (= ?FOO1 ?DAY2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?DAY1 ?DAY2 ?WEEK1 ?WEEK2) (:and
  (:and (instance-of ?DAY1 Sunday) (instance-of ?DAY2 Monday) (instance-of ?WEEK1 Week) (instance-of ?WEEK2 Week) (temporalPart ?DAY1 ?WEEK1) (temporalPart ?DAY2 ?WEEK2) (meetsTemporally ?WEEK1 ?WEEK2))
  (= ?FOO0 ?DAY1)
  (= ?FOO1 ?DAY2)
))) meetsTemporally)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?WEEK) (:and
  (instance-of ?WEEK Week)
  (= ?FOO0 ?WEEK)
  (= ?FOO1 (MeasureFn 1 WeekDuration))
))) duration)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?HOUR) (:and
  (instance-of ?HOUR Hour)
  (= ?FOO0 ?HOUR)
  (= ?FOO1 (MeasureFn 1 HourDuration))
))) duration)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MINUTE) (:and
  (instance-of ?MINUTE Minute)
  (= ?FOO0 ?MINUTE)
  (= ?FOO1 (MeasureFn 1 MinuteDuration))
))) duration)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?SECOND) (:and
  (instance-of ?SECOND Second)
  (= ?FOO0 ?SECOND)
  (= ?FOO1 (MeasureFn 1 SecondDuration))
))) duration)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?YEAR) (:and
  (instance-of ?YEAR Year)
  (= ?FOO0 (CardinalityFn (TemporalCompositionFn ?YEAR Month)))
  (= ?FOO1 12)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MONTH ?NUMBER) (:and
  (:and (instance-of ?MONTH Month) (duration ?MONTH (MeasureFn ?NUMBER DayDuration)))
  (= ?FOO0 (CardinalityFn (TemporalCompositionFn ?MONTH Day)))
  (= ?FOO1 ?NUMBER)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?WEEK) (:and
  (instance-of ?WEEK Week)
  (= ?FOO0 (CardinalityFn (TemporalCompositionFn ?WEEK Day)))
  (= ?FOO1 7)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?DAY) (:and
  (instance-of ?DAY Day)
  (= ?FOO0 (CardinalityFn (TemporalCompositionFn ?DAY Hour)))
  (= ?FOO1 24)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?HOUR) (:and
  (instance-of ?HOUR Hour)
  (= ?FOO0 (CardinalityFn (TemporalCompositionFn ?HOUR Minute)))
  (= ?FOO1 60)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MINUTE) (:and
  (instance-of ?MINUTE Minute)
  (= ?FOO0 (CardinalityFn (TemporalCompositionFn ?MINUTE Second)))
  (= ?FOO1 60)
))) equal)
(implies meetsSpatially (:satisfies (?x ?y) (:not (overlapsSpatially ?x ?y))))
(implies overlapsSpatially (:satisfies (?x ?y) (:not (meetsSpatially ?x ?y))))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?OBJ1 ?OBJ2 ?OBJ3) (:and
  (:and (part ?OBJ3 ?OBJ1) (part ?OBJ3 ?OBJ2))
  (= ?FOO0 ?OBJ1)
  (= ?FOO1 ?OBJ2)
))) overlapsSpatially)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?OBJ ?REGION) (:and
  (partlyLocated ?OBJ ?REGION)
  (= ?FOO0 ?OBJ)
  (= ?FOO1 ?REGION)
))) overlapsSpatially)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?OBJ1 ?OBJ2 ?OBJ3) (:and
  (:and (:fail (part ?OBJ1 ?OBJ2)) (:fail (part ?OBJ2 ?OBJ1)) (:and (part ?OBJ3 ?OBJ1) (part ?OBJ3 ?OBJ2)))
  (= ?FOO0 ?OBJ1)
  (= ?FOO1 ?OBJ2)
))) overlapsPartially)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?OBJECT ?SIDE1 ?SIDE2 ?WIDTH) (:and
  (:and (side ?SIDE1 ?OBJECT) (side ?SIDE2 ?OBJECT) (distance ?SIDE1 ?SIDE2 ?WIDTH))
  (= ?FOO0 ?OBJECT)
  (= ?FOO1 ?WIDTH)
))) width)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?BOTTOM ?HEIGHT ?OBJECT ?TOP) (:and
  (:and (height ?OBJECT ?HEIGHT) (top ?TOP ?OBJECT) (bottom ?BOTTOM ?OBJECT))
  (= ?FOO0 ?TOP)
  (= ?FOO1 ?BOTTOM)
  (= ?FOO2 ?HEIGHT)
))) distance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?HOLE ?OBJ) (:and
  (hole ?HOLE ?OBJ)
  (= ?FOO0 ?HOLE)
  (= ?FOO1 Hole)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?HOLE1 ?HOLE2 ?OBJ1 ?OBJ2) (:and
  (:and (hole ?HOLE1 ?OBJ1) (hole ?HOLE2 ?OBJ2) (overlapsSpatially ?HOLE1 ?HOLE2))
  (= ?FOO0 ?OBJ1)
  (= ?FOO1 ?OBJ2)
))) overlapsSpatially)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?HOLE1 ?HOLE2) (:and
  (:and (instance-of ?HOLE2 Hole) (part ?HOLE1 ?HOLE2))
  (= ?FOO0 ?HOLE1)
  (= ?FOO1 Fillable)
))) attribute-rel)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?HOLE1 ?HOLE2 ?OBJ) (:and
  (:and (fills ?OBJ ?HOLE1) (properPart ?HOLE2 ?HOLE1))
  (= ?FOO0 ?OBJ)
  (= ?FOO1 ?HOLE2)
))) completelyFills)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?HOLE ?OBJ1 ?OBJ2) (:and
  (:and (fills ?OBJ1 ?HOLE) (properPart ?OBJ2 ?OBJ1))
  (= ?FOO0 ?OBJ2)
  (= ?FOO1 ?HOLE)
))) properlyFills)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ORG ?PROC) (:and
  (:and (instance-of ?PROC BiologicalProcess) (experiencer ?PROC ?ORG))
  (= ?FOO0 ?ORG)
  (= ?FOO1 Organism)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ACT ?FOOD) (:and
  (:and (instance-of ?ACT Ingesting) (patient ?ACT ?FOOD))
  (= ?FOO0 ?FOOD)
  (= ?FOO1 Food)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ACT ?FOOD) (:and
  (:and (instance-of ?ACT Eating) (patient ?ACT ?FOOD))
  (= ?FOO0 ?FOOD)
  (= ?FOO1 Solid)
))) attribute-rel)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?CHILD ?PARENT ?REP) (:and
  (:and (instance-of ?REP Replication) (agent-rel ?REP ?PARENT) (result ?REP ?CHILD))
  (= ?FOO0 ?CHILD)
  (= ?FOO1 ?PARENT)
))) parent)
(implies SexualReproduction (not AsexualReproduction))
(implies AsexualReproduction (not SexualReproduction))
(implies OrganOrTissueProcess (not OrganismProcess))
(implies OrganismProcess (not OrganOrTissueProcess))
(implies PathologicProcess (not PhysiologicProcess))
(implies PhysiologicProcess (not PathologicProcess))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?INJ) (:and
  (:and (instance-of ?INJ Damaging) (patient ?INJ Organism))
  (= ?FOO0 ?INJ)
  (= ?FOO1 Injuring)
))) instance)
(implies LeavingAnOrganization (not JoiningAnOrganization))
(implies JoiningAnOrganization (not LeavingAnOrganization))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?GRAD ?ORG ?PERSON) (:and
  (:and (instance-of ?GRAD Graduation) (agent-rel ?GRAD ?ORG) (patient ?GRAD ?PERSON))
  (= ?FOO0 ?ORG)
  (= ?FOO1 EducationalOrganization)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?MAT ?ORG ?PERSON) (:and
  (:and (instance-of ?MAT Matriculation) (agent-rel ?MAT ?ORG) (patient ?MAT ?PERSON))
  (= ?FOO0 ?ORG)
  (= ?FOO1 EducationalOrganization)
))) instance)
(implies Heating (not Cooling))
(implies Cooling (not Heating))
(implies Uncovering (not Covering))
(implies Covering (not Uncovering))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?AGENT ?LEARN) (:and
  (:and (instance-of ?LEARN Learning) (agent-rel ?LEARN ?AGENT))
  (= ?FOO0 ?AGENT)
  (= ?FOO1 CognitiveAgent)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?AGENT) (:and
  (instance-of ?AGENT CognitiveAgent)
  (= ?FOO0 Reasoning)
  (= ?FOO1 agent-rel)
  (= ?FOO2 ?AGENT)
))) capability)
(implies Damaging (not Repairing))
(implies Repairing (not Damaging))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?PATIENT ?PROCESS) (:and
  (:and (patient ?PROCESS ?PATIENT) (time ?PATIENT (ImmediatePastFn (WhenFn ?PROCESS))) (:fail (time ?PATIENT (ImmediateFutureFn (WhenFn ?PROCESS)))))
  (= ?FOO0 ?PROCESS)
  (= ?FOO1 Destruction)
))) instance)
(implies Attaching (not Detaching))
(implies Detaching (not Attaching))
(implies Separating (not Combining))
(implies Combining (not Separating))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?PROC ?STUFF) (:and
  (:and (instance-of ?PROC ChemicalProcess) (:or (resource ?PROC ?STUFF) (result ?PROC ?STUFF)))
  (= ?FOO0 ?STUFF)
  (= ?FOO1 PureSubstance)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?PROC ?SUBSTANCE1 ?SUBSTANCE2) (:and
  (:and (resource ?PROC ?SUBSTANCE1) (result ?PROC ?SUBSTANCE2) (instance-of ?SUBSTANCE1 ElementalSubstance) (instance-of ?SUBSTANCE2 CompoundSubstance))
  (= ?FOO0 ?PROC)
  (= ?FOO1 ChemicalSynthesis)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?COMPOUND ?ELEMENT1 ?ELEMENT2 ?PROCESS) (:and
  (:and (instance-of ?ELEMENT1 ElementalSubstance) (instance-of ?ELEMENT2 ElementalSubstance) (:fail (= ?ELEMENT1 ?ELEMENT2)) (instance-of ?PROCESS ChemicalSynthesis) (resource ?PROCESS ?ELEMENT1) (resource ?PROCESS ?ELEMENT2) (result ?PROCESS ?COMPOUND))
  (= ?FOO0 ?COMPOUND)
  (= ?FOO1 CompoundSubstance)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?PROC ?SUBSTANCE1 ?SUBSTANCE2) (:and
  (:and (resource ?PROC ?SUBSTANCE1) (result ?PROC ?SUBSTANCE2) (instance-of ?SUBSTANCE1 CompoundSubstance) (instance-of ?SUBSTANCE2 ElementalSubstance))
  (= ?FOO0 ?PROC)
  (= ?FOO1 ChemicalDecomposition)
))) instance)
(implies Decoding (not Encoding))
(implies Encoding (not Decoding))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?PATIENT ?PROCESS) (:and
  (:and (patient ?PROCESS ?PATIENT) (time ?PATIENT (ImmediateFutureFn (WhenFn ?PROCESS))) (:fail (time ?PATIENT (ImmediatePastFn (WhenFn ?PROCESS)))))
  (= ?FOO0 ?PROCESS)
  (= ?FOO1 Creation)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ARTIFACT ?BUILD) (:and
  (:and (instance-of ?BUILD Constructing) (result ?BUILD ?ARTIFACT))
  (= ?FOO0 ?ARTIFACT)
  (= ?FOO1 StationaryArtifact)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?PUB ?TEXT) (:and
  (:and (instance-of ?PUB Publication) (patient ?PUB ?TEXT))
  (= ?FOO0 ?TEXT)
  (= ?FOO1 Text)
))) subclass)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?AGENT ?ENTITY ?SEARCH) (:and
  (:and (instance-of ?SEARCH Searching) (agent-rel ?SEARCH ?AGENT) (patient ?SEARCH ?ENTITY))
  (= ?FOO0 ?AGENT)
  (= ?FOO1 ?ENTITY)
))) inScopeOfInterest)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?INVESTIGATE ?PROP) (:and
  (:and (instance-of ?INVESTIGATE Investigating) (patient ?INVESTIGATE ?PROP))
  (= ?FOO0 ?PROP)
  (= ?FOO1 Formula)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?AGENT ?PERCEPT) (:and
  (:and (instance-of ?PERCEPT Perception) (agent-rel ?PERCEPT ?AGENT))
  (= ?FOO0 ?AGENT)
  (= ?FOO1 Animal)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?AGENT ?OBJECT ?PERCEPT) (:and
  (:and (instance-of ?PERCEPT Perception) (agent-rel ?PERCEPT ?AGENT) (patient ?PERCEPT ?OBJECT))
  (= ?FOO0 ?AGENT)
  (= ?FOO1 ?OBJECT)
))) notices)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?AGENT) (:and
  (instance-of ?AGENT SentientAgent)
  (= ?FOO0 Perception)
  (= ?FOO1 experiencer)
  (= ?FOO2 ?AGENT)
))) capability)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?EMIT ?REGION) (:and
  (:and (instance-of ?EMIT RadiatingLight) (patient ?EMIT ?REGION) (instance-of ?REGION Region))
  (= ?FOO0 ?REGION)
  (= ?FOO1 Illuminated)
))) attribute-rel)
(implies AstronomicalBody (not GeographicArea))
(implies GeographicArea (not AstronomicalBody))
(implies SaltWaterArea (not FreshWaterArea))
(implies FreshWaterArea (not SaltWaterArea))
(implies StreamWaterArea (not StaticWaterArea))
(implies StaticWaterArea (not StreamWaterArea))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?CHILD ?PARENT) (:and
  (parent ?CHILD ?PARENT)
  (= ?FOO0 (BeginFn (WhenFn ?PARENT)))
  (= ?FOO1 (BeginFn (WhenFn ?CHILD)))
))) before)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?CHILD ?CLASS ?PARENT) (:and
  (:and (parent ?CHILD ?PARENT) (superrelations ?CLASS Organism) (instance-of ?PARENT ?CLASS))
  (= ?FOO0 ?CHILD)
  (= ?FOO1 ?CLASS)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?CHILD ?MOTHER) (:and
  (mother ?CHILD ?MOTHER)
  (= ?FOO0 ?MOTHER)
  (= ?FOO1 Female)
))) attribute-rel)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?CHILD ?FATHER) (:and
  (father ?CHILD ?FATHER)
  (= ?FOO0 ?FATHER)
  (= ?FOO1 Male)
))) attribute-rel)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ANIMAL1 ?ANIMAL2 ?FATHER ?MOTHER) (:and
  (:and (father ?ANIMAL1 ?FATHER) (father ?ANIMAL2 ?FATHER) (mother ?ANIMAL1 ?MOTHER) (mother ?ANIMAL2 ?MOTHER))
  (= ?FOO0 ?ANIMAL1)
  (= ?FOO1 ?ANIMAL2)
))) sibling)
(implies NonFloweringPlant (not FloweringPlant))
(implies FloweringPlant (not NonFloweringPlant))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?FUNGUS ?OBJ) (:and
  (:and (instance-of ?FUNGUS Fungus) (inhabits ?FUNGUS ?OBJ))
  (= ?FOO0 ?OBJ)
  (= ?FOO1 Organism)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?BACTERIUM ?OBJ) (:and
  (:and (instance-of ?BACTERIUM Bacterium) (inhabits ?BACTERIUM ?OBJ))
  (= ?FOO0 ?OBJ)
  (= ?FOO1 Organism)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?OBJ ?VIRUS) (:and
  (:and (instance-of ?VIRUS Virus) (inhabits ?VIRUS ?OBJ))
  (= ?FOO0 ?OBJ)
  (= ?FOO1 Organism)
))) instance)
(implies Invertebrate (not Vertebrate))
(implies Vertebrate (not Invertebrate))
(implies WarmBloodedVertebrate (not ColdBloodedVertebrate))
(implies ColdBloodedVertebrate (not WarmBloodedVertebrate))
(implies Bird (not Mammal))
(implies Mammal (not Bird))
(implies Canine (not Feline))
(implies Feline (not Canine))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?BEV) (:and
  (instance-of ?BEV Beverage)
  (= ?FOO0 ?BEV)
  (= ?FOO1 Liquid)
))) attribute-rel)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?BEV ?DRINK) (:and
  (:and (instance-of ?DRINK Drinking) (patient ?DRINK ?BEV))
  (= ?FOO0 ?BEV)
  (= ?FOO1 Beverage)
))) instance)
(implies NounPhrase (not VerbPhrase))
(implies VerbPhrase (not NounPhrase))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ORG ?PUB ?TEXT) (:and
  (:and (instance-of ?PUB Publication) (agent-rel ?PUB ?ORG) (patient ?PUB ?TEXT))
  (= ?FOO0 ?ORG)
  (= ?FOO1 ?TEXT)
))) publishes)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?DATE1 ?DATE2 ?EDITION1 ?EDITION2 ?INT1 ?INT2 ?PUB1 ?PUB2 ?TEXT) (:and
  (:and (= (EditionFn ?TEXT ?INT1) ?EDITION1) (= (EditionFn ?TEXT ?INT2) ?EDITION2) (greaterThan ?INT2 ?INT1) (instance-of ?PUB1 Publication) (instance-of ?PUB2 Publication) (patient ?PUB1 ?EDITION1) (patient ?PUB2 ?EDITION2) (date ?PUB1 ?DATE1) (date ?PUB2 ?DATE2))
  (= ?FOO0 (EndFn ?DATE1))
  (= ?FOO1 (EndFn ?DATE2))
))) before)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER ?TEXT1 ?TEXT2) (:and
  (= (EditionFn ?TEXT1 ?NUMBER) ?TEXT2)
  (= ?FOO0 ?TEXT1)
  (= ?FOO1 ?TEXT2)
))) subsumesContentSumoclass)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?DATE1 ?DATE2 ?INT1 ?INT2 ?PUB1 ?PUB2 ?TEXT ?VOLUME1 ?VOLUME2) (:and
  (:and (superrelations ?TEXT Periodical) (= (SeriesVolumeFn ?TEXT ?INT1) ?VOLUME1) (= (SeriesVolumeFn ?TEXT ?INT2) ?VOLUME2) (greaterThan ?INT2 ?INT1) (instance-of ?PUB1 Publication) (instance-of ?PUB2 Publication) (patient ?PUB1 ?VOLUME1) (patient ?PUB2 ?VOLUME2) (date ?PUB1 ?DATE1) (date ?PUB2 ?DATE2))
  (= ?FOO0 (EndFn ?DATE1))
  (= ?FOO1 (EndFn ?DATE2))
))) before)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NUMBER ?SERIES ?VOLUME) (:and
  (= (SeriesVolumeFn ?SERIES ?NUMBER) ?VOLUME)
  (= ?FOO0 ?SERIES)
  (= ?FOO1 ?VOLUME)
))) subsumesContentSumoclass)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ISSUE ?NUMBER ?PERIODICAL) (:and
  (= (PeriodicalIssueFn ?PERIODICAL ?NUMBER) ?ISSUE)
  (= ?FOO0 ?PERIODICAL)
  (= ?FOO1 ?ISSUE)
))) subsumesContentSumoclass)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ARTIFACT1 ?ARTIFACT2) (:and
  (version ?ARTIFACT1 ?ARTIFACT2)
  (= ?FOO0 ?ARTIFACT1)
  (= ?FOO1 ?ARTIFACT2)
))) subclass)
(implies Room (not Building))
(implies Building (not Room))
(implies Fabric (not StationaryArtifact))
(implies StationaryArtifact (not Fabric))
(implies Clothing (not StationaryArtifact))
(implies StationaryArtifact (not Clothing))
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?INSTRUMENT) (:and
  (instance-of ?INSTRUMENT MusicalInstrument)
  (= ?FOO0 Music)
  (= ?FOO1 instrument)
  (= ?FOO2 ?INSTRUMENT)
))) capability)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?DEVICE) (:and
  (instance-of ?DEVICE TransportationDevice)
  (= ?FOO0 Transportation)
  (= ?FOO1 instrument)
  (= ?FOO2 ?DEVICE)
))) capability)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?WEAPON) (:and
  (instance-of ?WEAPON Weapon)
  (= ?FOO0 Damaging)
  (= ?FOO1 instrument)
  (= ?FOO2 ?WEAPON)
))) capability)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?COMP1 ?COMP2 ?CONNECTION) (:and
  (connectsEngineeringComponents ?CONNECTION ?COMP1 ?COMP2)
  (= ?FOO0 ?COMP1)
  (= ?FOO1 ?COMP2)
))) connectedEngineeringComponents)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?GROUP ?MEMB) (:and
  (:and (instance-of ?GROUP Group) (member ?MEMB ?GROUP))
  (= ?FOO0 ?MEMB)
  (= ?FOO1 Agent)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ORG ?PERSON) (:and
  (employs ?ORG ?PERSON)
  (= ?FOO0 ?PERSON)
  (= ?FOO1 ?ORG)
))) member)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?OBJ1 ?OBJ2 ?OBJ3) (:and
  (:and (orientation ?OBJ2 ?OBJ1 Left) (orientation ?OBJ1 ?OBJ3 Left))
  (= ?FOO0 ?OBJ1)
  (= ?FOO1 ?OBJ2)
  (= ?FOO2 ?OBJ3)
))) between)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?OBJ1 ?OBJ2) (:and
  (orientation ?OBJ1 ?OBJ2 North)
  (= ?FOO0 ?OBJ2)
  (= ?FOO1 ?OBJ1)
  (= ?FOO2 South)
))) orientation)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?OBJ1 ?OBJ2) (:and
  (orientation ?OBJ2 ?OBJ1 South)
  (= ?FOO0 ?OBJ1)
  (= ?FOO1 ?OBJ2)
  (= ?FOO2 North)
))) orientation)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?OBJ1 ?OBJ2) (:and
  (orientation ?OBJ1 ?OBJ2 East)
  (= ?FOO0 ?OBJ2)
  (= ?FOO1 ?OBJ1)
  (= ?FOO2 West)
))) orientation)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?OBJ1 ?OBJ2) (:and
  (orientation ?OBJ2 ?OBJ1 West)
  (= ?FOO0 ?OBJ1)
  (= ?FOO1 ?OBJ2)
  (= ?FOO2 East)
))) orientation)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?OBJ1 ?OBJ2) (:and
  (orientation ?OBJ1 ?OBJ2 Vertical)
  (= ?FOO0 ?OBJ2)
  (= ?FOO1 ?OBJ1)
  (= ?FOO2 Horizontal)
))) orientation)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?OBJ1 ?OBJ2) (:and
  (orientation ?OBJ2 ?OBJ1 Horizontal)
  (= ?FOO0 ?OBJ1)
  (= ?FOO1 ?OBJ2)
  (= ?FOO2 Vertical)
))) orientation)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?OBJ1 ?OBJ2) (:and
  (orientation ?OBJ1 ?OBJ2 Above)
  (= ?FOO0 ?OBJ2)
  (= ?FOO1 ?OBJ1)
  (= ?FOO2 Below)
))) orientation)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?OBJ1 ?OBJ2) (:and
  (orientation ?OBJ2 ?OBJ1 Below)
  (= ?FOO0 ?OBJ1)
  (= ?FOO1 ?OBJ2)
  (= ?FOO2 Above)
))) orientation)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?OBJ1 ?OBJ2) (:and
  (orientation ?OBJ1 ?OBJ2 Right)
  (= ?FOO0 ?OBJ2)
  (= ?FOO1 ?OBJ1)
  (= ?FOO2 Left)
))) orientation)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?OBJ1 ?OBJ2) (:and
  (orientation ?OBJ2 ?OBJ1 Left)
  (= ?FOO0 ?OBJ1)
  (= ?FOO1 ?OBJ2)
  (= ?FOO2 Right)
))) orientation)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?OBJ1 ?OBJ2) (:and
  (orientation ?OBJ1 ?OBJ2 Near)
  (= ?FOO0 ?OBJ2)
  (= ?FOO1 ?OBJ1)
  (= ?FOO2 Near)
))) orientation)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?OBJ1 ?OBJ2) (:and
  (orientation ?OBJ1 ?OBJ2 On)
  (= ?FOO0 ?OBJ1)
  (= ?FOO1 ?OBJ2)
))) located)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?TIME1 ?TIME2) (:and
  (= (RelativeTimeFn ?TIME1 PacificTimeZone) ?TIME2)
  (= ?FOO0 ?TIME2)
  (= ?FOO1 (AdditionFn ?TIME1 8))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?TIME1 ?TIME2) (:and
  (= (RelativeTimeFn ?TIME1 MountainTimeZone) ?TIME2)
  (= ?FOO0 ?TIME2)
  (= ?FOO1 (AdditionFn ?TIME1 7))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?TIME1 ?TIME2) (:and
  (= (RelativeTimeFn ?TIME1 CentralTimeZone) ?TIME2)
  (= ?FOO0 ?TIME2)
  (= ?FOO1 (AdditionFn ?TIME1 6))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?TIME1 ?TIME2) (:and
  (= (RelativeTimeFn ?TIME1 EasternTimeZone) ?TIME2)
  (= ?FOO0 ?TIME2)
  (= ?FOO1 (AdditionFn ?TIME1 5))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ATTRIBUTE ?PERSON) (:and
  (:and (attribute-rel ?PERSON ?ATTRIBUTE) (instance-of ?ATTRIBUTE SocialRole))
  (= ?FOO0 ?PERSON)
  (= ?FOO1 Human)
))) instance)
(implies SubjectiveAssessmentAttribute (not ObjectiveNorm))
(implies ObjectiveNorm (not SubjectiveAssessmentAttribute))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?OBJ) (:and
  (instance-of ?OBJ Solution)
  (= ?FOO0 ?OBJ)
  (= ?FOO1 Liquid)
))) attribute-rel)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ATTR ?OBJ) (:and
  (:and (instance-of ?ATTR PhysicalState) (attribute-rel ?OBJ ?ATTR))
  (= ?FOO0 ?OBJ)
  (= ?FOO1 Substance)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?CHANGE ?OBJ) (:and
  (:and (instance-of ?CHANGE ShapeChange) (patient ?CHANGE ?OBJ))
  (= ?FOO0 ?OBJ)
  (= ?FOO1 Pliable)
))) attribute-rel)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ATTRIBUTE ?OBJ ?SURFACE) (:and
  (:and (instance-of ?ATTRIBUTE TextureAttribute) (attribute-rel ?OBJ ?ATTRIBUTE) (surface ?SURFACE ?OBJ))
  (= ?FOO0 ?SURFACE)
  (= ?FOO1 ?ATTRIBUTE)
))) attribute-rel)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ATT ?ORG) (:and
  (:and (attribute-rel ?ORG ?ATT) (instance-of ?ATT BiologicalAttribute))
  (= ?FOO0 ?ORG)
  (= ?FOO1 Organism)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?BODY ?ORG) (:and
  (:and (instance-of ?BODY ReproductiveBody) (part ?BODY ?ORG) (instance-of ?ORG Organism))
  (= ?FOO0 ?ORG)
  (= ?FOO1 Female)
))) attribute-rel)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?AGENT ?ATTR) (:and
  (:and (instance-of ?ATTR PsychologicalAttribute) (attribute-rel ?AGENT ?ATTR))
  (= ?FOO0 ?AGENT)
  (= ?FOO1 SentientAgent)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Product) (:and
  (:and (instance-of ?Product Product) (instance-of ?Product CorpuscularObject))
  (= ?FOO0 ?Product)
  (= ?FOO1 Artifact)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Computer ?Hardware) (:and
  (:and (instance-of ?Computer Computer) (component ?Hardware ?Computer))
  (= ?FOO0 ?Hardware)
  (= ?FOO1 ComputerHardware)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Directory ?File) (:and
  (:and (instance-of ?Directory ComputerDirectory) (instance-of ?File ComputerFile) (directoryOf ?File ?Directory))
  (= ?FOO0 (AddressFn ?File))
  (= ?FOO1 ?Directory)
))) refers)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Computer ?Process ?Program) (:and
  (:and (programRunning ?Process ?Program) (computerRunning ?Process ?Computer))
  (= ?FOO0 ?Program)
  (= ?FOO1 ?Computer)
))) runsOn)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Application ?System) (:and
  (:and (instance-of ?Application AutomaticApplication) (instance-of ?System SoftwareSystem) (part ?Application ?System))
  (= ?FOO0 (StartupFn ?Application))
  (= ?FOO1 (StartupFn ?System))
))) part)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Application ?Delay ?Process1 ?Process2 ?Time ?Time1 ?Time2) (:and
  (:and (startupTimeDelay ?Application ?Delay) (instance-of ?Process1 ComputerProcess) (programRunning ?Process1 ?Application) (= (WhenFn ?Process1) ?Time1) (instance-of ?Process2 ComputerProcess) (= (WhenFn ?Process2) ?Time2) (meetsTemporally ?Time1 ?Time) (meetsTemporally ?Time ?Time2))
  (= ?FOO0 ?Time)
  (= ?FOO1 ?Delay)
))) measure)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Feedback ?Process ?Program ?RM ?Send) (:and
  (:and (rMProgram-of ?RM ?Program) (programRunning ?Process ?Program) (instance-of ?Send DataTransfer) (patient ?Send ?Feedback) (destination ?Send ?RM))
  (= ?FOO0 ?Feedback)
  (= ?FOO1 Feedback)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?HardDrive) (:and
  (instance-of ?HardDrive HardDiskDrive)
  (= ?FOO0 ?HardDrive)
  (= ?FOO1 BitsPerSecond)
))) unitMeasuringPerformance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?NA) (:and
  (instance-of ?NA NetworkAdapter)
  (= ?FOO0 ?NA)
  (= ?FOO1 PacketsPerSecond)
))) unitMeasuringPerformance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Component ?Instance ?Sumonumber ?Time ?Unit) (:and
  (componentDataID ?Time ?Component ?Instance ?Unit ?Sumonumber)
  (= ?FOO0 ?Instance)
  (= ?FOO1 ?Component)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Component ?Instance ?Sumonumber ?Time ?Unit) (:and
  (componentDataID ?Time ?Component ?Instance ?Unit ?Sumonumber)
  (= ?FOO0 ?Instance)
  (= ?FOO1 ?Unit)
))) unitMeasuringPerformance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Component ?Instance ?Sumonumber ?Time ?Unit) (:and
  (componentDataID ?Time ?Component ?Instance ?Unit ?Sumonumber)
  (= ?FOO0 ?Sumonumber)
  (= ?FOO1 ?Instance)
))) refers)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Process ?Program) (:and
  (programRunning ?Process ?Program)
  (= ?FOO0 ?Program)
  (= ?FOO1 Executable)
))) sumoproperty)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Computer ?Model ?Type) (:and
  (:and (hardwareType ?Type ?Computer) (productModel ?Model ?Computer))
  (= ?FOO0 ?Type)
  (= ?FOO1 ?Model)
))) subsumesContentInstance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Program) (:and
  (sumoproperty ?Program ReplicationsOnSameHostOK)
  (= ?FOO0 ?Program)
  (= ?FOO1 Restartable)
))) sumoproperty)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?System) (:and
  (designPattern ?System Guidance-DesignPattern)
  (= ?FOO0 ?System)
  (= ?FOO1 Transient-SystemBehavior)
))) systemBehavior)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?System) (:and
  (designPattern ?System Initiation-DesignPattern)
  (= ?FOO0 ?System)
  (= ?FOO1 Transient-SystemBehavior)
))) systemBehavior)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?System) (:and
  (systemBehavior ?System Transient-SystemBehavior)
  (= ?FOO0 ?System)
  (= ?FOO1 SingleRequirement-Complexity)
))) complexity)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?System) (:and
  (systemBehavior ?System Periodic-SystemBehavior)
  (= ?FOO0 ?System)
  (= ?FOO1 SingleRequirement-Complexity)
))) complexity)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?System) (:and
  (systemBehavior ?System Hybrid-SystemBehavior)
  (= ?FOO0 ?System)
  (= ?FOO1 MultipleRequirement-Complexity)
))) complexity)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Request ?Response ?Time) (:and
  (:and (responseTime ?Request ?Time) (responseTo ?Response ?Request))
  (= ?FOO0 (WhenFn ?Response))
  (= ?FOO1 ?Time)
))) duration)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Agent ?Resource ?Using) (:and
  (:and (instance-of ?Using UsingAResource) (resourceUsed ?Using ?Resource) (agent-rel ?Using ?Agent))
  (= ?FOO0 ?Agent)
  (= ?FOO1 ?Resource)
))) uses)
(implies Optimization (not SatisfyingRequirements))
(implies SatisfyingRequirements (not Optimization))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Agent ?Check ?Depositing) (:and
  (:and (instance-of ?Depositing DepositingACheck) (instance-of ?Check Check) (agent-rel ?Depositing ?Agent))
  (= ?FOO0 ?Check)
  (= ?FOO1 ?Agent)
))) signedBy)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Check ?Drawing ?DrawingTime ?Duration ?Procesing ?Processing ?ProcessingTime ?Time) (:and
  (:and (instance-of ?Drawing DrawingACheck) (patient ?Drawing ?Check) (instance-of ?Processing ProcessingACheck) (patient ?Processing ?Check) (= (WhenFn ?Drawing) ?DrawingTime) (= (WhenFn ?Procesing) ?ProcessingTime) (meetsTemporally ?DrawingTime ?Time) (meetsTemporally ?Time ?ProcessingTime) (duration ?Time ?Duration))
  (= ?FOO0 ?Duration)
  (= ?FOO1 (MeasureFn 6 MonthDuration))
))) lessThan)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Account ?Agent ?Using) (:and
  (:and (instance-of ?Using UsingAnAccount) (patient ?Using ?Account) (accountHolder ?Account ?Agent))
  (= ?FOO0 ?Using)
  (= ?FOO1 ?Agent)
))) agent-rel)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Account ?Agent ?Check ?Drawing) (:and
  (:and (instance-of ?Drawing DrawingACheck) (patient ?Drawing ?Check) (agent-rel ?Drawing ?Agent) (checkAccount ?Check ?Account))
  (= ?FOO0 ?Account)
  (= ?FOO1 ?Agent)
))) accountHolder)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Account ?Bank ?Controlling) (:and
  (:and (instance-of ?Controlling ControllingAnAccount) (patient ?Controlling ?Account) (accountAt ?Account ?Bank))
  (= ?FOO0 ?Controlling)
  (= ?FOO1 ?Bank)
))) agent-rel)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?Account ?Amount ?Balance1 ?Balance2 ?Payment) (:and
  (:and (instance-of ?Payment Payment) (origin ?Payment (CurrencyFn ?Account)) (instance-of ?Account FinancialAccount) (transactionAmount ?Payment ?Amount) (currentAccountBalance ?Account (ImmediatePastFn (WhenFn ?Payment)) ?Balance1) (= ?Balance2 (SubtractionFn ?Balance1 ?Amount)))
  (= ?FOO0 ?Account)
  (= ?FOO1 (ImmediateFutureFn (WhenFn ?Payment)))
  (= ?FOO2 ?Balance2)
))) currentAccountBalance)
(implies Deposit (not Withdrawal))
(implies Withdrawal (not Deposit))
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?Account ?Amount ?Balance1 ?Balance2 ?Deposit ?TimeOfDeposit) (:and
  (:and (instance-of ?Deposit Deposit) (time ?Deposit ?TimeOfDeposit) (instance-of ?Account FinancialAccount) (destination ?Deposit (CurrencyFn ?Account)) (transactionAmount ?Deposit ?Amount) (currentAccountBalance ?Account (ImmediatePastFn (WhenFn ?Deposit)) ?Balance1) (= ?Balance2 (AdditionFn ?Balance1 ?Amount)))
  (= ?FOO0 ?Account)
  (= ?FOO1 (ImmediateFutureFn (FutureFn ?Deposit)))
  (= ?FOO2 ?Balance2)
))) currentAccountBalance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Account ?Amount ?Balance ?Period ?Rate ?Rate-Decimal) (:and
  (:and (principalAmount ?Account ?Balance) (fixedInterestRate ?Account ?Rate) (simpleInterest ?Account ?Amount ?Period) (= ?Rate-Decimal (DivisionFn (MagnitudeFn ?Rate) 100)))
  (= ?FOO0 ?Amount)
  (= ?FOO1 (MultiplicationFn (MultiplicationFn (MagnitudeFn ?Period) ?Balance) ?Rate-Decimal))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Account ?Add ?Balance ?Exponent ?Interest ?Multiply ?Period ?Rate ?Rate-Decimal) (:and
  (:and (principalAmount ?Account ?Balance) (fixedInterestRate ?Account ?Rate) (compoundInterest ?Account ?Interest ?Period) (= ?Rate-Decimal (DivisionFn ?Rate 100)) (= ?Add (AdditionFn 1 ?Rate-Decimal)) (= ?Exponent (ExponentiationFn ?Add (MagnitudeFn ?Period))) (= ?Multiply (MultiplicationFn ?Exponent ?Balance)))
  (= ?FOO0 ?Interest)
  (= ?FOO1 (SubtractionFn ?Multiply ?Balance))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?Account ?Interest ?Period ?Principal ?Rate ?Rate-Decimal) (:and
  (:and (simpleInterest ?Account ?Interest ?Period) (principalAmount ?Account ?Principal) (= ?Rate-Decimal (DivisionFn ?Interest ?Principal)) (= ?Rate (MultiplicationFn ?Rate-Decimal 100)))
  (= ?FOO0 ?Account)
  (= ?FOO1 ?Rate)
  (= ?FOO2 ?Period)
))) interestRatePerPeriod)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Account ?Date ?PrimeRate ?Rate) (:and
  (:and (instance-of ?Account PersonalAccount) (currentInterestRate ?Account ?Date ?Rate) (primeInterestRate ?Date ?PrimeRate))
  (= ?FOO0 ?Rate)
  (= ?FOO1 ?PrimeRate)
))) greaterThan)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Agreement ?Date ?Period) (:and
  (:and (agreementPeriod ?Agreement ?Period) (overlapsTemporally ?Date ?Period))
  (= ?FOO0 ?Agreement)
  (= ?FOO1 ?Date)
))) agreementActive)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?Account ?Date ?Principal) (:and
  (:and (maturityDate ?Account ?Date) (principalAmount ?Account ?Principal))
  (= ?FOO0 ?Account)
  (= ?FOO1 ?Principal)
  (= ?FOO2 ?Date)
))) amountDue)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Account ?End ?Period) (:and
  (:and (agreementPeriod ?Account ?Period) (finishes ?End ?Period))
  (= ?FOO0 ?Account)
  (= ?FOO1 ?End)
))) maturityDate)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Account ?Balance ?Date) (:and
  (:and (effectiveDate ?Account ?Date) (currentAccountBalance ?Account ?Date ?Balance))
  (= ?FOO0 ?Account)
  (= ?FOO1 ?Balance)
))) originalBalance)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?Account ?Balance ?Date ?Overdraft) (:and
  (:and (currentAccountBalance ?Account ?Date (MeasureFn ?Balance DollarUnitedStates)) (lessThan ?Balance 0) (= ?Overdraft (SubtractionFn 0 ?Balance)))
  (= ?FOO0 ?Account)
  (= ?FOO1 (MeasureFn ?Overdraft DollarUnitedStates))
  (= ?FOO2 ?Date)
))) overdraft)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Amount ?Balance ?Loan ?Purchase ?Value) (:and
  (:and (downPayment ?Loan ?Amount) (loanForPurchase ?Loan ?Purchase) (monetaryValue ?Purchase ?Value) (= ?Balance (SubtractionFn ?Value ?Amount)))
  (= ?FOO0 ?Loan)
  (= ?FOO1 ?Balance)
))) originalBalance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Account ?Amount ?AmountDue ?Date ?DueDate ?Payment) (:and
  (:and (transactionAmount ?Payment ?Amount) (date ?Payment ?Date) (instance-of ?Account FinancialAccount) (destination ?Payment (CurrencyFn ?Account)) (amountDue ?Account ?AmountDue ?DueDate) (before (EndFn ?Date) (BeginFn ?DueDate)))
  (= ?FOO0 ?Payment)
  (= ?FOO1 Prepayment)
))) instance)
(implies FixedRateAccount (not AdjustableRateAccount))
(implies AdjustableRateAccount (not FixedRateAccount))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Account ?Rate) (:and
  (fixedInterestRate ?Account ?Rate)
  (= ?FOO0 ?Account)
  (= ?FOO1 FixedRateAccount)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Account ?Agent) (:and
  (:and (accountHolder ?Account ?Agent) (instance-of ?Agent Human))
  (= ?FOO0 ?Account)
  (= ?FOO1 PersonalAccount)
))) instance)
(implies CorporateAccount (not PersonalAccount))
(implies PersonalAccount (not CorporateAccount))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Account ?Agent) (:and
  (:and (accountHolder ?Account ?Agent) (instance-of ?Agent Corporation))
  (= ?FOO0 ?Account)
  (= ?FOO1 CorporateAccount)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Account) (:and
  (instance-of ?Account MoneyMarket)
  (= ?FOO0 ?Account)
  (= ?FOO1 HighLiquidity)
))) liquidity)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Account) (:and
  (instance-of ?Account MoneyMarket)
  (= ?FOO0 ?Account)
  (= ?FOO1 LowRisk)
))) riskLevel)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Account) (:and
  (instance-of ?Account TreasuryBill)
  (= ?FOO0 ?Account)
  (= ?FOO1 LowRisk)
))) riskLevel)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Account) (:and
  (instance-of ?Account TraditionalSavingsAccount)
  (= ?FOO0 ?Account)
  (= ?FOO1 HighLiquidity)
))) liquidity)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Collateral ?Loan) (:and
  (:and (instance-of ?Loan SecuredLoan) (securedBy ?Loan ?Collateral))
  (= ?FOO0 ?Collateral)
  (= ?FOO1 Collateral)
))) instance)
(implies SecuredLoan (not UnsecuredLoan))
(implies UnsecuredLoan (not SecuredLoan))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Loan ?Security) (:and
  (securedBy ?Loan ?Security)
  (= ?FOO0 ?Loan)
  (= ?FOO1 SecuredLoan)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Loan ?RealEstate) (:and
  (:and (instance-of ?Loan Mortgage) (loanForPurchase ?Loan ?RealEstate))
  (= ?FOO0 ?Loan)
  (= ?FOO1 ?RealEstate)
))) securedBy)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Lender ?Loan) (:and
  (:and (instance-of ?Loan BankTermLoan) (lender ?Loan ?Lender))
  (= ?FOO0 ?Lender)
  (= ?FOO1 Bank-FinancialOrganization)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Duration ?Loan ?Period) (:and
  (:and (instance-of ?Loan BankTermLoan) (agreementPeriod ?Loan ?Period) (duration ?Period (MeasureFn ?Duration YearDuration)))
  (= ?FOO0 ?Duration)
  (= ?FOO1 1)
))) greaterThanOrEqualTo)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Borrower ?Loan) (:and
  (:and (instance-of ?Loan BrokerLoan) (borrower ?Loan ?Borrower))
  (= ?FOO0 ?Borrower)
  (= ?FOO1 Broker)
))) instance)
(implies FHALoan (not ConventionalMortgage))
(implies ConventionalMortgage (not FHALoan))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Loan) (:and
  (instance-of ?Loan FHALoan)
  (= ?FOO0 ?Loan)
  (= ?FOO1 FederalHousingAdministration)
))) insured)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Lender ?Loan) (:and
  (:and (instance-of ?Loan DayLoan) (lender ?Loan ?Lender))
  (= ?FOO0 ?Lender)
  (= ?FOO1 Bank-FinancialOrganization)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Borrower ?Loan) (:and
  (:and (instance-of ?Loan DayLoan) (borrower ?Loan ?Borrower))
  (= ?FOO0 ?Borrower)
  (= ?FOO1 Broker)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?Loan ?Maturity ?Principal) (:and
  (:and (instance-of ?Loan SinglePaymentLoan) (principalAmount ?Loan ?Principal) (maturityDate ?Loan ?Maturity))
  (= ?FOO0 ?Loan)
  (= ?FOO1 ?Principal)
  (= ?FOO2 ?Maturity)
))) amountDue)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Index ?Inflation) (:and
  (:and (instance-of ?Inflation Inflation) (benchmark ?Inflation ?Index))
  (= ?FOO0 ?Index)
  (= ?FOO1 InflationIndex)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Index ?Stock) (:and
  (:and (instance-of ?Stock Stock) (benchmark ?Index ?Stock))
  (= ?FOO0 ?Index)
  (= ?FOO1 StockIndex)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Index ?Stock) (:and
  (:and (instance-of ?Index NASDAQCompositeIndex) (benchmark ?Index ?Stock))
  (= ?FOO0 ?Stock)
  (= ?FOO1 NASDAQ)
))) listedOn)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Agent ?Investment) (:and
  (:and (instance-of ?Investment Investment) (possesses ?Agent ?Investment))
  (= ?FOO0 ?Agent)
  (= ?FOO1 Investor)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Account ?Penalty ?Withdrawal) (:and
  (:and (instance-of ?Withdrawal Withdrawal) (instance-of ?Account FinancialAccount) (origin ?Withdrawal (CurrencyFn ?Account)) (:fail (:and (instance-of ?Penalty Penalty) (destination ?Penalty (CurrencyFn ?Account)) (causes ?Withdrawal ?Penalty))))
  (= ?FOO0 ?Account)
  (= ?FOO1 HighLiquidity)
))) liquidity)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Stock) (:and
  (instance-of ?Stock PennyStock)
  (= ?FOO0 ?Stock)
  (= ?FOO1 HighRisk)
))) riskLevel)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Date ?Price ?Stock) (:and
  (:and (instance-of ?Stock PennyStock) (askPrice ?Stock (MeasureFn ?Price UnitedStatesDollar) ?Date))
  (= ?FOO0 ?Price)
  (= ?FOO1 5)
))) lessThan)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Bond) (:and
  (instance-of ?Bond JunkBond)
  (= ?FOO0 ?Bond)
  (= ?FOO1 HighRisk)
))) riskLevel)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Bond) (:and
  (instance-of ?Bond JunkBond)
  (= ?FOO0 ?Bond)
  (= ?FOO1 HighYield)
))) yieldLevel)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Bond) (:and
  (instance-of ?Bond JunkBond)
  (= ?FOO0 ?Bond)
  (= ?FOO1 D-Rating)
))) bondRating)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Bond) (:and
  (instance-of ?Bond GovernmentBond)
  (= ?FOO0 ?Bond)
  (= ?FOO1 LowRisk)
))) riskLevel)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Bond) (:and
  (instance-of ?Bond GovernmentBond)
  (= ?FOO0 ?Bond)
  (= ?FOO1 LowYield)
))) yieldLevel)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Bond) (:and
  (instance-of ?Bond GovernmentBond)
  (= ?FOO0 ?Bond)
  (= ?FOO1 AAA-Rating)
))) bondRating)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?Amount ?Bond ?Date) (:and
  (:and (instance-of ?Bond CallableBond) (currentAccountBalance (AccountFn ?Bond) ?Date ?Amount) (callDate ?Bond ?Date))
  (= ?FOO0 (AccountFn ?Bond))
  (= ?FOO1 ?Amount)
  (= ?FOO2 ?Date)
))) amountDue)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?Agent ?Option ?Premium) (:and
  (:and (premium ?Option ?Premium) (optionHolder ?Option ?Agent))
  (= ?FOO0 ?Agent)
  (= ?FOO1 ?Option)
  (= ?FOO2 ?Premium)
))) potentialLoss)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Order) (:and
  (instance-of ?Order MOCOrder)
  (= ?FOO0 ?Order)
  (= ?FOO1 DayOrder)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Option ?Stock ?StockPrice ?StrikePrice ?Time) (:and
  (:and (instance-of ?Option CallOption) (underlier ?Option ?Stock) (price ?Stock ?StockPrice ?Time) (strikePrice ?Option ?StrikePrice) (lessThan ?StrikePrice ?StockPrice))
  (= ?FOO0 ?Option)
  (= ?FOO1 ?Time)
))) inTheMoney)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Option ?Stock ?StockPrice ?StrikePrice ?Time) (:and
  (:and (instance-of ?Option PutOption) (underlier ?Option ?Stock) (price ?Stock ?StockPrice ?Time) (strikePrice ?Option ?StrikePrice) (lessThan ?StockPrice ?StrikePrice))
  (= ?FOO0 ?Option)
  (= ?FOO1 ?Time)
))) inTheMoney)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Option ?Stock ?StockPrice ?StrikePrice ?Time) (:and
  (:and (instance-of ?Option Option) (underlier ?Option ?Stock) (price ?Stock ?StockPrice ?Time) (strikePrice ?Option ?StrikePrice) (= ?StockPrice ?StrikePrice))
  (= ?FOO0 ?Option)
  (= ?FOO1 ?Time)
))) atTheMoney)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Option ?Stock ?StockPrice ?StrikePrice ?Time) (:and
  (:and (instance-of ?Option CallOption) (underlier ?Option ?Stock) (price ?Stock ?StockPrice ?Time) (strikePrice ?Option ?StrikePrice) (lessThan ?StockPrice ?StrikePrice))
  (= ?FOO0 ?Option)
  (= ?FOO1 ?Time)
))) outOfTheMoney)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Option ?Stock ?StockPrice ?StrikePrice ?Time) (:and
  (:and (instance-of ?Option PutOption) (underlier ?Option ?Stock) (price ?Stock ?StockPrice ?Time) (strikePrice ?Option ?StrikePrice) (lessThan ?StrikePrice ?StockPrice))
  (= ?FOO0 ?Option)
  (= ?FOO1 ?Time)
))) outOfTheMoney)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Stock ?Transaction) (:and
  (:and (instance-of ?Transaction StockMarketTransaction) (patient ?Transaction ?Stock))
  (= ?FOO0 ?Stock)
  (= ?FOO1 Stock)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Agent ?Employment ?Org) (:and
  (:and (instance-of ?Employment Employment) (agreementMember ?Employment ?Org) (agreementMember ?Employment ?Agent))
  (= ?FOO0 ?Org)
  (= ?FOO1 ?Agent)
))) employs)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Activity ?Agent ?Money) (:and
  (incomeEarned ?Agent ?Money ?Activity)
  (= ?FOO0 ?Activity)
  (= ?FOO1 ?Agent)
))) agent-rel)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?ATIncome ?Activity ?Agent ?Income ?Tax ?TaxAmount) (:and
  (:and (incomeEarned ?Agent ?Income ?Activity) (amountCharged ?Tax ?TaxAmount) (causes ?Activity ?Tax) (= ?ATIncome (SubtractionFn ?Income ?TaxAmount)))
  (= ?FOO0 ?Activity)
  (= ?FOO1 ?ATIncome)
))) afterTaxIncome)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Agent ?Currency ?Plan) (:and
  (:and (instance-of ?Plan PensionPlan) (destination ?Plan ?Agent) (instance-of ?Agent RetiredPerson) (result ?Plan ?Currency))
  (= ?FOO0 ?Agent)
  (= ?FOO1 ?Currency)
))) uses)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Agent ?Org ?Plan) (:and
  (:and (instance-of ?Plan PensionPlan) (destination ?Plan ?Agent) (employs ?Org ?Agent))
  (= ?FOO0 ?Plan)
  (= ?FOO1 ?Org)
))) agent-rel)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Agreement ?Period ?StartDate) (:and
  (:and (agreementPeriod ?Agreement ?Period) (starts ?StartDate ?Period))
  (= ?FOO0 ?Agreement)
  (= ?FOO1 ?StartDate)
))) effectiveDate)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Agent ?Investment ?Level) (:and
  (:and (riskTolerance ?Agent ?Level) (instance-of ?Investment Investment) (possesses ?Agent ?Investment))
  (= ?FOO0 ?Investment)
  (= ?FOO1 ?Level)
))) riskLevel)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Authorization ?Card ?Transaction) (:and
  (:and (instance-of ?Authorization AuthorizationOfTransaction) (instance-of ?Transaction FinancialTransaction) (instance-of ?Card BankCard) (instrument ?Transaction ?Card) (causes ?Authorization ?Transaction))
  (= ?FOO0 ?Card)
  (= ?FOO1 ValidCard)
))) instance)
(implies ExpiredCard (not ValidCard))
(implies ValidCard (not ExpiredCard))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Agent1 ?Agent2 ?Service) (:and
  (:and (instance-of ?Service FinancialService) (agent-rel ?Service ?Agent2) (destination ?Service ?Agent1))
  (= ?FOO0 ?Agent1)
  (= ?FOO1 ?Agent2)
))) customer)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Account ?Agent ?Bank) (:and
  (:and (accountHolder ?Account ?Agent) (accountAt ?Account ?Bank))
  (= ?FOO0 ?Agent)
  (= ?FOO1 ?Bank)
))) customer)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?Org ?Person1 ?Person2 ?Service) (:and
  (:and (instance-of ?Service FinancialService) (employs ?Org ?Person1) (agent-rel ?Service ?Person1) (destination ?Service ?Person2))
  (= ?FOO0 ?Person1)
  (= ?FOO1 ?Person2)
  (= ?FOO2 ?Org)
))) customerRepresentative)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Address ?Agent) (:and
  (address ?Address ?Agent)
  (= ?FOO0 ?Agent)
  (= ?FOO1 ?Address)
))) inhabits)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Account ?Statement ?Transaction1 ?Transaction2) (:and
  (:and (lastStatement ?Account ?Statement) (instance-of ?Transaction1 FinancialTransaction) (realization ?Statement ?Transaction1) (instance-of ?Transaction2 FinancialTransaction) (:fail (realization ?Statement ?Transaction2)))
  (= ?FOO0 (WhenFn ?Transaction2))
  (= ?FOO1 (WhenFn ?Transaction1))
))) earlier)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Amount ?Loan ?Period) (:and
  (:and (instance-of ?Loan Loan) (agreementPeriod ?Loan ?Period) (interestEarned ?Loan ?Amount ?Period))
  (= ?FOO0 ?Loan)
  (= ?FOO1 ?Amount)
))) loanInterest)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Account ?AccountType ?Bank) (:and
  (:and (instance-of ?Account ?AccountType) (accountAt ?Account ?Bank))
  (= ?FOO0 ?AccountType)
  (= ?FOO1 ?Bank)
))) bankAccount)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Duration ?Period ?Statement) (:and
  (:and (statementPeriod ?Statement ?Period) (duration ?Period ?Duration))
  (= ?FOO0 ?Duration)
  (= ?FOO1 MonthDuration)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Date ?Period ?Statement) (:and
  (:and (statementPeriod ?Statement ?Period) (dateOfStatement ?Statement ?Date))
  (= ?FOO0 ?Date)
  (= ?FOO1 ?Period)
))) finishes)
(implies InternalTransfer (not ExternalTransfer))
(implies ExternalTransfer (not InternalTransfer))
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Organization1 ?Organization2 ?Transfer ?organization2) (:and
  (:and (instance-of ?Transfer ExternalTransfer) (origin ?Transfer ?Organization1) (instance-of ?Organization1 FinancialOrganization) (destination ?Transfer ?organization2) (instance-of ?Organization2 FinancialOrganization))
  (= ?FOO0 ?Organization1)
  (= ?FOO1 ?Organization2)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1 ?FOO2) (:for-some (?Amount ?Loan ?Period) (:and
  (:and (loanFeeAmount ?Loan ?Amount) (agreementPeriod ?Loan ?Period))
  (= ?FOO0 ?Loan)
  (= ?FOO1 ?Amount)
  (= ?FOO2 ?Period)
))) interestEarned)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Model ?Service ?Using ?UsingAService) (:and
  (:and (instance-of ?Model ServiceModel) (implementsAModel ?Model ?Service) (instance-of ?Using ?UsingAService) (patient ?Using ?Service))
  (= ?FOO0 ?Model)
  (= ?FOO1 ?Using)
))) represents)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Access ?Grounding ?Service) (:and
  (:and (instance-of ?Grounding ServiceGrounding) (supportsAGrounding ?Grounding ?Service) (instance-of ?Access AccessingAService) (destination ?Access ?Service))
  (= ?FOO0 ?Grounding)
  (= ?FOO1 ?Access)
))) represents)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Name ?Profile ?Service) (:and
  (:and (serviceName ?Name ?Service) (presentsAProfile ?Profile ?Service))
  (= ?FOO0 ?Profile)
  (= ?FOO1 ?Name)
))) subsumesContentInstance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Effect ?Service) (:and
  (serviceEffect ?Service ?Effect)
  (= ?FOO0 ?Effect)
  (= ?FOO1 ?Service)
))) effector)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Point ?Process) (:and
  (startTime ?Process ?Point)
  (= ?FOO0 ?Point)
  (= ?FOO1 (BeginFn (WhenFn ?Process)))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?Point ?Process) (:and
  (endTime ?Process ?Point)
  (= ?FOO0 ?Point)
  (= ?FOO1 (EndFn (WhenFn ?Process)))
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?SEQ) (:and
  (:and (instance-of ?SEQ UnarySumofunction) (superrelations (DomainFn ?SEQ) Sumointeger) (superrelations (RangeFn ?SEQ) Entity))
  (= ?FOO0 ?SEQ)
  (= ?FOO1 Sumosequence)
))) instance)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?N ?SEQ) (:and
  (:and (instance-of ?SEQ Sumosequence) (:fail (= ?SEQ NullSeq)) (= (CardinalityFn (DomainFn ?SEQ)) ?N))
  (= ?FOO0 (LengthOfSeqFn ?SEQ))
  (= ?FOO1 ?N)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?SEQ) (:and
  (:and (instance-of ?SEQ Seqence) (= (CardinalityFn ?SEQ) 1))
  (= ?FOO0 (HeadOfSeqFn ?SEQ))
  (= ?FOO1 ?SEQ)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?M ?N ?SEQ) (:and
  (:and (= (LengthOfSeqFn ?SEQ) ?N) (greaterThan ?M ?N))
  (= ?FOO0 (IthMemberOfSeqFn ?M ?SEQ))
  (= ?FOO1 NullSumoset)
))) equal)
(implies (:satisfies (?FOO0 ?FOO1) (:for-some (?SEQ) (:and
  (= (LengthOfSeqFn ?SEQ) 0)
  (= ?FOO0 (IthMemberOfSeqFn ?M ?SEQ))
  (= ?FOO1 NullSeq)
))) equal)

;; ----- SUMO2LOOM OUTPUT PART 2: COMMENTARY AND ASSERTIONS -----

;; Access to and use of this file is governed by the GNU General
;; Public License <http://www.gnu.org/copyleft/gpl.html>.

;; This file contains modified versions of SUMO and three domain
;; ontologies.  The effective date of modification is 2003-01-22.
;; Please refer to the accompanying documentation (sumo2loom_doc
;; rev. 2003-01-22 or similar) for a detailed explanation of the
;; modifications.

;; This file is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  NIST does not
;; assume legal liability or responsibility for anything done with
;; this file.

;; Please refer to sumo2loom_doc for details of the copyright and
;; licensing terms.


;; ================================================
;;      SUMO (Suggested Upper Merged Ontology)
;; ================================================

;; This is the source file for the SUMO (Suggested Upper Merged Ontology),
;; an ontology that was developed within the SUO Working Group by merging
;; the SUO "candidate content" sources and refining and extending this content on
;; the basis of various knowledge engineering projects and input from the SUO
;; Working Group.

;; The SUMO incorporates elements of John Sowa's upper ontology (as described at
;; http://www.bestweb.net/~sowa/ontology/toplevel.htm and in Chapter 2 of his
;; book _Knowledge Representation_, Brooks/Cole, 2000), Russell and Norvig's
;; ontology, PSL (Process Specification Language), Casati and Varzi's theory of
;; holes, Allen's temporal axioms, the relatively noncontroversial elements of
;; Smith's and Guarino's respective mereotopologies, the KIF formalization of the
;; CPR (Core Plan Representation), the ontologies available on the Ontolingua
;; server maintained by Stanford University's Knowledge Systems Laboratory, the
;; ontologies developed by ITBM-CNR, some of the spatial relations from an
;; unpublished paper by Iris Tommelein and Anil Gupta entitled "Conceptual
;; Structures for Spatial Reasoning", and a "Structural Ontology" proposed by
;; David Whitten and substantially revised and extended by Chris Menzel.
;; Note that some of the subclasses of 'Process' in the SUMO were originally
;; inspired by some of the verb classes from the second part of Beth Levin's book
;; "English Verb Classes and Alternations:  A Preliminary Investigation."

;; The knowledge representation language in which the SUMO is expressed is SUO-KIF,
;; which stands for "Standard Upper Ontology - Knowledge Interchange Format".  SUO-KIF
;; is a simplified form of the popular KIF knowledge representation language.  A
;; specification of SUO-KIF can be found at:  http://suo.ieee.org/suo-kif.html.  It
;; should be noted that some of the axioms in the SUMO make use of row variables
;; (indicated with a "@" prefix).  Such variables are not currently part of the SUO-
;; KIF specification, but they simplify matters significantly in some cases.  Details
;; about row variables can be found in the following paper:
;; http://reliant.teknowledge.com/IJCAI01/HayesMenzel-SKIF-IJCAI2001.pdf.

;; The SUMO is a modular ontology.  That is, the ontology is divided into
;; self-contained subontologies.  Each subontology is indicated by a section
;; header, and the dependencies between the subontologies are specified with
;; statements of the form ";; INCLUDES '<SUBONTOLOGY>'".  These statements are
;; found at the beginning of each section.  The dependencies between the
;; various subontologies can also be graphed informally as follows:
;;
;;                             STRUCTURAL ONTOLOGY
;;                                      +
;;                                      |
;;                                      |
;;                                      +
;;                                 BASE ONTOLOGY
;;                                 /   |   |   \
;;                                /    |   |    \
;;                               /     |   |     \
;;                              /      |   |      \
;;                             /       |   |       \
;;                            +        +   +        +
;;             SET/CLASS THEORY   NUMERIC  TEMPORAL  MEREOTOPOLOGY
;;                               /     |        |           |
;;                              /      |        |           |
;;                             /       |        |           |
;;                            +        +        +           +
;;                        GRAPH   MEASURE   PROCESSES +--+ OBJECTS
;;                                              +           +
;;                                               \         /
;;                                                \       /
;;                                                 \     /
;;                                                  +   +
;;                                                 QUALITIES
;;
;;
;; Note that the "+" sign at the end of an arc indicates the direction of
;; dependency - the node near the sign includes the subontology at the other
;; end of the arc.  Note too that in some cases the dependency is
;; bidirectional.  Separating ontologies in cases like these is useful when
;; their respective topics can be cleanly differentiated.


;; BEGIN FILE


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   STRUCTURAL ONTOLOGY   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; INCLUDES 'BASE ONTOLOGY'

;; The Structural Ontology consists of definitions of certain syntactic
;; abbreviations that can be both heuristically useful and computationally
;; advantageous.

(tell (BinaryPredicate instance))
(tell (sumodocumentation instance "An object is an &%instance of a &%SumosetOrSumoclass if
it is included in that &%SumosetOrSumoclass.  An individual may be an instance of many
classes, some of which may be subclasses of others.  Thus, there is no
assumption in the meaning of &%instance about specificity or uniqueness."))

(tell (AsymmetricSumorelation immediateInstance))
(tell (IntransitiveSumorelation immediateInstance))
(tell (sumodocumentation immediateInstance "An object is an &%immediateInstance of
a &%SumosetOrSumoclass if it is an instance of the &%SumosetOrSumoclass and there does not exist a
subclass of &%SumosetOrSumoclass such that it is an instance of the subclass."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (immediateInstance ?ENTITY ?CLASS)
;;    (not (exists (?SUBCLASS)
;;       (and
;;          (subclass ?SUBCLASS ?CLASS)
;;          (instance ?ENTITY ?SUBCLASS)))))

(tell (BinaryPredicate sumoinverse))
(tell (sumodocumentation sumoinverse "The sumoinverse of a &%BinarySumorelation is a relation
in which all the tuples of the original relation are reversed.  In
other words, one &%BinarySumorelation is the sumoinverse of another if they are
equivalent when their arguments are swapped."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (inverse ?REL1 ?REL2)
;;    (forall (?INST1 ?INST2)
;;       (<=>
;;          (holds ?REL1 ?INST1 ?INST2)
;;          (holds ?REL2 ?INST2 ?INST1))))

(tell (BinaryPredicate subclass))
(tell (PartialOrderingSumorelation subclass))
(tell (sumodocumentation subclass "(&%subclass ?CLASS1 ?CLASS2) means that ?CLASS1 is
a subclass of ?CLASS2, i.e. every instance of ?CLASS1 is also an instance of
?CLASS2.  A class may have multiple superclasses and subclasses."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (subclass ?SUBCLASS ?CLASS)
;;    (forall (?INST)
;;       (=>
;;          (instance ?INST ?SUBCLASS)
;;          (instance ?INST ?CLASS))))

(tell (AsymmetricSumorelation immediateSubclass))
(tell (IntransitiveSumorelation immediateSubclass))
(tell (sumodocumentation immediateSubclass "A &%SumosetOrSumoclass ?CLASS1 is an &%immediateSubclass
of another &%SumosetOrSumoclass ?CLASS2 just in case ?CLASS1 is a subclass of ?CLASS2 and
there is no other subclass of ?CLASS2 such that ?CLASS1 is also a subclass of it."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (immediateSubclass ?CLASS1 ?CLASS2)
;;    (not (exists (?CLASS3)
;;       (and
;;          (subclass ?CLASS3 ?CLASS2)
;;          (subclass ?CLASS1 ?CLASS3)
;;          (not (equal ?CLASS2 ?CLASS3))
;;          (not (equal ?CLASS1 ?CLASS3))))))

(tell (BinaryPredicate subrelation))
(tell (PartialOrderingSumorelation subrelation))
(tell (sumodocumentation subrelation "A &%Sumorelation R is a &%subrelation
&%Sumorelation R' if R is a &%subclass R'.  This implies that every
tuple of R is also a tuple of R'.  Again, if R holds for some arguments
arg_1, arg_2, ... arg_n, then R' holds for the same arguments.  Thus, a
&%Sumorelation and its subrelation must have the same valence. In CycL,
&%subrelation is called #$genlPreds."))



;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (=>
;;    (and
;;       (subrelation ?REL1 ?REL2)
;;       (holds ?REL1 @ROW))
;;    (holds ?REL2 @ROW))


(tell (TernaryPredicate sumodomain))
(tell (sumodocumentation sumodomain "Provides a computationally and heuristically
convenient mechanism for declaring the argument types of a given relation.
The formula (&%sumodomain ?REL ?INT ?CLASS) means that the ?INT'th element of each
tuple in the relation ?REL must be an instance of ?CLASS.  Specifying argument
types is very helpful in maintaining ontologies.  Representation systems can
use these specifications to classify terms and check integrity constraints.
If the restriction on the argument type of a &%Sumorelation is not captured by a
&%SumosetOrSumoclass already defined in the ontology, one can specify a &%SumosetOrSumoclass
compositionally with the functions &%UnionFn, &%IntersectionFn, etc."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (domain ?REL ?NUMBER ?CLASS1)
;;       (domain ?REL ?NUMBER ?CLASS2))
;;    (or
;;       (subclass ?CLASS1 ?CLASS2)
;;       (subclass ?CLASS2 ?CLASS1)))

(tell (TernaryPredicate sumodomainSubclass))
(tell (sumodocumentation sumodomainSubclass "&%Predicate used to specify argument
type restrictions of &%Predicates.  The formula (&%sumodomainSubclass
?REL ?INT ?CLASS) means that the ?INT'th element of each tuple in the
relation ?REL must be a subclass of ?CLASS."))


;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (domainSubclass ?REL ?NUMBER ?CLASS1)
;;       (domainSubclass ?REL ?NUMBER ?CLASS2))
;;    (or
;;       (subclass ?CLASS1 ?CLASS2)
;;       (subclass ?CLASS2 ?CLASS1)))

(tell (BinaryPredicate equal))
(tell (EquivalenceSumorelation equal))
(tell (SumorelationExtendedToQuantities equal))
(tell (sumodocumentation equal "(equal ?ENTITY1 ?ENTITY2) is true just in case
?ENTITY1 is identical with ?ENTITY2."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (equal ?THING1 ?THING2)
;;    (forall (?ATTR)
;;       (<=>
;;          (property ?THING1 ?ATTR)
;;          (property ?THING2 ?ATTR))))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (equal ?THING1 ?THING2)
;;    (forall (?CLASS)
;;       (<=>
;;          (instance ?THING1 ?CLASS)
;;          (instance ?THING2 ?CLASS))))

(tell (BinaryPredicate sumorange))
(tell (AsymmetricSumorelation sumorange))
(tell (sumodocumentation sumorange "Gives the sumorange of a function.  In other words,
(&%sumorange ?FUNCTION ?CLASS) means that all of the values assigned by
?FUNCTION are &%instances of ?CLASS."))

;; sumo2loom is dropping the following statement because it uses
;; AssignmentFn, which is a VariableArityRelation:
;; (=>
;;    (and
;;       (range ?FUNCTION ?CLASS)
;;       (equal (AssignmentFn ?FUNCTION @ROW) ?VALUE))
;;    (instance ?VALUE ?CLASS))


;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (range ?REL ?CLASS1)
;;       (range ?REL ?CLASS2))
;;    (or
;;       (subclass ?CLASS1 ?CLASS2)
;;       (subclass ?CLASS2 ?CLASS1)))

(tell (BinaryPredicate sumorangeSubclass))
(tell (AsymmetricSumorelation sumorangeSubclass))
(tell (sumodocumentation sumorangeSubclass "(&%sumorangeSubclass ?FUNCTION ?CLASS) means that
all of the values assigned by ?FUNCTION are &%subclasses of ?CLASS."))

;; sumo2loom is dropping the following statement because it uses
;; AssignmentFn, which is a VariableArityRelation:
;; (=>
;;    (and
;;       (rangeSubclass ?FUNCTION ?CLASS)
;;       (equal (AssignmentFn ?FUNCTION @ROW) ?VALUE))
;;    (subclass ?VALUE ?CLASS))


;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (rangeSubclass ?REL ?CLASS1)
;;       (rangeSubclass ?REL ?CLASS2))
;;    (or
;;       (subclass ?CLASS1 ?CLASS2)
;;       (subclass ?CLASS2 ?CLASS1)))

(tell (UnarySumofunction DomainFn))
(tell (sumodocumentation DomainFn "The sumodomain of a &%BinarySumorelation ?REL is
the &%SumosetOrSumoclass of all things that bear ?REL to something."))

;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (<=>
;;    (instance ?INST1 (DomainFn ?REL))
;;    (exists (?INST2)
;;       (holds ?REL ?INST1 ?INST2)))


(tell (UnarySumofunction RangeFn))
(tell (sumodocumentation RangeFn "The sumorange of a &%BinarySumorelation ?REL is the
&%SumosetOrSumoclass of all things such that something bears ?REL to them."))

;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (<=>
;;    (instance ?INST1 (RangeFn ?REL))
;;    (exists (?INST2)
;;       (holds ?REL ?INST2 ?INST1)))



(tell (BinaryPredicate valence))
(tell (AsymmetricSumorelation valence))
(tell (SingleValuedSumorelation valence))
(tell (sumodocumentation valence "Specifies the number of arguments that a
relation can take.  If a relation does not have a fixed number of
arguments, it does not have a valence and it is an instance of
&%VariableAritySumorelation.  For example, &%holds is a
&%VariableAritySumorelation."))

(tell (BinaryPredicate sumodocumentation))
(tell (AsymmetricSumorelation sumodocumentation))
(tell (sumodocumentation sumodocumentation "A relation between objects in the sumodomain
of discourse and strings of natural language text.  The sumodomain of
&%sumodocumentation is not constants (names), but the objects themselves.
This means that one does not quote the names when associating them with
their sumodocumentation."))

(tell (BinaryPredicate sumodisjoint))
(tell (SymmetricSumorelation sumodisjoint))
(tell (IrreflexiveSumorelation sumodisjoint))
(tell (sumodocumentation sumodisjoint "&%Sumoclasses are &%sumodisjoint only if they share no
instances, i.e. just in case the result of applying &%IntersectionFn to
them is empty."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (disjoint ?CLASS1 ?CLASS2)
;;    (forall (?INST)
;;       (not
;;          (and
;; 	    (instance ?INST ?CLASS1)
;;           (instance ?INST ?CLASS2)))))

(tell (Predicate sumodisjointSumorelation))
(tell (VariableAritySumorelation sumodisjointSumorelation))
(tell (relatedInternalConcept sumodisjointSumorelation sumodisjoint))
(tell (sumodocumentation sumodisjointSumorelation "This predicate relates any number of &%Sumorelations.
(&%sumodisjointSumorelation @ROW) means that any two relations in @ROW have no tuples in
common.  As a consequence, the intersection of all of the relations in @ROW is the
null set."))

;; sumo2loom is dropping the following statement because it uses
;; disjointRelation, which is a VariableArityRelation:
;; (=>
;;    (and
;;       (disjointRelation @ROW)
;;       (inList ?REL (ListFn @ROW)))
;;    (instance ?REL Relation))

;; sumo2loom is dropping the following statement because it uses
;; disjointRelation, which is a VariableArityRelation:
;; (=>
;;    (and
;;       (disjointRelation @ROW)
;;       (inList ?REL1 (ListFn @ROW))
;;       (inList ?REL2 (ListFn @ROW))
;;       (valence ?REL1 ?NUMBER))
;;    (valence ?REL2 ?NUMBER))

;; sumo2loom is dropping the following statement because it uses
;; disjointRelation, which is a VariableArityRelation:
;; (=>
;;    (and
;;       (domain ?REL1 ?NUMBER ?CLASS1)
;;       (domain ?REL2 ?NUMBER ?CLASS2)
;;       (disjoint ?CLASS1 ?CLASS2))
;;    (disjointRelation ?REL1 ?REL2))

;; sumo2loom is dropping the following statement because it uses
;; disjointRelation, which is a VariableArityRelation:
;; (=>
;;    (and
;;       (domainSubclass ?REL1 ?NUMBER ?CLASS1)
;;       (domainSubclass ?REL2 ?NUMBER ?CLASS2)
;;       (disjoint ?CLASS1 ?CLASS2))
;;    (disjointRelation ?REL1 ?REL2))

;; sumo2loom is dropping the following statement because it uses
;; disjointRelation, which is a VariableArityRelation:
;; (=>
;;    (and
;;       (range ?REL1 ?CLASS1)
;;       (range ?REL2 ?CLASS2)
;;       (disjoint ?CLASS1 ?CLASS2))
;;    (disjointRelation ?REL1 ?REL2))

;; sumo2loom is dropping the following statement because it uses
;; disjointRelation, which is a VariableArityRelation:
;; (=>
;;    (and
;;       (rangeSubclass ?REL1 ?CLASS1)
;;       (rangeSubclass ?REL2 ?CLASS2)
;;       (disjoint ?CLASS1 ?CLASS2))
;;    (disjointRelation ?REL1 ?REL2))

;; sumo2loom is dropping the following statement because it uses
;; disjointRelation, which is a VariableArityRelation:
;; (=>
;;    (and
;;       (disjointRelation @ROW1)
;;       (inList ?REL1 (ListFn @ROW1))
;;       (inList ?REL2 (ListFn @ROW1))
;;       (holds ?REL1 @ROW2))
;;    (not (holds ?REL2 @ROW2)))

(tell (Predicate contraryAttribute))
(tell (VariableAritySumorelation contraryAttribute))
(tell (sumodocumentation contraryAttribute "A &%contraryAttribute is a set of &%Attributes
such that something can not simultaneously have more than one of these &%Attributes.
For example, (&%contraryAttribute &%Pliable &%Rigid) means that nothing can be both
&%Pliable and &%Rigid."))

;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (=>
;;    (contraryAttribute @ROW)
;;    (=>
;;       (inList ?ELEMENT (ListFn @ROW))
;;       (instance ?ELEMENT Attribute)))

;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (=>
;;    (contraryAttribute @ROW)
;;    (forall (?ATTR1 ?ATTR2)
;;       (=>
;;          (and
;;             (inList ?ATTR1 (ListFn @ROW))
;;             (inList ?ATTR2 (ListFn @ROW))
;;             (not (equal ?ATTR1 ?ATTR2)))
;;          (=>
;;             (property ?OBJ ?ATTR1)
;;             (not (property ?OBJ ?ATTR2))))))

(tell (Predicate exhaustiveAttribute))
(tell (VariableAritySumorelation exhaustiveAttribute))
(tell (sumodocumentation exhaustiveAttribute "This predicate relates a &%Sumoclass to a
set of &%Attributes, and it means that the elements of this set exhaust the
instances of the &%Sumoclass.  For example, (&%exhaustiveAttribute &%PhysicalState
&%Solid &%Liquid &%Gas) means that there are only three instances of the class
&%PhysicalState, viz. &%Solid, &%Liquid, and &%Gas."))

;; sumo2loom is dropping the following statement because it uses
;; exhaustiveAttribute, which is a VariableArityRelation:
;; (=>
;;    (exhaustiveAttribute ?CLASS @ROW)
;;    (=>
;;       (inList ?ATTR (ListFn @ROW))
;;       (instance ?ATTR Attribute)))

;; sumo2loom is dropping the following statement because it uses
;; exhaustiveAttribute, which is a VariableArityRelation:
;; (=>
;;    (exhaustiveAttribute ?CLASS @ROW)
;;    (forall (?OBJ)
;;       (=>
;;          (instance ?ATTR1 ?CLASS)
;;          (exists (?ATTR2)
;;             (and
;;                (inList ?ATTR2 (ListFn @ROW))
;;                (equal ?ATTR1 ?ATTR2))))))

(tell (Predicate exhaustiveDecomposition))
(tell (VariableAritySumorelation exhaustiveDecomposition))
(tell (relatedInternalConcept exhaustiveDecomposition partition))
(tell (sumodocumentation exhaustiveDecomposition "An &%exhaustiveDecomposition of a
&%Sumoclass C is a set of subclasses of C such that every subclass of C either
is an element of the set or is a subclass of an element of the set.  Note:
this does not necessarily mean that the elements of the set are sumodisjoint
(see &%partition - a &%partition is a sumodisjoint exhaustive decomposition.)"))

;; sumo2loom is dropping the following statement because it uses
;; exhaustiveDecomposition, which is a VariableArityRelation:
;; (=>
;;    (exhaustiveDecomposition @ROW)
;;    (=>
;;       (inList ?ELEMENT (ListFn @ROW))
;;       (instance ?ELEMENT Class)))

(tell (Predicate sumodisjointDecomposition))
(tell (VariableAritySumorelation sumodisjointDecomposition))
(tell (relatedInternalConcept sumodisjointDecomposition exhaustiveDecomposition))
(tell (relatedInternalConcept sumodisjointDecomposition sumodisjoint))
(tell (sumodocumentation sumodisjointDecomposition "A &%sumodisjointDecomposition of a &%Sumoclass
C is a set of subclasses of C that are mutually &%sumodisjoint."))

;; sumo2loom is dropping the following statement because it uses
;; disjointDecomposition, which is a VariableArityRelation:
;; (=>
;;    (disjointDecomposition @ROW)
;;    (=>
;;       (inList ?ELEMENT (ListFn @ROW))
;;       (instance ?ELEMENT Class)))

(tell (Predicate partition))
(tell (VariableAritySumorelation partition))
(tell (sumodocumentation partition "A &%partition of a class C is a set of
mutually &%sumodisjoint classes (a subclass partition) which covers C.
Every instance of C is an instance of exactly one of the subclasses
in the partition."))

;; sumo2loom is dropping the following statement because it uses
;; partition, which is a VariableArityRelation:
;; (<=>
;;    (partition @ROW)
;;    (and
;;       (exhaustiveDecomposition @ROW)
;;       (disjointDecomposition @ROW)))

(tell (BinaryPredicate relatedInternalConcept))
(tell (EquivalenceSumorelation relatedInternalConcept))
(tell (sumodocumentation relatedInternalConcept "Means that the two arguments are
related concepts within the SUMO, i.e. there is a significant similarity
of meaning between them.  To indicate a meaning relation between a SUMO
concept and a concept from another source, use the Predicate
&%relatedExternalConcept."))

(tell (TernaryPredicate relatedExternalConcept))
(tell (relatedInternalConcept relatedExternalConcept relatedInternalConcept))
(tell (sumodocumentation relatedExternalConcept "Used to signify a three-place
relation between a concept in an external knowledge source, a concept
in the SUMO, and the name of the other knowledge source."))

(tell (sumodocumentation synonymousExternalConcept "(&%synonymousExternalConcept
?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING has the
same meaning as ?STRING in ?LANGUAGE."))

(tell (sumodocumentation subsumingExternalConcept "(&%subsumingExternalConcept
?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING subsumes
the meaning of ?STRING in ?LANGUAGE, i.e. the concept ?THING is broader
in meaning than ?STRING."))

(tell (sumodocumentation subsumedExternalConcept "(&%subsumedExternalConcept
?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING is subsumed
by the meaning of ?STRING in ?LANGUAGE, i.e. the concept ?THING is narrower
in meaning than ?STRING."))

(tell (BinaryPredicate subAttribute))
(tell (PartialOrderingSumorelation subAttribute))
(tell (sumodocumentation subAttribute "Means that the second argument can be
ascribed to everything which has the first argument ascribed to it."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (<=>
;;    (subAttribute ?ATTR1 ?ATTR2)
;;    (forall (?OBJ)
;;       (=>
;;          (property ?OBJ ?ATTR1)
;;          (property ?OBJ ?ATTR2))))


(tell (BinaryPredicate successorAttribute))
(tell (AsymmetricSumorelation successorAttribute))
(tell (sumodocumentation successorAttribute "(&%successorAttribute ?ATTR1 ?ATTR2)
means that ?ATTR2 is the &%Attribute that comes immediately after ?ATTR1
on the scale that they share."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (successorAttribute ?ATTR1 ?ATTR2)
;;       (holdsDuring ?TIME1 (property ?ENTITY ?ATTR2)))
;;    (exists (?TIME2)
;;       (and
;;          (temporalPart ?TIME2 (PastFn ?TIME1))
;;          (holdsDuring ?TIME2 (property ?ENTITY ?ATTR1)))))

(tell (BinaryPredicate successorAttributeClosure))
(tell (TransitiveSumorelation successorAttributeClosure))
(tell (IrreflexiveSumorelation successorAttributeClosure))
(tell (relatedInternalConcept successorAttributeClosure successorAttribute))
(tell (sumodocumentation successorAttributeClosure "The transitive closure of
&%successorAttribute.  (&%successorAttributeClosure ?ATTR1 ?ATTR2) means
that there is a chain of &%successorAttribute assertions connecting
?ATTR1 and ?ATTR2."))


(tell (LogicalOperator and))
(tell (sumodocumentation and "The truth-functional connective of conjunction."))

(tell (LogicalOperator or))
(tell (sumodocumentation or "The truth-functional connective of disjunction."))

(tell (LogicalOperator =>))
(tell (sumodocumentation => "The truth-functional connective of implication."))

(tell (LogicalOperator <=>))
(tell (sumodocumentation <=> "The truth-functional connective of bi-implication."))

(tell (LogicalOperator not))
(tell (sumodocumentation not "The truth-functional connective of negation."))

(tell (LogicalOperator forall))
(tell (sumodocumentation forall "The universal quantifier of predicate logic."))

(tell (LogicalOperator exists))
(tell (sumodocumentation exists "The existential quantifier of predicate logic."))

(tell (LogicalOperator entails))
(tell (sumodocumentation entails "The operator of logical entailment.  (&%entails
?FORMULA1 ?FORMULA2) means that ?FORMULA2 can be derived from ?FORMULA1
by means of the proof theory of SUO-KIF."))

;; sumo2loom is dropping the following statement because it uses
;; entails, which has Formula in its domain:
;; (=>
;;    (entails ?FORMULA1 ?FORMULA2)
;;    (=> ?FORMULA1 ?FORMULA2))

(tell (Sumofunction AssignmentFn))
(tell (VariableAritySumorelation AssignmentFn))
(tell (sumodocumentation AssignmentFn "If F is a function with a value for the
objects denoted by N1,..., NK, then the term (AssignmentFn F N1 ... NK)
denotes the value of applying F to the objects denoted by N1,..., NK.
Otherwise, the value is undefined."))

(tell (Predicate holds))
(tell (VariableAritySumorelation holds))
(tell (sumodocumentation holds "(holds P N1 ... NK) is true just in case
the tuple of objects denoted by N1,..., NK is an element of
the &%Sumorelation P."))

;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (<=>
;;    (and
;;       (holds ?REL @ROW ?INST)
;;       (instance ?REL Function))
;;    (equal (AssignmentFn ?REL @ROW) ?INST))

;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (=>
;;    (instance ?REL Predicate)
;;    (<=>
;;         (holds ?REL @ROW)
;;         (?REL @ROW)))

(tell (UnarySumofunction PowerSumosetFn))
(tell (sumodocumentation PowerSumosetFn "(&%PowerSumosetFn ?CLASS) maps the &%SumosetOrSumoclass
?CLASS to the &%SumosetOrSumoclass of all &%subclasses of ?CLASS."))


;; END FILE

;; BEGIN FILE


;;;;;;;;;;;;;;;;;;;;;;;
;;   BASE ONTOLOGY   ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; INCLUDES 'STRUCTURAL ONTOLOGY'

;; The following hierarchy incorporates content from Sowa, Russell & Norvig,
;; and the top-level ontology from ITBM-CNR.

(tell (sumodocumentation Entity "The universal class of individuals.  This is the root
node of the ontology."))


;; sumo2loom is dropping the following statement because it
;; wants to be an implication:
;; (exists (?THING) (instance ?THING Entity))


(tell (sumodocumentation Physical "An entity that has a location in space-time.
Note that locations are themselves understood to have a location in
space-time."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(instance ?PHYS Physical)
;; 	(exists (?LOC ?TIME)
;;      		(and
;; 			(located ?PHYS ?LOC)
;;                   (time ?PHYS ?TIME))))

(tell (sumodocumentation Object "Corresponds roughly to the class of ordinary
objects.  Examples include normal physical objects, geographical regions,
and locations of &%Processes, the complement of &%Objects in the &%Physical
class.  In a 4D ontology, an &%Object is something whose spatiotemporal
extent is thought of as dividing into spatial parts roughly parallel to the
time-axis."))

(tell (sumodocumentation SelfConnectedObject "A &%SelfConnectedObject is any
&%Object that does not consist of two or more disconnected parts."))

(tell (SpatialSumorelation FrontFn))
(tell (UnarySumofunction FrontFn))
(tell (AsymmetricSumorelation FrontFn))
(tell (IrreflexiveSumorelation FrontFn))
(tell (sumodocumentation FrontFn "A &%Sumofunction that maps an &%Object to the side
that generally receives the most attention or that typically faces the
direction in which the &%Object moves.  Note that this is a partial
function, since some &%Objects do not have sides, e.g. apples and
spheres.  Note too that the &%sumorange of this &%Sumofunction is indefinite in
much the way that &%ImmediateFutureFn and &%ImmediatePastFn are indefinite.
Although this indefiniteness is undesirable from a theoretical standpoint,
it does not have significant practical implications, since there is
widespread intersubjective agreement about the most common cases."))


(tell (SpatialSumorelation BackFn))
(tell (UnarySumofunction BackFn))
(tell (AsymmetricSumorelation BackFn))
(tell (IrreflexiveSumorelation BackFn))
(tell (sumodocumentation BackFn "A &%Sumofunction that maps an &%Object to the side
that is opposite the &%FrontFn of the &%Object.  Note that this is a
partial function, since some &%Objects do not have sides, e.g. apples
and spheres.  Note too that the &%sumorange of this &%Sumofunction is indefinite in
much the way that &%ImmediateFutureFn and &%ImmediatePastFn are indefinite.
Although this indefiniteness is undesirable from a theoretical standpoint,
it does not have significant practical implications, since there is
widespread intersubjective agreement about the most common cases."))


(tell (SpatialSumorelation part))
(tell (PartialOrderingSumorelation part))
(tell (sumodocumentation part "The basic mereological relation.  All other
mereological relations are defined in terms of this one.
(&%part ?PART ?WHOLE) simply means that the &%Object ?PART is part
of the &%Object ?WHOLE.  Note that, since &%part is a
&%ReflexiveSumorelation, every &%Object is a part of itself."))

(tell (AsymmetricSumorelation properPart))
(tell (TransitiveSumorelation properPart))
(tell (sumodocumentation properPart "(&%properPart ?OBJ1 ?OBJ2) means that
?OBJ1 is a part of ?OBJ2 other than ?OBJ2 itself. This is a
&%TransitiveSumorelation and &%AsymmetricSumorelation (hence an
&%IrreflexiveSumorelation)."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (properPart ?OBJ1 ?OBJ2)
;;       (and
;; 	   (part ?OBJ1 ?OBJ2)
;; 	   (not
;; 	      (part ?OBJ2 ?OBJ1))))

(tell (sumodocumentation piece "A specialized common sense notion of part for
arbitrary parts of &%Substances.  Quasi-synonyms are: chunk, hunk, bit,
etc.  Compare &%component, the other subrelation of &%part."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (piece ?SUBSTANCE1 ?SUBSTANCE2)
;;    (forall (?CLASS)
;;       (=>
;;          (instance ?SUBSTANCE1 ?CLASS)
;;          (instance ?SUBSTANCE2 ?CLASS))))

(tell (sumodocumentation component "A specialized common sense notion of part
for heterogeneous parts of complexes. (&%component ?COMPONENT ?WHOLE)
means that ?COMPONENT is a component of ?WHOLE. Examples of component
include the doors and walls of a house, the states or provinces of a
country, or the limbs and organs of an animal.  Compare &%piece, which
is also a subrelation of &%part."))

(tell (BinaryPredicate material))
(tell (sumodocumentation material "(&%material ?SUBSTANCE ?OBJECT) means that
?OBJECT is structurally made up in part of ?SUBSTANCE. This relation
encompasses the concepts of 'composed of', 'made of', and 'formed of'.
For example, plastic is a &%material of my computer monitor.  Compare
&%part and its subrelations, viz &%component and &%piece."))

(tell (sumodocumentation Substance "An &%Object in which every part is similar to
every other in every relevant respect.  More precisely, something is a
&%Substance when it has only arbitrary pieces as parts - any parts have
properties which are similar to those of the whole.  Note that a &%Substance
may nonetheless have physical properties that vary.  For example, the
temperature, chemical constitution, density, etc. may change from one part
to another.  An example would be a body of water."))



(tell (sumodocumentation PureSubstance "The &%Sumoclass of &%Substances with constant
composition.  A &%PureSubstance can be either an element (&%ElementalSubstance)
or a compound of elements (&%CompoundSubstance).  Examples: Table salt
(sodium chloride, NaCl), sugar (sucrose, C_{12}H_{22}O_{11}), water (H_2O),
iron (Fe), copper (Cu), and oxygen (O_2)."))

(tell (sumodocumentation ElementalSubstance "The &%Sumoclass of &%PureSubstances that
cannot be separated into two or more &%Substances by ordinary chemical
(or physical) means. This excludes nuclear reactions. &%ElementalSubstances
are composed of only one kind of atom. Examples: Iron (Fe), copper (Cu),
and oxygen (O_2).  &%ElementalSubstances are the simplest
&%PureSubstances."))

(tell (sumodocumentation Metal "A &%Metal is an &%ElementalSubstance that conducts heat
and electricity, is shiny and reflects many colors of light, and can be hammered
into sheets or drawn into wire.  About 80% of the known chemical elements
(&%ElementalSubstances) are metals."))

(tell (sumodocumentation Atom "An extremely small unit of matter that retains its
identity in Chemical reactions.  It consists of an &%AtomicNucleus and
&%Electrons surrounding the &%AtomicNucleus."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?ATOM Atom)
;;    (exists (?PROTON ?ELECTRON)
;;       (and
;;          (component ?PROTON ?ATOM)
;; 	   (component ?ELECTRON ?ATOM)
;;          (instance ?PROTON Proton)
;;          (instance ?ELECTRON Electron))))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?ATOM Atom)
;;    (forall (?NUCLEUS1 ?NUCLEUS2)
;;       (=>
;;          (and
;;             (component ?NUCLEUS1 ?ATOM)
;; 	      (component ?NUCLEUS2 ?ATOM)
;;             (instance ?NUCLEUS1 AtomicNucleus)
;;             (instance ?NUCLEUS2 AtomicNucleus))
;; 	   (equal ?NUCLEUS1 ?NUCLEUS2))))

(tell (sumodocumentation SubatomicParticle "The class of &%ElementalSubstances that
are smaller than &%Atoms and compose &%Atoms."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?PARTICLE SubatomicParticle)
;;    (exists (?ATOM)
;;       (and
;;          (instance ?ATOM Atom)
;;          (part ?PARTICLE ?ATOM))))

(tell (sumodocumentation AtomicNucleus "The core of the &%Atom.  It is composed of
&%Protons and &%Neutrons."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?NUCLEUS AtomicNucleus)
;;    (exists (?NEUTRON ?PROTON)
;;       (and
;;          (component ?NEUTRON ?NUCLEUS)
;; 	   (component ?PROTON ?NUCLEUS)
;;          (instance ?NEUTRON Neutron)
;;          (instance ?PROTON Proton))))

(tell (sumodocumentation Electron "&%SubatomicParticles that surround the
&%AtomicNucleus.  They have a negative charge."))

(tell (sumodocumentation Proton "Components of the &%AtomicNucleus.  They have a
positive charge."))

(tell (sumodocumentation Neutron "Components of the &%AtomicNucleus.  They have no
charge."))

(tell (sumodocumentation CompoundSubstance "The &%Sumoclass of &%Substances that contain
two or more elements (&%ElementalSubstances), in definite proportion by weight.
The composition of a pure compound will be invariant, regardless of the method
of preparation. Compounds are composed of more than one kind of atom (element).
The term molecule is often used for the smallest unit of a compound that still
retains all of the properties of the compound.  Examples: Table salt (sodium
chloride, NaCl), sugar (sucrose, C_{12}H_{22}O_{11}), and water (H_2O). "))

(tell (sumodocumentation Mixture "A &%Mixture is two or more &%PureSubstances,
combined in varying proportions - each retaining its own specific properties.
The components of a &%Mixture can be separated by physical means, i.e. without
the making and breaking of chemical bonds. Examples: Air, table salt thoroughly
dissolved in water, milk, wood, and concrete. "))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?MIXTURE Mixture)
;;    (exists (?PURE1 ?PURE2)
;;       (and
;;          (subclass ?PURE1 PureSubstance)
;;          (subclass ?PURE2 PureSubstance)
;;          (not (equal ?PURE1 ?PURE2))
;;          (piece ?PURE1 ?MIXTURE)
;;          (piece ?PURE2 ?MIXTURE))))

(tell (sumodocumentation Solution "A liquid mixture. The most abundant component in
a solution is called the solvent. Other components are called solutes.
A solution, though homogeneous, may nonetheless have variable composition.
Any amount of salt, up to a maximum limit, can be dissolved in a given
amount of water."))

(tell (sumodocumentation CorpuscularObject "A &%SelfConnectedObject whose parts have
properties that are not shared by the whole."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?OBJ CorpuscularObject)
;;    (exists (?SUBSTANCE1 ?SUBSTANCE2)
;;       (and
;;          (subclass ?SUBSTANCE1 Substance)
;;          (subclass ?SUBSTANCE2 Substance)
;;          (material ?SUBSTANCE1 ?OBJ)
;;          (material ?SUBSTANCE2 ?OBJ)
;;          (not (equal ?SUBSTANCE1 ?SUBSTANCE2)))))

(tell (sumodocumentation Region "A topographic location.  &%Regions encompass
surfaces of &%Objects, imaginary places, and &%GeographicAreas.  Note
that a &%Region is the only kind of &%Object which can be located at
itself.  Note too that &%Region is not a subclass of &%SelfConnectedObject,
because some &%Regions, e.g. archipelagos, have &%parts which are not
&%connected with one another."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?REGION Region)
;;    (exists (?PHYS)
;;       (located ?PHYS ?REGION)))

(tell (sumodocumentation Sumocollection "Sumocollections have &%members like &%Sumoclasses, but,
unlike &%Sumoclasses, they have a position in space-time and &%members can be
added and subtracted without thereby changing the identity of the
&%Sumocollection.  Some examples are toolkits, football teams, and flocks
of sheep."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?COLL Collection)
;;    (exists (?OBJ)
;; 	(member ?OBJ ?COLL)))

(tell (AsymmetricSumorelation member))
(tell (IntransitiveSumorelation member))
(tell (relatedInternalConcept member instance))
(tell (relatedInternalConcept member element))
(tell (sumodocumentation member "A specialized common sense notion of part for
uniform parts of &%Sumocollections.  For example, each sheep in a flock of
sheep would have the relationship of member to the flock."))

(tell (BinaryPredicate subSumocollection))
(tell (TransitiveSumorelation subSumocollection))
(tell (IrreflexiveSumorelation subSumocollection))
(tell (sumodocumentation subSumocollection "(&%subSumocollection ?COLL1 ?COLL2) means that
the &%Sumocollection ?COLL1 is a proper part of the &%Sumocollection ?COLL2."))

(tell (relatedInternalConcept ContentBearingObject containsInformation))
(tell (sumodocumentation ContentBearingObject "Any &%SelfConnectedObject that expresses
information."))

(tell (sumodocumentation SymbolicString "The &%Sumoclass of alphanumeric sequences."))

(tell (sumodocumentation Sumocharacter "An element of an alphabet, a set of numerals, etc.
Note that a &%Sumocharacter may or may not be part of a &%Language.  &%Sumocharacter
is a subclass of &%SymbolicString, because every instance of &%Sumocharacter is
an alphanumeric sequence consisting of a single element."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;     (instance ?STRING SymbolicString)
;;     (exists (?PART)
;;         (and
;;             (part ?PART ?STRING)
;;             (instance ?PART Character))))

(tell (BinaryPredicate containsInformation))
(tell (AsymmetricSumorelation containsInformation))
(tell (sumodocumentation containsInformation "A subrelation of &%represents.  This
predicate relates a &%ContentBearingObject to the &%Sumoproposition that is
expressed by the &%ContentBearingObject. Examples include the relationships
between a physical novel and its story and between a printed score and its
musical content."))

(tell (sumodocumentation Icon "This is the subclass of &%ContentBearingObjects
which are not part of a &%Language and which have some sort of similarity
with the &%Objects that they represent.  This &%Sumoclass would include symbolic
roadway signs, 'icons' in a graphical computer operating system, etc."))

(tell (sumodocumentation MotionPicture "A &%ContentBearingObject which depicts motion
(and which may have an audio or text component as well).  This &%Sumoclass covers
films, videos, etc."))

(tell (sumodocumentation LinguisticExpression "This is the subclass of
&%ContentBearingObjects which are language-related.  Note that this &%Sumoclass
encompasses both &%Language and the the elements of &%Languages,
e.g. &%Words."))

(tell (sumodocumentation Language "A system of signs for expressing thought.  The
system can be either natural or artificial, i.e. something that emerges
gradually as a cultural artifact or something that is intentionally created
by a person or group of people."))

(tell (sumodocumentation AnimalLanguage "The &%subclass of &%Languages used by
&%Animals other than &%Humans."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?LANG AnimalLanguage)
;;       (agent ?PROC ?AGENT)
;;       (instrument ?PROC ?LANG))
;;    (and
;;       (instance ?AGENT Animal)
;;       (not (instance ?AGENT Human))))

(tell (sumodocumentation ArtificialLanguage "The &%subclass of &%Languages that are
designed by &%Humans."))

(tell (sumodocumentation ComputerLanguage "The class of &%Languages designed for
and interpreted by a computer."))


(tell (sumodocumentation HumanLanguage "The &%subclass of &%Languages used by
&%Humans."))


(tell (sumodocumentation ConstructedLanguage "The &%subclass of &%HumanLanguages
that did not originate diachronically, but were designed by a &%Human.
This &%Sumoclass includes languages like Esperanto that were created to
facilitate international communication."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?LANG ConstructedLanguage)
;;    (exists (?PLAN)
;;       (and
;;          (instance ?PLAN Planning)
;;          (result ?PLAN ?LANG))))

(tell (sumodocumentation NaturalLanguage "The &%subclass of &%HumanLanguages which
are not designed and which evolve from generation to generation.  This
&%Sumoclass includes all of the national languages, e.g. English, Spanish,
Japanese, etc.  Note that this class includes dialects of natural
languages."))

(tell (sumodocumentation Word "A term of a &%Language that represents a concept."))

(tell (sumodocumentation Formula "A syntactically well-formed formula in the
SUO-KIF knowledge representation language."))

;; The following ground facts incorporate the 'Agent' hierarchy from the
;; corresponding ontology on the Ontolingua server.  It also includes
;; predicates defined in the ITBM-CNR ontology "Actors".

(tell (sumodocumentation Agent "Something or someone that can act on its own and
produce changes in the world."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(instance ?AGENT Agent)
;; 	(exists (?PROC)
;; 		(agent ?PROC ?AGENT)))

(tell (sumodocumentation SentientAgent "An &%Agent that has rights but may or may
not have responsibilities and the ability to reason.  If the latter are
present, then the &%Agent is also an instance of &%CognitiveAgent.
Domesticated animals are an example of &%SentientAgents that are not
also &%CognitiveAgents."))

(tell (sumodocumentation CognitiveAgent "A &%SentientAgent with responsibilities
and the ability to reason, deliberate, make plans, etc.  This is
essentially the legal/ethical notion of a person.  Note that, although
&%Human is a subclass of &%CognitiveAgent, there may be instances of
&%CognitiveAgent which are not also instances of &%Human.  For example,
chimpanzees, gorillas, dolphins, whales, and some extraterrestrials
(if they exist) may be &%CognitiveAgents."))

(tell (sumodocumentation Process "Intuitively, the class of things that happen
and have temporal parts or stages.  Examples include extended events
like a football match or a race, actions like &%Searching and &%Reading,
and biological processes. The formal definition is: anything that lasts
for a time but is not an &%Object.  Note that a &%Process may have
participants 'inside' it which are &%Objects, such as the players
in a football match.  In a 4D ontology, a &%Process is something whose
spatiotemporal extent is thought of as dividing into temporal stages
roughly perpendicular to the time-axis."))

(tell (sumodocumentation DualObjectProcess "Any &%Process that requires two,
nonidentical &%patients."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?PROCESS DualObjectProcess)
;;    (exists (?OBJ1 ?OBJ2)
;;       (and
;;          (patient ?PROCESS ?OBJ1)
;;          (patient ?PROCESS ?OBJ2)
;;          (not (equal ?OBJ1 ?OBJ2)))))

(tell (sumodocumentation Abstract "Properties or qualities as distinguished from any
particular embodiment of the properties/qualities in a physical medium.
Instances of Abstract can be said to exist in the same sense as mathematical
objects such as sets and relations, but they cannot exist at a particular
place and time without some physical encoding or embodiment."))

;; Something is Abstract just in case it has neither a spatial nor temporal
;; location.

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (instance ?ABS Abstract)
;;    (not
;;       (exists (?POINT)
;;          (or
;; 	      (located ?ABS ?POINT)
;;             (time ?ABS ?POINT)))))

(tell (sumodocumentation Quantity "Any specification of how many or how much of
something there is.  Accordingly, there are two subclasses of &%Quantity:
&%Sumonumber (how many) and &%PhysicalQuantity (how much)."))

(tell (sumodocumentation Attribute "Qualities which we cannot or choose not to
reify into subclasses of &%Object."))

(tell (BinaryPredicate sumoproperty))
(tell (sumodocumentation sumoproperty "This &%Predicate holds between an instance of
&%Entity and an instance of &%Attribute.  (sumoproperty ?ENTITY ?ATTR)
means that ?ENTITY has the &%Attribute ?ATTR."))

(tell (AsymmetricSumorelation attribute-rel))
(tell (IrreflexiveSumorelation attribute-rel))
(tell (sumodocumentation attribute-rel "(&%attribute-rel ?OBJECT ?PROPERTY) means that
?PROPERTY is a &%Attribute of ?OBJECT.  For example,
(&%attribute-rel &%MyLittleRedWagon &%Red)."))

(tell (AsymmetricSumorelation manner))
(tell (IrreflexiveSumorelation manner))
(tell (sumodocumentation manner "(&%manner ?PROCESS ?MANNER) means that the
&%Process ?PROCESS is qualified by the &%Attribute ?MANNER.  The &%Attributes
of &%Processes are usually denoted by adverbs and include things like the
speed of the wind, the style of a dance, or the intensity of a sports
competition."))

(tell (UnarySumofunction AbstractionFn))
(tell (sumodocumentation AbstractionFn "A &%UnarySumofunction that maps a &%Sumoclass into
the instance of &%Attribute that specifies the condition(s) for membership
in the &%Sumoclass."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (<=>
;;    (equal (AbstractionFn ?CLASS) ?ATTR)
;;    (forall (?INST)
;;       (<=>
;;          (instance ?INST ?CLASS)
;;          (property ?INST ?ATTR))))

(tell (UnarySumofunction ExtensionFn))
(tell (sumodocumentation ExtensionFn "A &%UnarySumofunction that maps an &%Attribute
into the &%Sumoclass whose condition for membership is the &%Attribute."))


(tell (sumodocumentation InternalAttribute "Any &%Attribute of an &%Entity that is an
internal sumoproperty of the &%Entity, e.g. its shape, its color, its fragility,
etc."))

(tell (sumodocumentation SumorelationalAttribute "Any &%Attribute that an &%Entity has by
virtue of a relationship that it bears to another &%Entity or set of &%Entities,
e.g. &%SocialRoles and &%PositionalAttributes."))

;; The following formulas incorporate the Number hierarchy from the
;; ontology 'kif-numbers' on the Ontolingua server.

(tell (sumodocumentation Sumonumber "A measure of how many things there are, or how
much there is, of a certain kind.  &%Sumonumbers are subclassed into
&%RealSumonumber, &%ComplexSumonumber, and &%ImaginarySumonumber."))

(tell (BinaryPredicate lessThan))
(tell (TransitiveSumorelation lessThan))
(tell (IrreflexiveSumorelation lessThan))
(tell (SumorelationExtendedToQuantities lessThan))
(tell (trichotomizingOn lessThan RealSumonumber))
(tell (sumodocumentation lessThan "(&%lessThan ?NUMBER1 ?NUMBER2) is true just
in case the &%Quantity ?NUMBER1 is less than the &%Quantity ?NUMBER2."))

(tell (BinaryPredicate greaterThan))
(tell (TransitiveSumorelation greaterThan))
(tell (IrreflexiveSumorelation greaterThan))
(tell (SumorelationExtendedToQuantities greaterThan))
(tell (trichotomizingOn greaterThan RealSumonumber))
(tell (sumodocumentation greaterThan "(&%greaterThan ?NUMBER1 ?NUMBER2) is true
just in case the &%Quantity ?NUMBER1 is greater than the &%Quantity
?NUMBER2."))

(tell (BinaryPredicate lessThanOrEqualTo))
(tell (PartialOrderingSumorelation lessThanOrEqualTo))
(tell (SumorelationExtendedToQuantities lessThanOrEqualTo))
(tell (trichotomizingOn lessThanOrEqualTo RealSumonumber))
(tell (sumodocumentation lessThanOrEqualTo "(&%lessThanOrEqualTo ?NUMBER1 ?NUMBER2)
is true just in case the &%Quantity ?NUMBER1 is less than or equal to
the &%Quantity ?NUMBER2."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(lessThanOrEqualTo ?NUMBER1 ?NUMBER2)
;; 	(or
;; 		(equal ?NUMBER1 ?NUMBER2)
;; 		(lessThan ?NUMBER1 ?NUMBER2)))

(tell (BinaryPredicate greaterThanOrEqualTo))
(tell (PartialOrderingSumorelation greaterThanOrEqualTo))
(tell (SumorelationExtendedToQuantities greaterThanOrEqualTo))
(tell (trichotomizingOn greaterThanOrEqualTo RealSumonumber))
(tell (sumodocumentation greaterThanOrEqualTo "(&%greaterThanOrEqualTo ?NUMBER1
?NUMBER2) is true just in case the &%Quantity ?NUMBER1 is greater
than the &%Quantity ?NUMBER2."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(greaterThanOrEqualTo ?NUMBER1 ?NUMBER2)
;; 	(or
;; 		(equal ?NUMBER1 ?NUMBER2)
;; 		(greaterThan ?NUMBER1 ?NUMBER2)))

(tell (sumodocumentation RealSumonumber "Any &%Sumonumber that can be expressed as a
(possibly infinite) decimal, i.e. any &%Sumonumber that has a position
on the number line."))

(tell (sumodocumentation ImaginarySumonumber "Any &%Sumonumber that is the result of
multiplying a &%RealSumonumber by the square root of -1."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?NUMBER ImaginaryNumber)
;;    (exists (?REAL)
;;       (and
;;          (instance ?REAL RealNumber)
;;          (equal ?NUMBER (MultiplicationFn ?REAL (SquareRootFn -1))))))

(tell (sumodocumentation RationalSumonumber "Any &%RealSumonumber that is the product of
dividing two &%Sumointegers."))

(tell (sumodocumentation IrrationalSumonumber "Any &%RealSumonumber that is not also a
&%RationalSumonumber."))

(tell (sumodocumentation NonnegativeRealSumonumber "A &%RealSumonumber that is greater than
or equal to zero."))


(tell (sumodocumentation PositiveRealSumonumber "A &%RealSumonumber that is greater than
zero."))


(tell (sumodocumentation NegativeRealSumonumber "A &%RealSumonumber that is less than
zero."))


(tell (sumodocumentation Sumointeger "A negative or nonnegative whole number."))

(tell (sumodocumentation EvenSumointeger "An &%Sumointeger that is evenly divisible
by 2."))

(tell (sumodocumentation OddSumointeger "An &%Sumointeger that is not evenly divisible
by 2."))

(tell (sumodocumentation PrimeSumonumber "An &%Sumointeger that is evenly divisible only
by itself and 1."))

(tell (sumodocumentation NonnegativeSumointeger "An &%Sumointeger that is greater than
or equal to zero."))

(tell (sumodocumentation NegativeSumointeger "An &%Sumointeger that is less than zero."))

(tell (sumodocumentation PositiveSumointeger "An &%Sumointeger that is greater than zero."))

(tell (sumodocumentation BinarySumonumber "Elements from the number system with base 2.
Every &%BinarySumonumber is expressed as a sequence of the digits 1 and 0."))

(tell (sumodocumentation ComplexSumonumber "A &%Sumonumber that has the form: x + yi, where x
and y are &%RealSumonumbers and i is the square root of -1."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?NUMBER ComplexNumber)
;;    (exists (?REAL1 ?REAL2)
;;       (and
;;          (instance ?REAL1 RealNumber)
;;          (instance ?REAL2 RealNumber)
;;          (equal ?NUMBER (AdditionFn ?REAL1 (MultiplicationFn ?REAL2 (SquareRootFn -1)))))))

(tell (sumodocumentation PhysicalQuantity "&%A PhysicalQuantity is a measure of
some quantifiable aspect of the modeled world, such as 'the earth's
diameter' (a constant length) and 'the stress in a loaded deformable
solid' (a measure of stress, which is a function of three spatial
coordinates).  All &%PhysicalQuantities are either &%ConstantQuantities
or &%SumofunctionQuantities.  Instances of &%ConstantQuantity are dependent
on a &%UnitOfMeasure, while instances of &%SumofunctionQuantity are
&%Sumofunctions that map instances of &%ConstantQuantity to other instances
of &%ConstantQuantity (e.g., &%TimeDependentQuantities are
&%SumofunctionQuantities).  Although the name and definition of
&%PhysicalQuantity is borrowed from physics, &%PhysicalQuantities need
not be material.  Aside from the dimensions of length, time, velocity,
etc., nonphysical dimensions such as currency are also possible.
Accordingly, amounts of money would be instances of &%PhysicalQuantity.
&%PhysicalQuantities are distinguished from &%Sumonumbers by the fact that
the former are associated with a dimension of measurement."))

(tell (sumodocumentation ConstantQuantity "A &%ConstantQuantity is a
&%PhysicalQuantity which has a constant value, e.g. 3 meters and 5 hours.
The magnitude (see &%MagnitudeFn) of every &%ConstantQuantity is a
&%RealSumonumber.  &%ConstantQuantities are distinguished from
&%SumofunctionQuantities, which map &%ConstantQuantities to other
&%ConstantQuantities.  All &%ConstantQuantites are expressed with the
&%BinarySumofunction &%MeasureFn, which takes a &%Sumonumber and a &%UnitOfMeasure
as arguments.  For example, 3 &%Meters can be expressed as (&%MeasureFn 3
&%Meter).  &%ConstantQuantities form a partial order (see
&%PartialOrderingSumorelation) with the &%lessThan relation, since &%lessThan
is a &%SumorelationExtendedToQuantities and &%lessThan is defined over the
&%RealSumonumbers.  The &%lessThan relation is not a total order (see
&%TotalOrderingSumorelation) over the class &%ConstantQuantity since elements
of some subclasses of &%ConstantQuantity (such as length quantities)
are incomparable to elements of other subclasses of &%ConstantQuantity
(such as mass quantities)."))

(tell (sumodocumentation TimeMeasure "The class of temporal durations (instances
of &%TimeDuration) and positions of &%TimePoints and &%TimeIntervals along
the universal timeline (instances of &%TimePosition)."))

(tell (sumodocumentation TimeDuration "Any measure of length of time,
with or without respect to the universal timeline."))

(tell (sumodocumentation TimePosition "Any &%TimePoint or &%TimeInterval
along the universal timeline from &%NegativeInfinity to
&%PositiveInfinity."))

(tell (sumodocumentation TimeInterval "An interval of time.  Note that a
&%TimeInterval has both an extent and a location on the universal
timeline.  Note too that a &%TimeInterval has no gaps, i.e. this
class contains only convex time intervals."))

(tell (sumodocumentation TimePoint "An extensionless point on the universal timeline.
The &%TimePoints at which &%Processes occur can be known with various
degrees of precision and approximation, but conceptually &%TimePoints are
point-like and not interval-like.  That is, it doesn't make sense to talk
about what happens during a &%TimePoint, or how long the &%TimePoint lasts."))

(tell (sumodocumentation SumofunctionQuantity "A &%SumofunctionQuantity is a &%Sumofunction that
maps from one or more instances of &%ConstantQuantity to another instance
of &%ConstantQuantity.  For example, the velocity of a particle would be
represented by a &%SumofunctionQuantity mapping values of time (which are
&%ConstantQuantities) to values of distance (also &%ConstantQuantities).
Note that all instances of &%SumofunctionQuantity are &%Sumofunctions with a fixed
arity.  Note too that all elements of the sumorange of a &%SumofunctionQuantity
have the same physical dimension as the &%SumofunctionQuantity itself."))

(tell (sumodocumentation UnaryConstantSumofunctionQuantity "The class of &%UnarySumofunctions
that map from the &%Sumoclass &%ConstantQuantity to the &%Sumoclass
&%ConstantQuantity."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?FUNCTION UnaryConstantFunctionQuantity)
;;    (and
;;       (domain ?FUNCTION 1 ConstantQuantity)
;;       (range ?FUNCTION ConstantQuantity)))

(tell (sumodocumentation TimeDependentQuantity "A &%UnaryConstantSumofunction of continuous
time.  All instances of this &%Sumoclass map a time quantity into another
&%ConstantQuantity such as temperature.  For example, 'the temperature at
the top of the Empire State Building' is a &%TimeDependentQuantity since
its value depends on the time."))


(tell (sumodocumentation SumosetOrSumoclass "The &%SumosetOrSumoclass of &%Sumosets and &%Sumoclasses, i.e. any instance
of &%Abstract that has &%elements or &%instances."))

(tell (sumodocumentation Sumoclass "&%Sumoclasses differ from &%Sumosets in two important respects.
First, &%Sumoclasses are not assumed to be extensional.  That is, distinct
&%Sumoclasses might well have exactly the same instances.  Second, &%Sumoclasses typically
have an associated `condition' that determines the instances of the &%Sumoclass.  So,
for example, the condition `human' determines the &%Sumoclass of &%Humans.  Note that
some &%Sumoclasses might satisfy their own condition (e.g., the &%Sumoclass of &%Abstract
things is &%Abstract) and hence be instances of themselves."))

(tell (sumodocumentation Sumoset "A &%SumosetOrSumoclass that satisfies extensionality as well as
other constraints specified by some choice of set theory.  &%Sumosets differ
from &%Sumoclasses in two important respects.  First, &%Sumosets are extensional -
two &%Sumosets with the same &%elements are identical.  Second, a &%Sumoset can be
an arbitrary stock of objects.  That is, there is no requirement that &%Sumosets
have an associated condition that determines their membership."))

(tell (sumodocumentation Sumorelation "The &%Sumoclass of relations.  There are three kinds
of &%Sumorelation:  &%Predicate, &%Sumofunction, and &%Sumolist.  &%Predicates and
&%Sumofunctions both denote sets of ordered n-tuples.  The difference between
these two &%Sumoclasses is that &%Predicates cover formula-forming operators, while
&%Sumofunctions cover term-forming operators.  A &%Sumolist, on the other hand, is a
particular ordered n-tuple."))

;; The following part of the ontology covers the various classes under
;; 'Relation'.  Most of the content here is taken from frame-ontology,
;; abstract-algebra, kif-relations, and kif-extensions (ontologies
;; available on the Ontolingua server).

(tell (InheritableSumorelation SingleValuedSumorelation))
(tell (sumodocumentation SingleValuedSumorelation "A &%Sumorelation is a &%SingleValuedSumorelation
just in case an assignment of values to every argument position except the last
one determines at most one assignment for the last argument position.  Note
that not all &%SingleValuedSumorelations are total functions.  To declare that a
&%Sumorelation is a total function, use both &%SingleValuedSumofunction and
&%TotalValuedSumofunction."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (<=>
;;    (instance ?REL SingleValuedRelation)
;;    (forall (@ROW ?ITEM1 ?ITEM2)
;;       (=>
;;          (and
;;             (holds ?REL @ROW ?ITEM1)
;;             (holds ?REL @ROW ?ITEM2))
;;          (equal ?ITEM1 ?ITEM2))))

(tell (sumodocumentation TotalValuedSumorelation "A &%Sumorelation is a &%TotalValuedSumorelation
just in case there exists an assignment for the last argument position of the
&%Sumorelation given any assignment of values to every argument position except
the last one.  Note that declaring a &%Sumorelation to be both a &%TotalValuedSumorelation
and a &%SingleValuedSumorelation means that it is a total function."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (<=>
;;    (instance ?REL TotalValuedRelation)
;;    (forall (?VALENCE @ROW)
;;       (=>
;;          (and
;;             (valence ?REL ?VALENCE)
;;             (forall (?NUMBER ?ELEMENT ?CLASS)
;;                (=>
;;                   (and
;;                      (lessThan ?NUMBER ?VALENCE)
;;                      (domain ?REL ?NUMBER ?CLASS)
;;                      (equal ?ELEMENT (ListOrderFn (ListFn @ROW) ?NUMBER)))
;;                   (instance ?ELEMENT ?CLASS))))
;;          (exists (?ITEM)
;;             (holds ?REL @ROW ?ITEM)))))

(tell (sumodocumentation PartialValuedSumorelation "A &%Sumorelation is a &%PartialValuedSumorelation
just in case it is not a &%TotalValuedSumorelation, i.e. just in case assigning values
to every argument position except the last one does not necessarily mean that there
is a value assignment for the last argument position.  Note that, if a &%Sumorelation
is both a &%PartialValuedSumorelation and a &%SingleValuedSumorelation, then it is a partial
function."))

(tell (InheritableSumorelation BinarySumorelation))
(tell (sumodocumentation BinarySumorelation "&%BinarySumorelations are relations that are
true only of pairs of things.  &%BinarySumorelations are represented as slots
in frame systems."))

;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (=>
;;    (instance ?REL BinaryRelation)
;;    (not
;;       (exists (?ITEM1 ?ITEM2 ?ITEM3 @ROW)
;;          (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 @ROW))))

(tell (sumodocumentation ReflexiveSumorelation "&%Sumorelation ?REL is reflexive if
(?REL ?INST ?INST) for all ?INST."))

;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (=>
;;    (instance ?REL ReflexiveRelation)
;;    (=>
;;       (or
;;          (instance ?INST (DomainFn ?REL))
;;  	   (instance ?INST (RangeFn ?REL)))
;;       (holds ?REL ?INST ?INST)))

(tell (sumodocumentation IrreflexiveSumorelation "&%Sumorelation ?REL is irreflexive
if (?REL ?INST ?INST) holds for no value of ?INST."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?REL IrreflexiveRelation)
;;    (forall (?INST)
;;       (not
;;          (holds ?REL ?INST ?INST))))

(tell (sumodocumentation SymmetricSumorelation "A &%BinarySumorelation ?REL is
symmetric just in case (?REL ?INST1 ?INST2) imples (?REL
?INST2 ?INST1), for all ?INST1 and ?INST2."))


;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?REL SymmetricRelation)
;;    (forall (?INST1 ?INST2)
;;       (=>
;;          (holds ?REL ?INST1 ?INST2)
;;          (holds ?REL ?INST2 ?INST1))))

(tell (sumodocumentation AsymmetricSumorelation "A &%BinarySumorelation is asymmetric only
if it is both an &%AntisymmetricSumorelation and an &%IrreflexiveSumorelation."))


(tell (sumodocumentation AntisymmetricSumorelation "&%BinarySumorelation ?REL is an
&%AntisymmetricSumorelation if for distinct ?INST1 and ?INST2, (?REL ?INST1
?INST2) implies not (?REL ?INST2 ?INST1).  In other words, for all ?INST1
and ?INST2, (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST1) imply that ?INST1
and ?INST2 are identical.  Note that it is possible for an
&%AntisymmetricSumorelation to be a &%ReflexiveSumorelation."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?REL AntisymmetricRelation)
;;    (forall (?INST1 ?INST2)
;;       (=>
;;          (and
;;             (holds ?REL ?INST1 ?INST2)
;;             (holds ?REL ?INST2 ?INST1))
;;          (equal ?INST1 ?INST2))))

(tell (sumodocumentation TrichotomizingSumorelation "A &%BinarySumorelation ?REL is a
&%TrichotomizingSumorelation just in case all ordered pairs consisting of
distinct individuals are elements of ?REL."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?REL TrichotomizingRelation)
;;    (forall (?INST1 ?INST2)
;;       (or
;;          (holds ?REL ?INST1 ?INST2)
;;          (equal ?INST1 ?INST2)
;;          (holds ?REL ?INST2 ?INST1))))

(tell (sumodocumentation TransitiveSumorelation "A &%BinarySumorelation ?REL is transitive
if (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST3) imply (?REL ?INST1 ?INST3),
for all ?INST1, ?INST2, and ?INST3."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?REL TransitiveRelation)
;;    (forall (?INST1 ?INST2 ?INST3)
;;       (=>
;;          (and
;;             (holds ?REL ?INST1 ?INST2)
;;             (holds ?REL ?INST2 ?INST3))
;;          (holds ?REL ?INST1 ?INST3))))

(tell (sumodocumentation IntransitiveSumorelation "A &%BinarySumorelation ?REL is
intransitive only if (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST3) imply not
(?REL ?INST1 ?INST3), for all ?INST1, ?INST2, and ?INST3."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?REL IntransitiveRelation)
;;    (forall (?INST1 ?INST2 ?INST3)
;;       (=>
;;          (and
;;             (holds ?REL ?INST1 ?INST2)
;;             (holds ?REL ?INST2 ?INST3))
;;          (not
;;             (holds ?REL ?INST1 ?INST3)))))

(tell (sumodocumentation PartialOrderingSumorelation "A &%BinarySumorelation is a partial
ordering if it is a &%ReflexiveSumorelation, an &%AntisymmetricSumorelation, and
a &%TransitiveSumorelation."))

(tell (sumodocumentation TotalOrderingSumorelation  "A &%BinarySumorelation is a
&%TotalOrderingSumorelation if it is a &%PartialOrderingSumorelation
and a &%TrichotomizingSumorelation."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?REL TotalOrderingRelation)
;;    (forall (?INST1 ?INST2)
;;       (or
;;          (holds ?REL ?INST1 ?INST2)
;;          (holds ?REL ?INST2 ?INST1))))

(tell (sumodocumentation EquivalenceSumorelation "A &%BinarySumorelation is an equivalence
relation if it is a &%ReflexiveSumorelation, a &%SymmetricSumorelation, and a
&%TransitiveSumorelation."))

(tell (InheritableSumorelation CaseRole))
(tell (sumodocumentation CaseRole "The &%Sumoclass of &%Predicates relating the
spatially distinguished parts of a &%Process. &%CaseRoles include, for
example, the &%agent-rel, &%patient or &%destination of an action, the flammable
substance in a burning process, or the water that falls in rain."))

(tell (CaseRole agent-rel))
(tell (sumodocumentation agent-rel "(&%agent-rel ?PROCESS ?AGENT) means that ?AGENT is
an active determinant, either animate or inanimate, of the &%Process
?PROCESS, with or without voluntary intention.  For example, water is
the &%agent-rel of erosion in the following proposition:  the water
eroded the coastline.  For another example, Eve is an &%agent-rel in the
following proposition: Eve bit an apple."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?PROCESS Process)
;;    (exists (?CAUSE)
;;       (agent ?PROCESS ?CAUSE)))

(tell (CaseRole destination))
(tell (sumodocumentation destination "(destination ?PROCESS ?GOAL) means that
?GOAL is the target or goal of the Process ?PROCESS.  For example,
Danbury would be the destination in the following proposition:  Bob went
to Danbury.  Note that this is a very general &%CaseRole and, in
particular, that it covers the concepts of 'recipient' and 'beneficiary'.
Thus, John would be the &%destination in the following proposition:
Tom gave a book to John."))

(tell (CaseRole experiencer))
(tell (sumodocumentation experiencer "(&%experiencer ?PROCESS ?AGENT) means
that ?AGENT experiences the &%Process ?PROCESS.  For example, Yojo
is the &%experiencer of seeing in the following proposition:  Yojo
sees the fish.  Note that &%experiencer, unlike &%agent-rel, does
not entail a causal relation between its arguments."))

(tell (sumodocumentation instrument "(instrument ?EVENT ?TOOL) means that ?TOOL
is used by an agent-rel in bringing about ?EVENT and that ?TOOL is not
changed by ?EVENT.  For example, the key is an &%instrument in the
following proposition: The key opened the door.  Note that &%instrument
and &%resource cannot be satisfied by the same ordered pair."))

(tell (CaseRole origin))
(tell (sumodocumentation origin "(&%origin ?PROCESS ?SOURCE) means that ?SOURCE
indicates where the ?Process began.  Note that this relation implies
that ?SOURCE is present at the beginning of the process, but need not
participate throughout the process.  For example, the submarine is the
&%origin in the following proposition: the missile was launched from a
submarine."))

(tell (CaseRole patient))
(tell (sumodocumentation patient "(&%patient ?PROCESS ?ENTITY) means that ?ENTITY
is a participant in ?PROCESS that may be moved, said, experienced, etc.
For example, the direct objects in the sentences 'The cat swallowed the
canary' and 'Billy likes the beer' would be examples of &%patients.  Note
that the &%patient of a &%Process may or may not undergo structural
change as a result of the &%Process.  The &%CaseRole of &%patient is used
when one wants to specify as broadly as possible the object of a
&%Process."))

(tell (sumodocumentation resource "(&%resource ?PROCESS ?RESOURCE) means that
?RESOURCE is present at the beginning of ?PROCESS, is used by ?PROCESS,
and as a consequence is changed by ?PROCESS.  For example, soap is a
&%resource in the following proposition:  the gun was carved out of soap.
Note that &%resource differs from &%instrument, another subrelation of
&%patient, in that its internal or physical properties are altered in
some way by the &%Process."))

(tell (sumodocumentation result "(result ?ACTION ?OUTPUT) means that ?OUTPUT is
a product of ?ACTION.  For example, house is a &%result in the
following proposition: Eric built a house."))

(tell (Sumoclass InheritableSumorelation))
(tell (sumodocumentation InheritableSumorelation "This is a &%Sumoclass of &%Sumoclasses.  Each
&%instance of &%InheritableSumorelation is a &%subclass of &%Sumorelation whose
properties can be inherited downward in the class hierarchy via the
&%subrelation &%Predicate."))

(tell (InheritableSumorelation ProbabilitySumorelation))
(tell (sumodocumentation ProbabilitySumorelation "The &%Sumoclass of &%Sumorelations that
permit assessment of the probability of an event or situation."))

(tell (ProbabilitySumorelation ProbabilityFn))
(tell (UnarySumofunction ProbabilityFn))
(tell (AsymmetricSumorelation ProbabilityFn))
(tell (sumodocumentation ProbabilityFn "One of the basic &%ProbabilitySumorelations,
&%ProbabilityFn is used to state the a priori probability of a state of
affairs.  (&%ProbabilityFn ?FORMULA) denotes the a priori probability
of ?FORMULA."))

(tell (ProbabilitySumorelation conditionalProbability))
(tell (TernaryPredicate conditionalProbability))
(tell (sumodocumentation conditionalProbability "One of the basic &%ProbabilitySumorelations.
&%conditionalProbability is used to state the numeric value of a conditional
probability.  (&%conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER) means
that the probability of ?FORMULA2 being true given that ?FORMULA1 is true is
?NUMBER."))

(tell (ProbabilitySumorelation increasesLikelihood))
(tell (BinaryPredicate increasesLikelihood))
(tell (IrreflexiveSumorelation increasesLikelihood))
(tell (sumodocumentation increasesLikelihood "One of the basic &%ProbabilitySumorelations.
(&%increasesLikelihood ?FORMULA1 ?FORMULA2) means that ?FORMULA2 is more
likely to be true if ?FORMULA1 is true."))

;; sumo2loom is dropping the following statement because it uses
;; increasesLikelihood, which has Formula in its domain:
;; (=>
;;    (and
;;       (increasesLikelihood ?FORMULA1 ?FORMULA2)
;;       (equal (ProbabilityFn ?FORMULA2) ?NUMBER1)
;;       (conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER2))
;;    (greaterThan ?NUMBER2 ?NUMBER1))

(tell (ProbabilitySumorelation decreasesLikelihood))
(tell (BinaryPredicate decreasesLikelihood))
(tell (IrreflexiveSumorelation decreasesLikelihood))
(tell (sumodocumentation decreasesLikelihood "One of the basic &%ProbabilitySumorelations.
(&%decreasesLikelihood ?FORMULA1 ?FORMULA2) means that ?FORMULA2 is less
likely to be true if ?FORMULA1 is true."))

;; sumo2loom is dropping the following statement because it uses
;; decreasesLikelihood, which has Formula in its domain:
;; (=>
;;    (and
;;       (decreasesLikelihood ?FORMULA1 ?FORMULA2)
;;       (equal (ProbabilityFn ?FORMULA2) ?NUMBER1)
;;       (conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER2))
;;    (lessThan ?NUMBER2 ?NUMBER1))

(tell (ProbabilitySumorelation independentProbability))
(tell (BinaryPredicate independentProbability))
(tell (SymmetricSumorelation independentProbability))
(tell (sumodocumentation independentProbability "One of the basic &%ProbabilitySumorelations.
(&%independentProbability ?FORMULA1 ?FORMULA2) means that the probabilities of
?FORMULA1 and ?FORMULA2 being true are independent."))

;; sumo2loom is dropping the following statement because it uses
;; independentProbability, which has Formula in its domain:
;; (=>
;;    (and
;;       (independentProbability ?FORMULA1 ?FORMULA2)
;;       (equal (ProbabilityFn ?FORMULA2) ?NUMBER1)
;;       (conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER2))
;;    (equal ?NUMBER2 ?NUMBER1))

;; sumo2loom is dropping the following statement because it uses
;; increasesLikelihood, which has Formula in its domain:
;; (or
;;    (increasesLikelihood ?FORMULA1 ?FORMULA2)
;;    (decreasesLikelihood ?FORMULA1 ?FORMULA2)
;;    (independentProbability ?FORMULA1 ?FORMULA2))

(tell (InheritableSumorelation SpatialSumorelation))
(tell (sumodocumentation SpatialSumorelation "The &%Sumoclass of &%Sumorelations that are
spatial in a wide sense.  This &%Sumoclass includes mereological relations
and topological relations."))

(tell (InheritableSumorelation TemporalSumorelation))
(tell (sumodocumentation TemporalSumorelation "The &%Sumoclass of temporal &%Sumorelations.
This &%Sumoclass includes notions of (temporal) topology of intervals,
(temporal) schemata, and (temporal) extension."))

(tell (InheritableSumorelation IntentionalSumorelation))
(tell (sumodocumentation IntentionalSumorelation "The &%Sumoclass of &%Sumorelations between
an &%Agent and one or more &%Entities, where the &%Sumorelation requires that
the &%Agent have awareness of the &%Entity."))

;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (=>
;;    (and
;;       (instance ?REL IntentionalRelation)
;;       (holds ?REL ?AGENT @ROW)
;;       (inList ?OBJ (ListFn @ROW)))
;;    (inScopeOfInterest ?AGENT ?OBJ))

(tell (TernaryPredicate prefers))
(tell (IntentionalSumorelation prefers))
(tell (sumodocumentation prefers "(&%prefers ?AGENT ?FORMULA1 ?FORMULA2) means that
&%CognitiveAgent ?AGENT prefers the state of affairs expressed by ?FORMULA1
over the state of affairs expressed by ?FORMULA2 all things being equal."))

;; sumo2loom is dropping the following statement because it uses
;; prefers, which has Formula in its domain:
;; (=>
;;    (prefers ?AGENT ?FORMULA1 ?FORMULA2)
;;    (=>
;;       (true ?FORMULA1 True)
;;       (true ?FORMULA2 False)))

(tell (InheritableSumorelation SumopropositionalAttitude))
(tell (sumodocumentation SumopropositionalAttitude "The &%Sumoclass of
&%IntentionalSumorelations where the &%Agent has awareness of a
&%Sumoproposition."))

(tell (InheritableSumorelation ObjectAttitude))
(tell (sumodocumentation ObjectAttitude "The &%Sumoclass of &%IntentionalSumorelations
where the &%Agent has awareness of an instance of &%Physical."))

(tell (BinaryPredicate inScopeOfInterest))
(tell (IntentionalSumorelation inScopeOfInterest))
(tell (AsymmetricSumorelation inScopeOfInterest))
(tell (sumodocumentation inScopeOfInterest "A very general &%Predicate.
(&%inScopeOfInterest ?AGENT ?ENTITY) means that ?ENTITY is within the
scope of interest of ?AGENT.  Note that the interest indicated can be
either positive or negative, i.e. the ?AGENT can have an interest in
avoiding or promoting ?ENTITY."))

(tell (ObjectAttitude notices))
(tell (sumodocumentation notices "(&%notices ?AGENT ?OBJECT) means that ?AGENT is
paying attention to ?OBJECT, that ?OBJECT is currently the object of
?AGENT's conscious awareness."))

(tell (ObjectAttitude needs))
(tell (sumodocumentation needs "(&%needs ?AGENT ?OBJECT) means that ?OBJECT is
physically required for the continued existence of ?AGENT."))


(tell (ObjectAttitude wants))
(tell (relatedInternalConcept wants desires))
(tell (sumodocumentation wants "(&%wants ?AGENT ?OBJECT) means that ?OBJECT is desired by ?AGENT,
i.e. ?AGENT believes that ?OBJECT will satisfy one of its goals.  Note that there is
no implication that what is wanted by an agent-rel is not already possessed by the agent-rel."))

;; sumo2loom is dropping the following statement because it uses
;; hasPurposeForAgent, which has Formula in its domain:
;; (=>
;;    (wants ?AGENT ?OBJ)
;;    (exists (?PURP)
;;       (hasPurposeForAgent ?OBJ ?PURP ?AGENT)))

;; sumo2loom is dropping the following statement because it uses
;; desires, which has Formula in its domain:
;; (=>
;;    (wants ?AGENT ?OBJ)
;;    (desires ?AGENT (possesses ?AGENT ?OBJ)))

(tell (SumopropositionalAttitude desires))
(tell (relatedInternalConcept desires wants))
(tell (sumodocumentation desires "(&%desires ?AGENT ?FORMULA) means that ?AGENT wants
to bring about the state of affairs expressed by ?FORMULA.  Note that there
is no implication that what is desired by the agent-rel is not already true.
Note too that &%desires is distinguished from &%wants only in that the former
is a &%SumopropositionalAttitude, while &%wants is an &%ObjectAttitude."))

(tell (SumopropositionalAttitude considers))
(tell (sumodocumentation considers "(&%considers ?AGENT ?FORMULA) means that ?AGENT
considers or wonders about the truth of the proposition expressed by
?FORMULA."))

(tell (SumopropositionalAttitude believes))
(tell (sumodocumentation believes "The epistemic predicate of belief.
(&%believes ?AGENT ?FORMULA) means that ?AGENT believes the proposition
expressed by ?FORMULA."))

;; sumo2loom is dropping the following statement because it uses
;; believes, which has Formula in its domain:
;; (=>
;;    (believes ?AGENT ?FORMULA)
;;    (exists (?TIME)
;;       (holdsDuring ?TIME (considers ?AGENT ?FORMULA))))

(tell (SumopropositionalAttitude knows))
(tell (sumodocumentation knows "The epistemic predicate of knowing.  (&%knows
?AGENT ?FORMULA) means that ?AGENT knows the proposition expressed by
?FORMULA.  Note that &%knows entails conscious awareness, so this
&%Predicate cannot be used to express tacit or subconscious or
unconscious knowledge."))

;; sumo2loom is dropping the following statement because it uses
;; knows, which has Formula in its domain:
;; (=>
;;     (knows ?AGENT ?FORMULA)
;;     (believes ?AGENT ?FORMULA))

;; sumo2loom is dropping the following statement because it uses
;; knows, which has Formula in its domain:
;; (=>
;;    (knows ?AGENT ?FORMULA)
;;    (true ?FORMULA True))

(tell (InheritableSumorelation TernarySumorelation))
(tell (sumodocumentation TernarySumorelation "&%TernarySumorelations relate three items.
The two &%subclasses of &%TernarySumorelation are &%TernaryPredicate and
&%BinarySumofunction."))

;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (=>
;;    (instance ?REL TernaryRelation)
;;    (not
;;       (exists (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 @ROW)
;;          (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 @ROW))))

(tell (InheritableSumorelation QuaternarySumorelation))
(tell (sumodocumentation QuaternarySumorelation "&%QuaternarySumorelations relate four
items.  The two &%subclasses of &%QuaternarySumorelation are
&%QuaternaryPredicate and &%TernarySumofunction."))

;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (=>
;;    (instance ?REL QuaternaryRelation)
;;    (not
;;       (exists (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 @ROW)
;;          (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 @ROW))))

(tell (InheritableSumorelation QuintarySumorelation))
(tell (sumodocumentation QuintarySumorelation "&%QuintarySumorelations relate five items.
The two &%subclasses of &%QuintarySumorelation are &%QuintaryPredicate and
&%QuaternarySumofunction."))

;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (=>
;;    (instance ?REL QuintaryRelation)
;;    (not
;;       (exists (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 @ROW)
;;          (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 @ROW))))

(tell (sumodocumentation Sumolist "Every &%Sumolist is a particular ordered n-tuple of
items.  Generally speaking, &%Sumolists are created by means of the &%SumolistFn
&%Sumofunction, which takes any number of items as arguments and returns a
&%Sumolist with the items in the same order.  Anything, including other
&%Sumolists, may be an item in a &%Sumolist.  Note too that &%Sumolists are
extensional - two lists that have the same items in the same order are
identical.  Note too that a &%Sumolist may contain no items.  In that case,
the &%Sumolist is the &%NullSumolist."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?LIST List)
;;    (exists (?NUMBER1)
;;       (exists (?ITEM1)
;;          (and
;;             (not (equal (ListOrderFn ?LIST ?NUMBER1) ?ITEM1))
;;             (forall (?NUMBER2)
;;                (=>
;;                   (and
;;                      (instance ?NUMBER2 PositiveInteger)
;;                      (lessThan ?NUMBER2 ?NUMBER1))
;;                   (exists (?ITEM2)
;;                      (equal (ListOrderFn ?LIST ?NUMBER2) ?ITEM2))))))))

(tell (sumodocumentation UniqueSumolist "A &%Sumolist in which no item appears more than once,
i.e. a &%Sumolist for which there are no distinct numbers ?NUMBER1 and ?NUMBER2
such that (&%SumolistOrderFn ?LIST ?NUMBER1) and (&%SumolistOrderFn ?LIST ?NUMBER2)
return the same value."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (<=>
;;    (instance ?LIST UniqueList)
;;    (forall (?NUMBER1 ?NUMBER2)
;;       (=>
;;          (equal (ListOrderFn ?LIST ?NUMBER1) (ListOrderFn ?LIST ?NUMBER2))
;;          (equal ?NUMBER1 ?NUMBER2))))

(tell (Sumolist NullSumolist))
(tell (sumodocumentation NullSumolist "The &%Sumolist that has no items.  The uniqueness of
&%NullSumolist follows from the extensionality of &%Sumolists, i.e. the fact that
two &%Sumolists with the same items in the same order are identical."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (equal ?LIST NullList)
;;    (not
;;       (exists (?ITEM)
;;          (inList ?ITEM ?LIST))))

(tell (Sumofunction SumolistFn))
(tell (VariableAritySumorelation SumolistFn))
(tell (sumodocumentation SumolistFn "A &%Sumofunction that takes any number of arguments and
returns the &%Sumolist containing those arguments in exactly the same order."))

;; sumo2loom is dropping the following statement because it uses
;; exhaustiveDecomposition, which is a VariableArityRelation:
;; (=>
;;    (exhaustiveDecomposition ?CLASS @ROW)
;;    (forall (?OBJ)
;;       (=>
;;          (instance ?OBJ ?CLASS)
;;          (exists (?ITEM)
;;             (and
;;                (inList ?ITEM (ListFn @ROW))
;;                (instance ?OBJ ?ITEM))))))

;; sumo2loom is dropping the following statement because it uses
;; disjointDecomposition, which is a VariableArityRelation:
;; (=>
;;    (disjointDecomposition ?CLASS @ROW)
;;    (forall (?ITEM)
;;       (=>
;;          (inList ?ITEM (ListFn @ROW))
;;          (subclass ?ITEM ?CLASS))))

;; sumo2loom is dropping the following statement because it uses
;; disjointDecomposition, which is a VariableArityRelation:
;; (=>
;;    (disjointDecomposition ?CLASS @ROW)
;;    (forall (?ITEM1 ?ITEM2)
;;       (=>
;;          (and
;;             (inList ?ITEM1 (ListFn @ROW))
;;             (inList ?ITEM2 (ListFn @ROW))
;;             (not
;;                (equal ?ITEM1 ?ITEM2)))
;;          (disjoint ?ITEM1 ?ITEM2))))

(tell (BinarySumofunction SumolistOrderFn))
(tell (sumodocumentation SumolistOrderFn "(&%SumolistOrderFn ?LIST ?NUMBER) denotes the item
that is in the ?NUMBER position in the &%Sumolist ?LIST.  For example,
(&%SumolistOrderFn (&%SumolistFn &%Monday &%Tuesday &%Wednesday) 2) would return the
value &%Tuesday."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (and
;;       (instance ?LIST1 List)
;;       (instance ?LIST2 List)
;;       (forall (?NUMBER)
;;          (equal (ListOrderFn ?LIST1 ?NUMBER) (ListOrderFn ?LIST2 ?NUMBER))))
;;    (equal ?LIST1 ?LIST2))

;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (=>
;;    (and
;;       (domain ?REL ?NUMBER ?CLASS)
;;       (holds ?REL @ROW))
;;    (instance (ListOrderFn (ListFn @ROW) ?NUMBER) ?CLASS))

;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (=>
;;    (and
;;       (domainSubclass ?REL ?NUMBER ?CLASS)
;;       (holds ?REL @ROW))
;;    (subclass (ListOrderFn (ListFn @ROW) ?NUMBER) ?CLASS))

(tell (UnarySumofunction SumolistLengthFn))
(tell (sumodocumentation SumolistLengthFn "A &%Sumofunction that takes a &%Sumolist as its sole
argument and returns the number of items in the &%Sumolist.  For example,
(&%SumolistLengthFn (&%SumolistFn &%Monday &%Tuesday &%Wednesday)) would return the
value 3."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (equal (ListLengthFn ?LIST) ?NUMBER1)
;;    (forall (?NUMBER2)
;;       (<=>
;;          (exists (?ITEM)
;;             (equal (ListOrderFn ?LIST ?NUMBER2) ?ITEM))
;;          (lessThanOrEqualTo ?NUMBER2 ?NUMBER1))))

;; sumo2loom is dropping the following statement because it
;; wants to be an implication:
;; (equal (ListLengthFn (ListFn @ROW ?ITEM)) (SuccessorFn (ListLengthFn (ListFn @ROW))))

;; sumo2loom is dropping the following statement because it
;; wants to be an implication:
;; (equal (ListOrderFn (ListFn @ROW ?ITEM) (ListLengthFn (ListFn @ROW ?ITEM))) ?ITEM)

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (valence ?REL ?NUMBER)
;;    (forall (@ROW)
;;       (=>
;;          (holds ?REL @ROW)
;;          (equal (ListLengthFn (ListFn @ROW)) ?NUMBER))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (equal (ListLengthFn ?LIST1) ?NUMBER)
;;    (exists (?LIST2)
;;       (and
;;          (initialList ?LIST1 ?LIST2)
;;          (equal (SuccessorFn ?NUMBER) (ListLengthFn ?LIST2))
;;          (equal (ListOrderFn ?LIST2 (SuccessorFn ?NUMBER)) ?ITEM))))

(tell (BinarySumofunction SumolistConcatenateFn))
(tell (sumodocumentation SumolistConcatenateFn "A &%Sumofunction that returns the concatenation
of the two &%Sumolists that are given as arguments.  For example, the value of
(&%SumolistConcatenateFn (&%SumolistFn &%Monday &%Tuesday) (&%SumolistFn &%Wednesday
&%Thursday)) would be (&%SumolistFn &%Monday &%Tuesday &%Wednesday &%Thursday)."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (<=>
;;    (equal ?LIST3 (ListConcatenateFn ?LIST1 ?LIST2))
;;    (forall (?NUMBER1 ?NUMBER2)
;;       (=>
;;          (and
;;             (lessThanOrEqualTo ?NUMBER1 (ListLengthFn ?LIST1))
;;             (lessThanOrEqualTo ?NUMBER2 (ListLengthFn ?LIST2))
;;             (instance ?NUMBER1 PositiveInteger)
;;             (instance ?NUMBER2 PositiveInteger))
;;          (and
;;             (equal (ListOrderFn ?LIST3 ?NUMBER1) (ListOrderFn ?LIST1 ?NUMBER1))
;;             (equal (ListOrderFn ?LIST3 (AdditionFn (ListLengthFn ?LIST1) ?NUMBER2)) (ListOrderFn ?LIST2 ?NUMBER2))))))

(tell (BinaryPredicate inSumolist))
(tell (IrreflexiveSumorelation inSumolist))
(tell (AsymmetricSumorelation inSumolist))
(tell (sumodocumentation inSumolist "The analog of &%element and &%instance for &%Sumolists.
(&%inSumolist ?OBJ ?LIST) means that ?OBJ is in the &%Sumolist ?LIST.  For example,
(&%inSumolist &%Tuesday (&%SumolistFn &%Monday &%Tuesday &%Wednesday)) would be true."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (inList ?ITEM ?LIST)
;;    (exists (?NUMBER)
;;       (equal (ListOrderFn ?LIST ?NUMBER) ?ITEM)))

(tell (BinaryPredicate subSumolist))
(tell (PartialOrderingSumorelation subSumolist))
(tell (sumodocumentation subSumolist "(&%subSumolist ?LIST1 ?LIST2) means that ?LIST1 is a
sublist of ?LIST2, i.e. every element of ?LIST1 is an element of ?LIST2 and
the elements that are common to both &%Sumolists have the same order in both
&%Sumolists."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (subList ?LIST1 ?LIST2)
;;    (forall (?ITEM)
;;       (=>
;;          (inList ?ITEM ?LIST1)
;;          (inList ?ITEM ?LIST2))))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (subList ?LIST1 ?LIST2)
;;    (exists (?NUMBER3)
;;       (forall (?ITEM)
;;          (=>
;;             (inList ?ITEM ?LIST1)
;;             (exists (?NUMBER1 ?NUMBER2)
;;                (and
;;                   (equal (ListOrderFn ?LIST1 ?NUMBER1) ?ITEM)
;;                   (equal (ListOrderFn ?LIST2 ?NUMBER2) ?ITEM)
;;                   (equal ?NUMBER2 (AdditionFn ?NUMBER1 ?NUMBER3))))))))

(tell (BinaryPredicate initialSumolist))
(tell (sumodocumentation initialSumolist "(&%initialSumolist ?LIST1 ?LIST2) means that ?LIST1
is a &%subSumolist of ?LIST2 and (&%SumolistOrderFn ?LIST1 ?NUMBER) returns the same
value as (&%SumolistOrderFn ?LIST2 ?NUMBER) for all of the values of ?NUMBER over
which (&%SumolistOrderFn ?LIST1 ?NUMBER) is defined."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (initialList ?LIST1 ?LIST2)
;;    (forall (?NUMBER1 ?NUMBER2)
;;       (=>
;;          (and
;;             (equal (ListLengthFn ?LIST1) ?NUMBER1)
;;             (lessThanOrEqualTo ?NUMBER2 ?NUMBER1))
;;          (equal (ListOrderFn ?LIST1 ?NUMBER2) (ListOrderFn ?LIST2 ?NUMBER2)))))

;; sumo2loom is dropping the following statement because it
;; wants to be an implication:
;; (initialList (ListFn @ROW) (ListFn @ROW ?ITEM))

(tell (InheritableSumorelation Predicate))
(tell (sumodocumentation Predicate "A &%Predicate is a sentence-forming &%Sumorelation.
Each tuple in the &%Sumorelation is a finite, ordered sequence of objects.
The fact that a particular tuple is an element of a &%Predicate is denoted
by '(*predicate* arg_1 arg_2 .. arg_n)', where the arg_i are the
objects so related.  In the case of &%BinaryPredicates, the fact can
be read as `arg_1 is *predicate* arg_2' or `a *predicate* of
arg_1 is arg_2'."))

(tell (InheritableSumorelation Sumofunction))
(tell (sumodocumentation Sumofunction "A &%Sumofunction is a term-forming &%Sumorelation that
maps from a n-tuple of arguments to a sumorange and that associates this
n-tuple with at most one sumorange element.  Note that the sumorange is a &%SumosetOrSumoclass,
and each element of the sumorange is an instance of the &%SumosetOrSumoclass."))

(tell (InheritableSumorelation UnarySumofunction))
(tell (sumodocumentation UnarySumofunction "The &%Sumoclass of &%Sumofunctions that require a
single argument."))


(tell (sumodocumentation OneToOneSumofunction "The &%Sumoclass of &%UnarySumofunctions which
are one to one.  A function F is one to one just in case for all X, Y in the
sumodomain of F, if X is not identical to Y, then F(X) is not identical to F(Y)."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (<=>
;;    (instance ?FUN OneToOneFunction)
;;    (forall (?ARG1 ?ARG2)
;;       (=>
;;          (and
;;             (instance ?ARG1 (DomainFn ?FUN))
;;             (instance ?ARG2 (DomainFn ?FUN))
;;             (not (equal ?ARG1 ?ARG2)))
;;          (not (equal (AssignmentFn ?FUN ?ARG1) (AssignmentFn ?FUN ?ARG2))))))

(tell (sumodocumentation SumosequenceSumofunction "The &%Sumoclass of &%OneToOneSumofunctions whose sumorange
is a subclass of the &%PositiveSumointegers."))


(tell (InheritableSumorelation BinarySumofunction))
(tell (sumodocumentation BinarySumofunction "The &%Sumoclass of &%Sumofunctions that require
two arguments."))


(tell (sumodocumentation AssociativeSumofunction "A &%BinarySumofunction is associative if
bracketing has no effect on the value returned by the &%Sumofunction.  More
precisely, a &%Sumofunction ?FUNCTION is associative just in case
(?FUNCTION ?INST1 (?FUNCTION ?INST2 ?INST3)) is equal to
(?FUNCTION (?FUNCTION ?INST1 ?INST2) ?INST3), for all ?INST1, ?INST2,
and ?INST3."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?FUNCTION AssociativeFunction)
;;    (forall (?INST1 ?INST2 ?INST3)
;;       (=>
;;          (and
;;             (instance ?INST1 (DomainFn ?FUNCTION))
;;             (instance ?INST2 (DomainFn ?FUNCTION))
;;             (instance ?INST3 (DomainFn ?FUNCTION)))
;;          (equal (AssignmentFn ?FUNCTION ?INST1 (AssignmentFn ?FUNCTION ?INST2 ?INST3))
;;              (AssignmentFn ?FUNCTION (AssignmentFn ?FUNCTION ?INST1 ?INST2) ?INST3)))))

(tell (sumodocumentation CommutativeSumofunction "A &%BinarySumofunction is commutative if
the ordering of the arguments of the function has no effect on the value
returned by the function.  More precisely, a function ?FUNCTION is
commutative just in case (?FUNCTION ?INST1 ?INST2) is equal to (?FUNCTION
?INST2 ?INST1), for all ?INST1 and ?INST2."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?FUNCTION CommutativeFunction)
;;    (forall (?INST1 ?INST2)
;;       (=>
;;          (and
;;             (instance ?INST1 (DomainFn ?FUNCTION))
;;             (instance ?INST2 (DomainFn ?FUNCTION)))
;;          (equal (AssignmentFn ?FUNCTION ?INST1 ?INST2)
;;                 (AssignmentFn ?FUNCTION ?INST2 ?INST1)))))

(tell (InheritableSumorelation TernarySumofunction))
(tell (sumodocumentation TernarySumofunction "The &%Sumoclass of &%Sumofunctions that require
exactly three arguments."))


(tell (InheritableSumorelation QuaternarySumofunction))
(tell (sumodocumentation QuaternarySumofunction "The &%Sumoclass of &%Sumofunctions that require
exactly four arguments."))


(tell (sumodocumentation ContinuousSumofunction "&%Sumofunctions which are continuous.
This concept is taken as primitive until representations for limits
are devised."))

(tell (sumodocumentation LogicalOperator "This &%Sumoclass currently comprises all
of the logical operators (viz. 'and', 'or', 'not', '=>', and '<=>')."))

(tell (InheritableSumorelation BinaryPredicate))
(tell (sumodocumentation BinaryPredicate "A &%Predicate relating two items - its
valence is two."))


(tell (InheritableSumorelation TernaryPredicate))
(tell (sumodocumentation TernaryPredicate "The &%Sumoclass of &%Predicates that require
exactly three arguments."))


(tell (InheritableSumorelation QuaternaryPredicate))
(tell (sumodocumentation QuaternaryPredicate "The &%Sumoclass of &%Predicates that
require four arguments."))


(tell (InheritableSumorelation QuintaryPredicate))
(tell (sumodocumentation QuintaryPredicate "The &%Sumoclass of &%Predicates that
require five arguments."))


(tell (sumodocumentation VariableAritySumorelation "The &%Sumoclass of &%Sumorelations that
do not have a fixed number of arguments."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;         (instance ?REL VariableArityRelation)
;;         (not
;;            (exists (?INT)
;;               (valence ?REL ?INT))))

(tell (InheritableSumorelation SumorelationExtendedToQuantities))
(tell (sumodocumentation SumorelationExtendedToQuantities "A
&%SumorelationExtendedToQuantities is a &%Sumorelation that, when it is true on
a sequence of arguments that are &%RealSumonumbers, it is also true on a
sequence of &%ConstantQuantites with those magnitudes in some unit of
measure.  For example, the &%lessThan relation is extended to quantities.
This means that for all pairs of quantities ?QUANTITY1 and ?QUANTITY2,
(lessThan ?QUANTITY1 ?QUANTITY2) if and only if, for some ?NUMBER1,
?NUMBER2, and ?UNIT, ?QUANTITY1 = (MeasureFn ?NUMBER1 ?UNIT),
?QUANTITY2 = (MeasureFn ?NUMBER2 ?UNIT), and (lessThan ?NUMBER1 ?NUMBER2),
for all units ?UNIT on which ?QUANTITY1 and ?QUANTITY2 can be measured.
Note that, when a &%SumorelationExtendedToQuantities is extended from
&%RealSumonumbers to &%ConstantQuantities, the &%ConstantQuantities must be
measured along the same physical dimension."))

(tell (sumodocumentation Sumoproposition "&%Sumopropositions are &%Abstract entities that
express a complete thought or a set of such thoughts.  As an example,
the formula '(instance Yojo Cat)' expresses the &%Sumoproposition that the
entity named Yojo is an element of the &%Sumoclass of Cats.  Note that
propositions are not restricted to the content expressed by individual
sentences of a &%Language.  They may encompass the content expressed by
theories, books, and even whole libraries.  It is important to distinguish
&%Sumopropositions from the &%ContentBearingObjects that express them.  A
&%Sumoproposition is a piece of information, e.g. that the cat is on the mat,
but a &%ContentBearingObject is an &%Object that represents this information.
A &%Sumoproposition is an abstraction that may have multiple representations:
strings, sounds, icons, etc.  For example, the &%Sumoproposition that the cat is
on the mat is represented here as a string of graphical characters displayed
on a monitor and/or printed on paper, but it can be represented by a sequence
of sounds or by some non-latin alphabet or by some cryptographic form"))

(tell (BinaryPredicate closedOn))
(tell (AsymmetricSumorelation closedOn))
(tell (sumodocumentation closedOn "A &%BinarySumofunction is closed on a &%SumosetOrSumoclass
if it is defined for all instances of the &%SumosetOrSumoclass and its value is
always an instance of the &%SumosetOrSumoclass."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (and
;;       (closedOn ?FUNCTION ?CLASS)
;;       (instance ?FUNCTION UnaryFunction))
;;    (forall (?INST)
;;       (=>
;;          (instance ?INST ?CLASS)
;;          (instance (AssignmentFn ?FUNCTION ?INST) ?CLASS))))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (and
;;       (closedOn ?FUNCTION ?CLASS)
;;       (instance ?FUNCTION BinaryFunction))
;;    (forall (?INST1 ?INST2)
;;       (=>
;;          (and
;;             (instance ?INST1 ?CLASS)
;;             (instance ?INST2 ?CLASS))
;;          (instance (AssignmentFn ?FUNCTION ?INST1 ?INST2) ?CLASS))))

(tell (BinaryPredicate reflexiveOn))
(tell (AsymmetricSumorelation reflexiveOn))
(tell (sumodocumentation reflexiveOn "A &%BinarySumorelation is reflexive on a
&%SumosetOrSumoclass only if every instance of the &%SumosetOrSumoclass bears the relation
to itself."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (reflexiveOn ?RELATION ?CLASS)
;;    (forall (?INST)
;;       (=>
;;          (instance ?INST ?CLASS)
;;          (holds ?RELATION ?INST ?INST))))

(tell (BinaryPredicate irreflexiveOn))
(tell (AsymmetricSumorelation irreflexiveOn))
(tell (sumodocumentation irreflexiveOn "A &%BinarySumorelation is irreflexive on a
&%SumosetOrSumoclass only if no instance of the &%SumosetOrSumoclass bears the relation to
itself."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (irreflexiveOn ?RELATION ?CLASS)
;;    (forall (?INST)
;;       (=>
;;          (instance ?INST ?CLASS)
;;          (not
;;             (holds ?RELATION ?INST ?INST)))))

(tell (BinaryPredicate partialOrderingOn))
(tell (AsymmetricSumorelation partialOrderingOn))
(tell (sumodocumentation partialOrderingOn "A &%BinarySumorelation is a partial
ordering on a &%SumosetOrSumoclass only if the relation is &%reflexiveOn the
&%SumosetOrSumoclass, and it is both an &%AntisymmetricSumorelation, and a
&%TransitiveSumorelation."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (partialOrderingOn ?RELATION ?CLASS)
;;    (and
;;       (reflexiveOn ?RELATION ?CLASS)
;;       (instance ?RELATION TransitiveRelation)
;;       (instance ?RELATION AntisymmetricRelation)))

(tell (BinaryPredicate totalOrderingOn))
(tell (AsymmetricSumorelation totalOrderingOn))
(tell (sumodocumentation totalOrderingOn "A &%BinarySumorelation ?REL is a total
ordering on a &%SumosetOrSumoclass only if it is a partial ordering for which either
(?REL ?INST1 ?INST2) or (?REL ?INST2 ?INST1) for every ?INST1 and ?INST2
in the &%SumosetOrSumoclass."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;      (totalOrderingOn ?RELATION ?CLASS)
;;      (and
;;           (partialOrderingOn ?RELATION ?CLASS)
;;           (trichotomizingOn ?RELATION ?CLASS)))

(tell (BinaryPredicate trichotomizingOn))
(tell (AsymmetricSumorelation trichotomizingOn))
(tell (sumodocumentation trichotomizingOn "A &%BinarySumorelation ?REL is
trichotomizing on a &%SumosetOrSumoclass only if, for all instances ?INST1 and ?INST2
of the &%SumosetOrSumoclass, at least one of the following holds:  (?REL ?INST1 ?INST2),
(?REL ?INST2 ?INST1) or (equal ?INST1 ?INST2)."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (trichotomizingOn ?RELATION ?CLASS)
;;    (forall (?INST1 ?INST2)
;;       (=>
;;          (and
;;             (instance ?INST1 ?CLASS)
;;             (instance ?INST2 ?CLASS))
;;          (or
;;             (holds ?RELATION ?INST1 ?INST2)
;;             (holds ?RELATION ?INST2 ?INST1)
;;             (equal ?INST1 ?INST2)))))

(tell (BinaryPredicate equivalenceSumorelationOn))
(tell (AsymmetricSumorelation equivalenceSumorelationOn))
(tell (sumodocumentation equivalenceSumorelationOn "A &%BinarySumorelation is an
&%equivalenceSumorelationOn a &%SumosetOrSumoclass only if the relation is &%reflexiveOn
the &%SumosetOrSumoclass and it is both a &%TransitiveSumorelation and a
&%SymmetricSumorelation."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (equivalenceRelationOn ?RELATION ?CLASS)
;;    (and
;;       (instance ?RELATION TransitiveRelation)
;;       (instance ?RELATION SymmetricRelation)
;;       (reflexiveOn ?RELATION ?CLASS)))

(tell (BinaryPredicate distributes))
(tell (BinarySumorelation distributes))
(tell (sumodocumentation distributes "A &%BinarySumofunction ?FUNCTION1 is
distributive over another &%BinarySumofunction ?FUNCTION2 just in case
(?FUNCTION1 ?INST1 (?FUNCTION2 ?INST2 ?INST3)) is equal to
(?FUNCTION2 (?FUNCTION1 ?INST1 ?INST2) (?FUNCTION1 ?INST1 ?INST3)),
for all ?INST1, ?INST2, and ?INST3."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (distributes ?FUNCTION1 ?FUNCTION2)
;;    (forall (?INST1 ?INST2 ?INST3)
;;       (=>
;;          (and
;;             (instance ?INST1 (DomainFn ?FUNCTION1))
;;             (instance ?INST2 (DomainFn ?FUNCTION1))
;;             (instance ?INST3 (DomainFn ?FUNCTION1))
;;             (instance ?INST1 (DomainFn ?FUNCTION2))
;;             (instance ?INST2 (DomainFn ?FUNCTION2))
;;             (instance ?INST3 (DomainFn ?FUNCTION2)))
;;          (equal (AssignmentFn ?FUNCTION1 ?INST1
;;                         (AssignmentFn ?FUNCTION2 ?INST2 ?INST3))
;;                 (AssignmentFn ?FUNCTION2
;;                         (AssignmentFn ?FUNCTION1 ?INST1 ?INST2)
;;                         (AssignmentFn ?FUNCTION1 ?INST1 ?INST3))))))

(tell (BinaryPredicate causes))
(tell (AsymmetricSumorelation causes))
(tell (relatedInternalConcept causes causesSubclass))
(tell (sumodocumentation causes "The causation relation between instances of &%Process.
(&%causes ?PROCESS1 ?PROCESS2) means that the instance of &%Process ?PROCESS1
brings about the instance of &%Process ?PROCESS2, e.g. (&%causes &%Killing &%Death)."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?PROC1 Process)
;;    (exists (?PROC2)
;;       (causes ?PROC2 ?PROC1)))

(tell (BinaryPredicate causesSubclass))
(tell (AsymmetricSumorelation causesSubclass))
(tell (sumodocumentation causesSubclass "The causation relation between subclasses of &%Process.
(&%causesSubclass ?PROCESS1 ?PROCESS2) means that the subclass of &%Process ?PROCESS1
brings about the subclass of &%Process ?PROCESS2, e.g. (&%causes &%Killing &%Death)."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (causesSubclass ?PROC1 ?PROC2)
;;    (forall (?INST2)
;;       (=>
;;          (instance ?INST2 ?PROC2)
;;          (exists (?INST1)
;; 		(and
;; 		   (instance ?INST1 ?PROC1)
;; 		   (causes ?INST1 ?INST2))))))

(tell (BinaryPredicate copy))
(tell (EquivalenceSumorelation copy))
(tell (sumodocumentation copy "relates an &%Object to an exact copy of the
&%Object, where an exact copy is indistinguishable from the original
with regard to every sumoproperty except (possibly) spatial and/or temporal
location."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (copy ?OBJ1 ?OBJ2)
;;    (forall (?ATTR)
;;       (=>
;;          (attribute ?OBJ1 ?ATTR)
;;          (attribute ?OBJ2 ?ATTR))))

(tell (BinaryPredicate time))
(tell (TemporalSumorelation time))
(tell (AsymmetricSumorelation time))
(tell (sumodocumentation time "This relation holds between an instance of
&%Physical and an instance of &%TimePosition just in case the temporal
lifespan of the former includes the latter.  The constants &%located
and &%time are the basic spatial and temporal predicates,
respectively."))

(tell (BinaryPredicate holdsDuring))
(tell (AsymmetricSumorelation holdsDuring))
(tell (sumodocumentation holdsDuring "(&%holdsDuring ?TIME ?FORMULA) means that the
proposition denoted by ?FORMULA is true in the time frame ?TIME.  Note
that this implies that ?FORMULA is true at every &%TimePoint which is a
&%temporalPart of ?TIME."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (holdsDuring ?TIME ?SITUATION1)
;;       (entails ?SITUATION1 ?SITUATION2))
;;    (holdsDuring ?TIME ?SITUATION2))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (holdsDuring ?TIME (not ?SITUATION))
;;    (not (holdsDuring ?TIME ?SITUATION)))

(tell (TernaryPredicate capability))
(tell (sumodocumentation capability "(&%capability ?PROCESS ?ROLE ?OBJ) means
that ?OBJ has the ability to play the role of ?ROLE in &%Processes of
type ?PROCESS."))

;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (=>
;;    (and
;;       (instance ?ROLE CaseRole)
;;       (holds ?ROLE ?ARG1 ?ARG2)
;;       (instance ?ARG1 ?PROC))
;;    (capability ?PROC ?ROLE ?ARG2))

(tell (BinaryPredicate exploits))
(tell (AsymmetricSumorelation exploits))
(tell (sumodocumentation exploits "(&%exploits ?OBJ ?AGENT) means that ?OBJ is used
by ?AGENT as a &%resource in an unspecified instance of &%Process.  This
&%Predicate, as its corresponding axiom indicates, is a composition of the
relations &%agent-rel and &%resource."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;      (exploits ?OBJ ?AGENT)
;;      (exists (?PROCESS)
;;           (and
;;                (agent ?PROCESS ?AGENT)
;;                (resource ?PROCESS ?OBJ))))

(tell (BinaryPredicate hasPurpose))
(tell (AsymmetricSumorelation hasPurpose))
(tell (sumodocumentation hasPurpose "This &%Predicate expresses the concept of a
conventional goal, i.e. a goal with a neutralized agent-rel's intention.
Accordingly, (&%hasPurpose ?THING ?FORMULA) means that the instance of
&%Physical ?THING has, as its purpose, the &%Sumoproposition expressed by
?FORMULA.  Note that there is an important difference in meaning between
the &%Predicates &%hasPurpose and &%result.  Although the second argument
of the latter can satisfy the second argument of the former,
a conventional goal is an expected and desired outcome, while a result
may be neither expected nor desired.  For example, a machine process may
have outcomes but no goals, aimless wandering may have an outcome but no
goal; a learning process may have goals with no outcomes, and so on."))

(tell (TernaryPredicate hasPurposeForAgent))
(tell (sumodocumentation hasPurposeForAgent "Expresses a cognitive attitude of an
agent-rel with respect to a particular instance of Physical.  More precisely,
(&%hasPurposeForAgent ?THING ?FORMULA ?AGENT) means that the purpose of
?THING for ?AGENT is the proposition expressed by ?FORMULA.  Very complex
issues are involved here.  In particular, the rules of inference of the
first order predicate calculus are not truth-preserving for the second
argument position of this &%Predicate."))

;; sumo2loom is dropping the following statement because it uses
;; hasPurpose, which has Formula in its domain:
;; (=>
;;    (hasPurpose ?THING ?PURPOSE)
;;    (exists (?AGENT)
;;       (hasPurposeForAgent ?THING ?PURPOSE ?AGENT)))

(tell (BinaryPredicate hasSkill))
(tell (AsymmetricSumorelation hasSkill))
(tell (sumodocumentation hasSkill "Similar to the &%capability &%Predicate
with the additional restriction that the ability be practised/
demonstrated to some measurable degree."))


(tell (BinaryPredicate holdsRight))
(tell (AsymmetricSumorelation holdsRight))
(tell (sumodocumentation holdsRight "Expresses a relationship between a subclass
of &%Process and a &%CognitiveAgent whereby the &%CognitiveAgent has
the right to perform instances of the &%Process type specified,
i.e. to be an &%agent-rel of instances of the &%Process type."))


(tell (TernaryPredicate confersRight))
(tell (sumodocumentation confersRight "Expresses the relationship between a subclass
of &%Process, an &%Entity, and a &%CognitiveAgent when the &%Entity
authorizes the &%CognitiveAgent to perform instances of the &%Process type
specified, i.e. to be an &%agent-rel of instances of the &%Process type."))


(tell (BinaryPredicate holdsObligation))
(tell (AsymmetricSumorelation holdsObligation))
(tell (relatedInternalConcept holdsObligation holdsRight))
(tell (sumodocumentation holdsObligation "Expresses a relationship between a
subclass of &%Process and a &%CognitiveAgent whereby the &%CognitiveAgent
has the obligation to perform instances of the &%Process type specified,
i.e. to be an &%agent-rel of instances of the &%Process type."))


(tell (TernaryPredicate confersObligation))
(tell (relatedInternalConcept confersObligation confersRight))
(tell (sumodocumentation confersObligation "Expresses the relationship between a
subclass of &%Process, an &%Entity, and a &%CognitiveAgent when the
&%Entity obligates the &%CognitiveAgent to perform instances of the &%Process
type specified, i.e. to be an &%agent-rel of instances of the &%Process type."))


(tell (PartialOrderingSumorelation located))
(tell (relatedInternalConcept located time))
(tell (sumodocumentation located "A very general predicate.  (&%located
?PHYS ?OBJ) means that ?PHYS is situated at ?OBJ, in some sense.  The
&%Predicates &%located and &%time are spatial and temporal
predicates, respectively."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (located ?OBJ ?REGION)
;;    (forall (?SUBOBJ)
;;       (=>
;;          (part ?SUBOBJ ?OBJ)
;;          (located ?SUBOBJ ?REGION))))

(tell (SpatialSumorelation partlyLocated))
(tell (ReflexiveSumorelation partlyLocated))
(tell (BinaryPredicate partlyLocated))
(tell (sumodocumentation partlyLocated "The predicate of partial localization.
For example, Istanbul is partly located in Asia.  Note that this is the
most basic localization relation:  &%located and &%exactlyLocated
are both subrelations of &%partlyLocated."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (partlyLocated ?OBJ ?REGION)
;;    (exists (?SUBOBJ)
;;       (and
;;          (part ?SUBOBJ ?OBJ)
;;          (exactlyLocated ?SUBOBJ ?REGION))))

(tell (sumodocumentation exactlyLocated "The actual, minimal location of an
Object.  This is a subrelation of the more general Predicate
&%located."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (exactlyLocated ?OBJ ?REGION)
;;    (not
;;       (exists (?OTHEROBJ)
;;          (and
;;             (exactlyLocated ?OTHEROBJ ?REGION)
;;             (not
;;                (equal ?OTHEROBJ ?OBJ))))))


(tell (SpatialSumorelation between))
(tell (TernaryPredicate between))
(tell (sumodocumentation between "(between ?OBJ1 ?OBJ2 ?OBJ3) means that ?OBJ2 is
spatially located between ?OBJ1 and ?OBJ3.  Note that this implies that
?OBJ2 is directly between ?OBJ1 and ?OBJ3, i.e. the projections of ?OBJ1
and ?OBJ3 overlap with ?OBJ2."))

(tell (SpatialSumorelation traverses))
(tell (sumodocumentation traverses "(&%traverses ?OBJ1 ?OBJ2) means that ?OBJ1
crosses or extends across ?OBJ2.  Note that &%crosses and
&%penetrates are subrelations of &%traverses."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (traverses ?OBJ1 ?OBJ2)
;;    (or
;;       (crosses ?OBJ1 ?OBJ2)
;;       (penetrates ?OBJ1 ?OBJ2)))

(tell (AsymmetricSumorelation crosses))
(tell (TransitiveSumorelation crosses))
;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (disjointRelation crosses connected)
(tell (sumodocumentation crosses "(crosses ?OBJ1 ?OBJ2) means that
&%Object ?OBJ1 &%traverses Object ?OBJ2, without being &%connected
to it."))

;; Workaround for mysterious Loom error
;; (subrelation penetrates traverses)
(tell (AsymmetricSumorelation penetrates))
(tell (IntransitiveSumorelation penetrates))
(tell (sumodocumentation penetrates "(penetrates ?OBJ1 ?OBJ2) means that
?OBJ1 is &%connected to ?OBJ2 along at least one whole dimension (length,
width or depth)."))

(tell (BinarySumofunction WhereFn))
(tell (SpatialSumorelation WhereFn))
(tell (relatedInternalConcept WhereFn WhenFn))
(tell (sumodocumentation WhereFn "Maps an &%Object and a &%TimePoint at which the
&%Object exists to the &%Region where the &%Object existed at that
&%TimePoint."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (<=>
;;    (equal (WhereFn ?THING ?TIME) ?REGION)
;;    (holdsDuring ?TIME (exactlyLocated ?THING ?REGION)))

(tell (BinaryPredicate possesses))
(tell (AsymmetricSumorelation possesses))
(tell (sumodocumentation possesses "&%Sumorelation that holds between an &%Agent and
an &%Object when the &%Agent has ownership of the &%Object."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (possesses ?PERSON ?OBJ)
;;    (exists (?TYPE)
;;       (and
;;          (holdsRight ?PERSON ?TYPE)
;;          (forall (?PROCESS)
;;             (=>
;;                (instance ?PROCESS ?TYPE)
;;                (patient ?PROCESS ?OBJ))))))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?TIME TimePosition)
;;       (holdsDuring ?TIME (possesses ?AGENT1 ?OBJ))
;;       (holdsDuring ?TIME (possesses ?AGENT2 ?OBJ)))
;;    (equal ?AGENT1 ?AGENT2))

(tell (UnarySumofunction PropertyFn))
(tell (sumodocumentation PropertyFn "A &%UnarySumofunction that maps an &%Agent to the &%Sumoset of &%Property owned by the &%Agent."))


(tell (BinaryPredicate precondition))
(tell (AsymmetricSumorelation precondition))
(tell (TransitiveSumorelation precondition))
(tell (sumodocumentation precondition "A very general &%Predicate.  (&%precondition
?PROC1 ?PROC2) means that ?PROC2 can exist or be true only if
?PROC1 exists or is true.  At some point, this &%Predicate should
probably be broken up into more specific &%Predicates with more
restrictive &%sumodomain restrictions."))

;; sumo2loom is dropping the following statement because it uses
;; precondition, which sometimes takes propositions as arguments:
;; (=>
;;    (precondition ?PROC1 ?PROC2)
;;    (=>
;;       (exists (?INST2) (instance ?INST2 ?PROC2))
;;       (exists (?INST1) (instance ?INST1 ?PROC1))))

(tell (BinaryPredicate inhibits))
(tell (IrreflexiveSumorelation inhibits))
(tell (sumodocumentation inhibits "A very general &%Predicate.  (&%inhibits
?PROC1 ?PROC2) means that the &%Process ?PROC1 inhibits or hinders
the occurrence of the &%Process ?PROC2.  For example, obstructing an
object inhibits moving it.  Note that this is a relation between types
of &%Processes, not between instances."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (inhibits ?PROC1 ?PROC2)
;;    (forall (?TIME ?PLACE)
;;       (decreasesLikelihood
;; 		(holdsDuring ?TIME (exists (?INST1) (and (instance ?INST1 ?PROC1) (located ?INST1 ?PLACE))))
;;             (holdsDuring ?TIME (exists (?INST2) (and (instance ?INST2 ?PROC2) (located ?INST2 ?PLACE)))))))

(tell (BinaryPredicate prevents))
(tell (IrreflexiveSumorelation prevents))
(tell (relatedInternalConcept prevents inhibits))
(tell (sumodocumentation prevents "A very general &%Predicate.  (&%prevents ?PROC1
?PROC2) means that ?PROC1 prevents the occurrence of ?PROC2.  In other
words, if ?PROC1 is occurring in a particular time and place, ?PROC2
cannot occur at the same time and place.  For example, innoculating
prevents contracting disease.  Note that this is a relation between types
of &%Processes, not between instances."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (prevents ?PROC1 ?PROC2)
;;    (forall (?TIME ?PLACE)
;;       (=>
;;          (holdsDuring ?TIME (exists (?INST1) (and (instance ?INST1 ?PROC1) (located ?INST1 ?PLACE))))
;;          (not (holdsDuring ?TIME (exists (?INST2) (and (instance ?INST2 ?PROC2) (located ?INST2 ?PLACE))))))))

(tell (BinaryPredicate refers))
(tell (sumodocumentation refers "(&%refers ?OBJ1 ?OBJ2) means that ?OBJ1
mentions or includes a reference to ?OBJ2. Note that &%refers is
more general in meaning than &%represents, because presumably something
can represent something else only if it refers to this other thing.
For example, an article whose topic is a recent change in the price of
oil may refer to many other things, e.g. the general state of the economy,
the weather in California, the prospect of global warming, the options
for alternative energy sources, the stock prices of various oil companies,
etc."))

(tell (sumodocumentation names "(&%names ?STRING ?ENTITY) means that the thing ?ENTITY
has the &%SymbolicString ?STRING as its name.  Note that &%names and &%represents
are the two immediate &%subrelations of &%refers.  The predicate &%names is used
when the referring item is merely a tag without connotative content, while the
predicate &%represents is used for referring items that have such content."))

(tell (SingleValuedSumorelation uniqueIdentifier))
(tell (sumodocumentation uniqueIdentifier "The class of &%names that uniquely identify
an instance of &%Entity.  Some examples of &%uniqueIdentifiers are the keys
of tables in database applications and the ISBN (International Standard Book
Sumonumber)."))

(tell (sumodocumentation represents "A very general semiotics &%Predicate.
(&%represents ?THING ?ENTITY) means that ?THING in some way indicates,
expresses, connotes, pictures, describes, etc. ?ENTITY.  The &%Predicates
&%containsInformation and &%realization are subrelations of &%represents.
Note that &%represents is a subrelation of &%refers, since something can
represent something else only if it refers to this other thing.  See the
sumodocumentation string for &%names."))

(tell (TernaryPredicate representsForAgent))
(tell (sumodocumentation representsForAgent "A very general predicate.
(&%representsForAgent ?THING ?ENTITY ?AGENT) means that the ?AGENT
chooses to use the &%instance of &%Physical ?THING to 'stand for'
?ENTITY."))


(tell (TernaryPredicate representsInLanguage))
(tell (sumodocumentation representsInLanguage "A very general predicate.
(&%representsInLanguage ?THING ?ENTITY ?LANGUAGE) means that the
&%instance of &%Physical ?THING stands for ?ENTITY in the language
?LANGUAGE."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (representsInLanguage ?REP ?ENTITY ?LANGUAGE)
;;    (exists (?AGENT)
;;       (representsForAgent ?REP ?ENTITY ?AGENT)))

(tell (EquivalenceSumorelation equivalentContentSumoclass))
(tell (sumodocumentation equivalentContentSumoclass "A &%BinaryPredicate that relates two
subclasses of &%ContentBearingObject.  (&%equivalentContentSumoclass ?CLASS1
?CLASS2) means that the content expressed by each instance of ?CLASS1 is
also expressed by each instance of ?CLASS2, and vice versa.  An example
would be the relationship between English and Russian editions of Agatha
Christie's 'Murder on the Orient Express'.  Note that
(&%equivalentContentSumoclass ?CLASS1 ?CLASS2) implies (&%subsumesContentSumoclass
?CLASS1 ?CLASS2) and (&%subsumesContentSumoclass ?CLASS2 ?CLASS1)."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (and
;;       (subsumesContentClass ?CLASS1 ?CLASS2)
;;       (subsumesContentClass ?CLASS2 ?CLASS1))
;;    (equivalentContentClass ?CLASS1 ?CLASS2))

(tell (BinaryPredicate subsumesContentSumoclass))
(tell (PartialOrderingSumorelation subsumesContentSumoclass))
(tell (sumodocumentation subsumesContentSumoclass "A &%BinaryPredicate that relates two
subclasses of &%ContentBearingObject.  (&%subsumesContentSumoclass ?CLASS1
?CLASS2) means that the content expressed by each instance of ?CLASS2 is
also expressed by each instance of ?CLASS1.  Examples include the
relationship between a poem and one of its stanzas or between a book and
one of its chapters.  Note that this is a relation between subclasses of
&%ContentBearingObject, rather than instances.  If one wants to relate
instances, the &%Predicate &%subsumesContentInstance can be used.  Note
that &%subsumesContentSumoclass is needed in many cases.  Consider, for
example, the relation between the King James edition of the Bible and its
Book of Genesis.  This relation holds for every copy of this edition and
not just for a single instance."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (<=>
;;    (subsumesContentClass ?CLASS1 ?CLASS2)
;;    (forall (?OBJ2 ?INFO)
;;       (=>
;;          (and
;; 	      (instance ?OBJ2 ?CLASS2)
;;               (containsInformation ?OBJ2 ?INFO))
;;          (exists (?OBJ1)
;;             (and
;;                (instance ?OBJ1 ?CLASS1)
;;                (containsInformation ?OBJ1 ?INFO))))))

(tell (EquivalenceSumorelation equivalentContentInstance))
(tell (relatedInternalConcept equivalentContentInstance equivalentContentSumoclass))
(tell (sumodocumentation equivalentContentInstance "A &%BinaryPredicate relating two
instances of &%ContentBearingObject.  (&%equivalentContentInstance
?OBJ1 ?OBJ2) means that the content expressed by ?OBJ1 is identical to
the content expressed by ?OBJ2.  An example would be the relationship
between a handwritten draft of a letter to one's lawyer and a typed
copy of the same letter.  Note that (&%equivalentContentInstance ?OBJ1
?OBJ2) implies (&%subsumesContentInstance ?OBJ1 ?OBJ2) and
(&%subsumesContentInstance ?OBJ2 ?OBJ2)."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (and
;;       (subsumesContentInstance ?OBJ1 ?OBJ2)
;;       (subsumesContentInstance ?OBJ2 ?OBJ1))
;;    (equivalentContentInstance ?OBJ1 ?OBJ2))

(tell (BinaryPredicate subsumesContentInstance))
(tell (PartialOrderingSumorelation subsumesContentInstance))
(tell (relatedInternalConcept subsumesContentInstance subsumesContentSumoclass))
(tell (sumodocumentation subsumesContentInstance "A &%BinaryPredicate relating two
instances of &%ContentBearingObject.  (&%subsumesContentInstance ?OBJ1 ?OBJ2)
means that the content expressed by ?OBJ2 is part of the content expressed
by ?OBJ1.  An example is the relationship between a handwritten poem and
one of its stanzas.  Note that this is a relation between instances,
rather than &%Sumoclasses.  If one wants to assert a content relationship
between &%Sumoclasses, e.g. between the version of an intellectual work and a
part of that work, the relation &%subsumesContentSumoclass should be used."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (<=>
;;    (subsumesContentInstance ?OBJ1 ?OBJ2)
;;    (forall (?INFO)
;;       (=>
;;          (containsInformation ?OBJ2 ?INFO)
;;          (containsInformation ?OBJ1 ?INFO))))

(tell (AsymmetricSumorelation realization))
(tell (relatedInternalConcept realization equivalentContentInstance))
(tell (relatedInternalConcept realization containsInformation))
(tell (sumodocumentation realization "A subrelation of &%represents.
(&%realization ?PROCESS ?PROP) means that ?PROCESS is a Process which
expresses the content of ?PROP. Examples include a particular musical
performance, which realizes the content of a musical score, or the
reading of a poem."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (realization ?PROCESS ?PROP)
;;    (exists (?OBJ)
;;       (and
;;          (instance ?OBJ ContentBearingObject)
;;          (containsInformation ?OBJ ?PROP))))

(tell (BinaryPredicate expressedInLanguage))
(tell (AsymmetricSumorelation expressedInLanguage))
(tell (sumodocumentation expressedInLanguage "(&%expressedInLanguage ?EXPRESS ?LANG)
means that ?EXPRESS is expressed in &%Language ?LANG."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(expressedInLanguage ?EXPRESS ?LANGUAGE)
;; 	(exists (?PROP)
;; 		(representsInLanguage ?EXPRESS ?PROP ?LANGUAGE)))

(tell (BinaryPredicate subSumoproposition))
(tell (TransitiveSumorelation subSumoproposition))
(tell (IrreflexiveSumorelation subSumoproposition))
(tell (sumodocumentation subSumoproposition "(&%subSumoproposition ?PROP1 ?PROP2) means that
?PROP1 is a &%Sumoproposition which is a proper part of the &%Sumoproposition ?PROP2.
In other words, &%subSumoproposition is the analogue of &%properPart for chunks
of abstract content."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (subProposition ?PROP1 ?PROP2)
;;    (forall (?OBJ1 ?OBJ2)
;;       (=>
;;          (and
;;             (containsInformation ?OBJ1 ?PROP1)
;;             (containsInformation ?OBJ2 ?PROP2))
;;          (subsumesContentInstance ?OBJ2 ?OBJ1))))

(tell (TransitiveSumorelation subPlan))
(tell (IrreflexiveSumorelation subPlan))
(tell (sumodocumentation subPlan "(&%subPlan ?PLAN1 ?PLAN2) means that ?PLAN1
is a &%Plan which is a proper part of ?PLAN2.  This relation is generally
used to relate a supporting &%Plan to the overall &%Plan in a particular
context."))

(tell (BinaryPredicate uses))
(tell (AsymmetricSumorelation uses))
(tell (sumodocumentation uses "(&%uses ?OBJECT AGENT) means that ?OBJECT is used by
?AGENT as an instrument in an unspecified &%Process.  This &%Predicate,
as its corresponding axiom indicates, is a composition of the &%CaseRoles
&%agent-rel and &%instrument."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;      (uses ?OBJ ?AGENT)
;;      (exists (?PROC)
;;           (and
;;                (agent ?PROC ?AGENT)
;;                (instrument ?PROC ?OBJ))))

;; END FILE

;; BEGIN FILE


;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  NUMERIC FUNCTIONS   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

;; INCLUDES 'STRUCTURAL ONTOLOGY'
;; INCLUDES 'BASE ONTOLOGY'

(tell (BinarySumofunction MultiplicationFn))
(tell (AssociativeSumofunction MultiplicationFn))
(tell (CommutativeSumofunction MultiplicationFn))
(tell (SumorelationExtendedToQuantities MultiplicationFn))
(tell (sumodocumentation MultiplicationFn "If ?NUMBER1 and ?NUMBER2 are &%Sumonumbers,
then (&%MultiplicationFn ?NUMBER1 ?NUMBER2) is the arithmetical product
of these numbers."))

(tell (BinarySumofunction AdditionFn))
(tell (AssociativeSumofunction AdditionFn))
(tell (CommutativeSumofunction AdditionFn))
(tell (SumorelationExtendedToQuantities AdditionFn))
(tell (sumodocumentation AdditionFn "If ?NUMBER1 and ?NUMBER2 are &%Sumonumbers, then
(&%AdditionFn ?NUMBER1 ?NUMBER2) is the arithmetical sum of these
numbers."))

(tell (BinarySumofunction SubtractionFn))
(tell (AssociativeSumofunction SubtractionFn))
(tell (SumorelationExtendedToQuantities SubtractionFn))
(tell (sumodocumentation SubtractionFn "If ?NUMBER1 and ?NUMBER2 are &%Sumonumbers,
then (&%SubtractionFn ?NUMBER1 ?NUMBER2) is the arithmetical difference
between ?NUMBER1 and ?NUMBER2, i.e. ?NUMBER1 minus ?NUMBER2.  An
exception occurs when ?NUMBER1 is equal to 0, in which case
(&%SubtractionFn ?NUMBER1 ?NUMBER2) is the negation of ?NUMBER2."))

(tell (BinarySumofunction DivisionFn))
(tell (AssociativeSumofunction DivisionFn))
(tell (SumorelationExtendedToQuantities DivisionFn))
(tell (sumodocumentation DivisionFn "If ?NUMBER1 and ?NUMBER2 are &%Sumonumbers, then
(&%DivisionFn ?NUMBER1 ?NUMBER2) is the result of dividing ?NUMBER1 by
?NUMBER2.  An exception occurs when ?NUMBER1 = 1, in which case
(&%DivisionFn ?NUMBER1 ?NUMBER2) is the reciprocal of ?NUMBER2."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?NUMBER RationalNumber)
;;    (exists (?INT1 ?INT2)
;;       (and
;;          (instance ?INT1 Integer)
;;          (instance ?INT2 Integer)
;;          (equal ?NUMBER (DivisionFn ?INT1 ?INT2)))))

(tell (UnarySumofunction AbsoluteValueFn))
(tell (sumodocumentation AbsoluteValueFn "The value of (&%AbsoluteValueFn ?NUMBER)
is the absolute value of the &%RealSumonumber ?NUMBER."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;      (equal (AbsoluteValueFn ?NUMBER1) ?NUMBER2)
;;      (or
;;          (and
;;               (instance ?NUMBER1 PositiveInteger)
;;               (equal ?NUMBER1 ?NUMBER2))
;;          (and
;;               (instance ?NUMBER1 NegativeInteger)
;;               (equal ?NUMBER2 (SubtractionFn 0 ?NUMBER1)))))

(tell (UnarySumofunction ArcCosineFn))
(tell (sumodocumentation ArcCosineFn "(&%ArcCosineFn ?NUMBER) returns the arc
cosine of the &%RealSumonumber ?NUMBER.  It is the &%sumoinverse of &%CosineFn."))

(tell (UnarySumofunction ArcSineFn))
(tell (sumodocumentation ArcSineFn "(&%ArcSineFn ?NUMBER) returns the arc sine of
the &%RealSumonumber ?NUMBER.  It is the &%sumoinverse of &%SineFn."))

(tell (UnarySumofunction ArcTangentFn))
(tell (sumodocumentation ArcTangentFn "(&%ArcTangentFn ?NUMBER) returns the arc
tangent of the &%RealSumonumber ?NUMBER.  It is the &%sumoinverse of &%TangentFn."))

(tell (UnarySumofunction CeilingFn))
(tell (sumodocumentation CeilingFn "(&%CeilingFn ?NUMBER) returns the smallest
&%Sumointeger greater than or equal to the &%RealSumonumber ?NUMBER."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (equal (CeilingFn ?NUMBER) ?INT)
;;    (not
;;       (exists (?OTHERINT)
;;          (and
;;             (instance ?OTHERINT Integer)
;;             (greaterThanOrEqualTo ?OTHERINT ?NUMBER)
;;             (lessThan ?OTHERINT ?INT)))))

(tell (UnarySumofunction CosineFn))
(tell (sumodocumentation CosineFn "(&%CosineFn ?DEGREE) returns the cosine of the
&%PlaneAngleMeasure ?DEGREE.  The cosine of ?DEGREE is the ratio of the
side next to ?DEGREE to the hypotenuse in a right-angled triangle."))

(tell (UnarySumofunction DenominatorFn))
(tell (sumodocumentation DenominatorFn "(&%DenominatorFn ?NUMBER) returns the
denominator of the canonical reduced form of the &%RealSumonumber ?NUMBER."))

(tell (BinarySumofunction ExponentiationFn))
(tell (SumorelationExtendedToQuantities ExponentiationFn))
(tell (sumodocumentation ExponentiationFn "(&%ExponentiationFn ?NUMBER ?INT) returns
the &%RealSumonumber ?NUMBER raised to the power of the &%Sumointeger ?INT."))

(tell (UnarySumofunction FloorFn))
(tell (sumodocumentation FloorFn "(&%FloorFn ?NUMBER) returns the largest &%Sumointeger
less than or equal to the &%RealSumonumber ?NUMBER."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (equal (FloorFn ?NUMBER) ?INT)
;;    (not
;;       (exists (?OTHERINT)
;;          (and
;;             (instance ?OTHERINT Integer)
;;             (lessThanOrEqualTo ?OTHERINT ?NUMBER)
;;             (greaterThan ?OTHERINT ?INT)))))

(tell (Sumofunction GreatestCommonDivisorFn))
(tell (VariableAritySumorelation GreatestCommonDivisorFn))
(tell (sumodocumentation GreatestCommonDivisorFn "(&%GreatestCommonDivisorFn
?NUMBER1 ?NUMBER2 ... ?NUMBER) returns the greatest common divisor of
?NUMBER1 through ?NUMBER."))

;; sumo2loom is dropping the following statement because it uses
;; GreatestCommonDivisorFn, which is a VariableArityRelation:
;; (=>
;;    (equal (GreatestCommonDivisorFn @ROW) ?NUMBER)
;;    (forall (?ELEMENT)
;;       (=>
;;          (inList ?ELEMENT (ListFn @ROW))
;;          (equal (RemainderFn ?ELEMENT ?NUMBER) 0))))

;; sumo2loom is dropping the following statement because it uses
;; GreatestCommonDivisorFn, which is a VariableArityRelation:
;; (=>
;;    (equal (GreatestCommonDivisorFn @ROW) ?NUMBER)
;;    (not (exists (?GREATER)
;;       (and
;;          (greaterThan ?GREATER ?NUMBER)
;;          (forall (?ELEMENT)
;;             (=>
;;                (inList ?ELEMENT (ListFn @ROW))
;;                (equal (RemainderFn ?ELEMENT ?GREATER) 0)))))))

(tell (UnarySumofunction ImaginaryPartFn))
(tell (sumodocumentation ImaginaryPartFn "(&%ImaginaryPartFn ?NUMBER) returns
the part of ?NUMBER that has the square root of -1 as its factor."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?NUMBER ComplexNumber)
;;    (exists (?PART1 ?PART2)
;;       (and
;;          (equal ?PART1 (RealNumberFn ?NUMBER))
;;          (equal ?PART2 (ImaginaryPartFn ?NUMBER)))))

(tell (UnarySumofunction SumointegerSquareRootFn))
(tell (sumodocumentation SumointegerSquareRootFn "(&%SumointegerSquareRootFn ?NUMBER)
returns the integer square root of ?NUMBER."))

(tell (Sumofunction LeastCommonMultipleFn))
(tell (VariableAritySumorelation LeastCommonMultipleFn))
(tell (sumodocumentation LeastCommonMultipleFn "(&%LeastCommonMultipleFn
?NUMBER1 ?NUMBER2 ... ?NUMBER) returns the least common multiple of
?NUMBER1 through ?NUMBER."))

;; sumo2loom is dropping the following statement because it uses
;; LeastCommonMultipleFn, which is a VariableArityRelation:
;; (=>
;;    (equal (LeastCommonMultipleFn @ROW) ?NUMBER)
;;    (forall (?ELEMENT)
;;       (=>
;;          (inList ?ELEMENT (ListFn @ROW))
;;          (equal (RemainderFn ?NUMBER ?ELEMENT) 0))))

;; sumo2loom is dropping the following statement because it uses
;; LeastCommonMultipleFn, which is a VariableArityRelation:
;; (=>
;;    (equal (LeastCommonMultipleFn @ROW) ?NUMBER)
;;    (not (exists (?LESS)
;;       (and
;;          (lessThan ?LESS ?NUMBER)
;;          (forall (?ELEMENT)
;;             (=>
;;                (inList ?ELEMENT (ListFn @ROW))
;;                (equal (RemainderFn ?LESS ?ELEMENT) 0)))))))

(tell (BinarySumofunction LogFn))
(tell (sumodocumentation LogFn "(LogFn ?NUMBER ?INT) returns the logarithm of the
&%RealSumonumber ?NUMBER in the base denoted by the &%Sumointeger ?INT."))

(tell (BinarySumofunction MaxFn))
(tell (AssociativeSumofunction MaxFn))
(tell (CommutativeSumofunction MaxFn))
(tell (SumorelationExtendedToQuantities MaxFn))
(tell (sumodocumentation MaxFn "(&%MaxFn ?NUMBER1 ?NUMBER2) is the largest of
?NUMBER1 and ?NUMBER2.  In cases where ?NUMBER1 is equal to ?NUMBER2,
&%MaxFn returns one of its arguments."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (equal (MaxFn ?NUMBER1 ?NUMBER2) ?NUMBER)
;;    (or
;;       (and
;;          (equal ?NUMBER ?NUMBER1)
;;          (greaterThan ?NUMBER1 ?NUMBER2))
;;       (and
;;          (equal ?NUMBER ?NUMBER2)
;;          (greaterThan ?NUMBER2 ?NUMBER1))
;;       (and
;;          (equal ?NUMBER ?NUMBER1)
;;          (equal ?NUMBER ?NUMBER2))))

(tell (BinarySumofunction MinFn))
(tell (AssociativeSumofunction MinFn))
(tell (CommutativeSumofunction MinFn))
(tell (SumorelationExtendedToQuantities MinFn))
(tell (sumodocumentation MinFn "(&%MinFn ?NUMBER1 ?NUMBER2) is the smallest of
?NUMBER1 and ?NUMBER2.  In cases where ?NUMBER1 is equal to ?NUMBER2,
&%MinFn returns one of its arguments."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (equal (MinFn ?NUMBER1 ?NUMBER2) ?NUMBER)
;;    (or
;;       (and
;;          (equal ?NUMBER ?NUMBER1)
;;          (lessThan ?NUMBER1 ?NUMBER2))
;;       (and
;;          (equal ?NUMBER ?NUMBER2)
;;          (lessThan ?NUMBER2 ?NUMBER1))
;;       (and
;;          (equal ?NUMBER ?NUMBER1)
;;          (equal ?NUMBER ?NUMBER2))))

(tell (UnarySumofunction NumeratorFn))
(tell (sumodocumentation NumeratorFn "(&%NumeratorFn ?NUMBER) returns the numerator
of the canonical reduced form ?NUMBER."))

(tell (PositiveRealSumonumber Pi))
(tell (sumodocumentation Pi "&%Pi is the &%RealSumonumber that
is the ratio of the perimeter of a circle to its diameter.  It is
approximately equal to 3.141592653589793."))

(tell (PositiveRealSumonumber SumonumberE))
(tell (sumodocumentation SumonumberE "&%SumonumberE is the &%RealSumonumber that is the base for
natural logarithms.  It is approximately equal to 2.718282."))

(tell (UnarySumofunction RationalSumonumberFn))
(tell (sumodocumentation RationalSumonumberFn "(&%RationalSumonumberFn ?NUMBER) returns
the rational representation of ?NUMBER."))

(tell (UnarySumofunction RealSumonumberFn))
(tell (sumodocumentation RealSumonumberFn "(RealSumonumberFn ?NUMBER) returns the part of
?NUMBER that is a &%RealSumonumber."))

(tell (UnarySumofunction ReciprocalFn))
(tell (SumorelationExtendedToQuantities ReciprocalFn))
(tell (sumodocumentation ReciprocalFn "(ReciprocalFn ?NUMBER) is the reciprocal
element of ?NUMBER with respect to the multiplication operator
(&%MultiplicationFn), i.e. 1/?NUMBER.  Not all numbers have a reciprocal
element.  For example the number 0 does not.  If a number ?NUMBER has a
reciprocal ?RECIP, then the product of ?NUMBER and ?RECIP will be
1, e.g. 3*1/3 = 1.  The reciprocal of an element is &%equal to
applying the &%ExponentiationFn function to the element to the power
-1."))



(tell (BinarySumofunction RemainderFn))
(tell (SumorelationExtendedToQuantities RemainderFn))
(tell (sumodocumentation RemainderFn "(RemainderFn ?NUMBER ?DIVISOR) is the
remainder of the number ?NUMBER divided by the number ?DIVISOR.
The result has the same sign as ?DIVISOR."))






;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?PRIME PrimeNumber)
;;    (forall (?NUMBER)
;;       (=>
;;          (equal (RemainderFn ?PRIME ?NUMBER) 0)
;;          (or
;;             (equal ?NUMBER 1)
;;             (equal ?NUMBER ?PRIME)))))

(tell (UnarySumofunction RoundFn))
(tell (SumorelationExtendedToQuantities RoundFn))
(tell (sumodocumentation RoundFn "(&%RoundFn ?NUMBER) is the &%Sumointeger closest
to ?NUMBER on the number line.  If ?NUMBER is halfway between two
&%Sumointegers (for example 3.5), it denotes the larger &%Sumointeger."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (equal (RoundFn ?NUMBER1) ?NUMBER2)
;;    (or
;;       (=>
;;          (lessThan (SubtractionFn ?NUMBER1 (FloorFn ?NUMBER1)) 0.5)
;;          (equal ?NUMBER2 (FloorFn ?NUMBER1)))
;;       (=>
;;          (greaterThanOrEqualTo (SubtractionFn ?NUMBER1 (FloorFn ?NUMBER1)) 0.5)
;;          (equal ?NUMBER2 (CeilingFn ?NUMBER1)))))

(tell (UnarySumofunction SignumFn))
(tell (sumodocumentation SignumFn "(SignumFn ?NUMBER) denotes the sign of ?NUMBER.
This is one of the following values:  -1, 1, or 0."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?NUMBER NonnegativeRealNumber)
;;    (or
;;       (equal (SignumFn ?NUMBER) 1)
;;       (equal (SignumFn ?NUMBER) 0)))



(tell (UnarySumofunction SineFn))
(tell (sumodocumentation SineFn "(&%SineFn ?DEGREE) is the sine of the
&%PlaneAngleMeasure ?DEGREE.  The sine of ?DEGREE is the ratio of the side
opposite ?DEGREE to the hypotenuse in a right-angled triangle."))

(tell (UnarySumofunction SquareRootFn))
(tell (sumodocumentation SquareRootFn "(SquareRootFn ?NUMBER) is the principal
square root of ?NUMBER."))


(tell (UnarySumofunction TangentFn))
(tell (sumodocumentation TangentFn "(&%TangentFn ?DEGREE) is the tangent of the
&%PlaneAngleMeasure ?DEGREE.  The tangent of ?DEGREE is the ratio of
the side opposite ?DEGREE to the side next to ?DEGREE in a right-angled
triangle."))


(tell (UnarySumofunction IdentityFn))
(tell (sumodocumentation IdentityFn "The value of the identity function is
just its argument."))

;; sumo2loom is dropping the following statement because it
;; wants to be an implication:
;; (equal (IdentityFn ?INST) ?INST)

(tell (BinaryPredicate identityElement))
(tell (AsymmetricSumorelation identityElement))
(tell (sumodocumentation identityElement "An object ?ID is the identity element
for BinarySumofunction ?FUNCTION just in case, for every instance ?INST,
applying ?FUNCTION to ?INST and ?ID results in ?INST."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (identityElement ?FUNCTION ?ID)
;;    (forall (?INST)
;;       (=>
;;          (instance ?INST (DomainFn ?FUNCTION))
;;          (equal (AssignmentFn ?FUNCTION ?ID ?INST) ?INST))))

(tell (identityElement MultiplicationFn 1))
(tell (identityElement AdditionFn 0))
(tell (identityElement SubtractionFn 0))
(tell (identityElement DivisionFn 1))

(tell (UnarySumofunction SuccessorFn))
(tell (sumodocumentation SuccessorFn "A &%UnarySumofunction that maps an &%Sumointeger to
its successor, e.g. the successor of 5 is 6."))



;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?INT1 Integer)
;;       (instance ?INT2 Integer))
;;    (not
;;       (and
;;          (lessThan ?INT1 ?INT2)
;;          (lessThan ?INT2 (SuccessorFn ?INT1)))))



(tell (UnarySumofunction PredecessorFn))
(tell (sumodocumentation PredecessorFn "A &%UnarySumofunction that maps an &%Sumointeger to
its predecessor, e.g. the predecessor of 5 is 4."))



;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?INT1 Integer)
;;       (instance ?INT2 Integer))
;;    (not
;;       (and
;;          (lessThan ?INT2 ?INT1)
;;          (lessThan (PredecessorFn ?INT1) ?INT2))))

;; END FILE

;; BEGIN FILE


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;     SET/CLASS THEORY      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; INCLUDES 'STRUCTURAL ONTOLOGY'
;; INCLUDES 'BASE ONTOLOGY'

;; The following part of the ontology covers set-theoretic predicates
;; and functions.  Most of the content here is taken from the kif-sets
;; ontology (available on the Ontolingua server).

(tell (sumodocumentation Sumosubset "(Sumosubset ?SET1 ?SET2) is true just in case the
&%elements of the &%Sumoset ?SET1 are also &%elements of the &%Sumoset ?SET2."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (subset ?SUBSET ?SET)
;;    (forall (?ELEMENT)
;;       (=>
;;          (element ?ELEMENT ?SUBSET)
;;          (element ?ELEMENT ?SET))))

(tell (BinaryPredicate element))
(tell (AsymmetricSumorelation element))
(tell (IntransitiveSumorelation element))
(tell (sumodocumentation element "(element ?ENTITY ?SET) is true just in case
?ENTITY is contained in the &%Sumoset ?SET.  An &%Entity can be an &%element
of another &%Entity only if the latter is a &%Sumoset."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (forall (?ELEMENT)
;;          (<=>
;;             (element ?ELEMENT ?SET1)
;;             (element ?ELEMENT ?SET2)))
;;    (equal ?SET1 ?SET2))

(tell (BinarySumofunction UnionFn))
(tell (sumodocumentation UnionFn "A &%BinarySumofunction that maps two &%Sumoclasses to
the union of these &%Sumoclasses.  An object is an instance of the union of
two &%Sumoclasses just in case it is an instance of either &%SumosetOrSumoclass."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (instance ?ENTITY (UnionFn ?CLASS1 ?CLASS2))
;;    (or
;;       (instance ?ENTITY ?CLASS1)
;;       (instance ?ENTITY ?CLASS2)))

(tell (BinarySumofunction IntersectionFn))
(tell (sumodocumentation IntersectionFn "A &%BinarySumofunction that maps two
%Sumoclasses to the intersection of these &%Sumoclasses.  An object is an instance
of the intersection of two &%Sumoclasses just in case it is an instance of
both of those &%Sumoclasses."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (instance ?ENTITY (IntersectionFn ?CLASS1 ?CLASS2))
;;    (and
;;       (instance ?ENTITY ?CLASS1)
;;       (instance ?ENTITY ?CLASS2)))

(tell (BinarySumofunction RelativeComplementFn))
(tell (sumodocumentation RelativeComplementFn "A &%BinarySumofunction that maps two
&%Sumoclasses to the difference between these &%Sumoclasses.  More precisely,
the relative complement of one class C1 relative to another C2 consists
of the instances of C1 that are instances of the &%ComplementFn of C2."))



(tell (UnarySumofunction ComplementFn))
(tell (sumodocumentation ComplementFn "The complement of a given &%SumosetOrSumoclass C is the
&%SumosetOrSumoclass of all things that are not instances of C.  In other words, an
object is an instance of the complement of a &%SumosetOrSumoclass C just in case it
is not an instance of C."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (instance ?ENTITY (ComplementFn ?CLASS))
;;    (not
;;       (instance ?ENTITY ?CLASS)))

(tell (UnarySumofunction GeneralizedUnionFn))
(tell (sumodocumentation GeneralizedUnionFn "A &%UnarySumofunction that takes a &%SumosetOrSumoclass
of &%Sumoclasses as its single argument and returns a &%SumosetOrSumoclass which is the
merge of all of the &%Sumoclasses in the original &%SumosetOrSumoclass, i.e. the &%SumosetOrSumoclass
containing just those instances which are instances of an instance of the
original &%SumosetOrSumoclass."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (instance ?ENTITY (GeneralizedUnionFn ?SUPERCLASS))
;;    (exists (?CLASS)
;;       (and
;;          (instance ?CLASS ?SUPERCLASS)
;;          (instance ?ENTITY ?CLASS))))

(tell (UnarySumofunction GeneralizedIntersectionFn))
(tell (sumodocumentation GeneralizedIntersectionFn "A &%UnarySumofunction that takes a
&%SumosetOrSumoclass of &%Sumoclasses as its single argument and returns a &%SumosetOrSumoclass which
is the intersection of all of the &%Sumoclasses in the original &%SumosetOrSumoclass, i.e.
the &%SumosetOrSumoclass containing just those instances which are instances of all
instances of the original &%SumosetOrSumoclass."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (<=>
;;    (instance ?ENTITY (GeneralizedIntersectionFn ?SUPERCLASS))
;;    (forall (?CLASS)
;;          (=>
;;             (instance ?CLASS ?SUPERCLASS)
;;             (instance ?ENTITY ?CLASS))))

(tell (UnarySumofunction CardinalityFn))
(tell (AsymmetricSumorelation CardinalityFn))
(tell (sumodocumentation CardinalityFn "(CardinalityFn ?CLASS) returns the
number of instances in the &%SumosetOrSumoclass or &%Sumocollection ?CLASS."))

(tell (Sumoset NullSumoset))
(tell (sumodocumentation NullSumoset "The &%Sumoset that contains no instances."))

;; sumo2loom is dropping the following statement because it
;; wants to be an implication:
;; (equal NullSet (ComplementFn Entity))

(tell (sumodocumentation FiniteSumoset "A &%Sumoset containing a finite number of elements."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?SET FiniteSet)
;;    (exists (?NUMBER)
;;       (and
;;          (instance ?NUMBER NonnegativeInteger)
;;          (equal ?NUMBER (CardinalityFn ?SET)))))

(tell (sumodocumentation PairwiseDisjointSumoclass "A &%SumosetOrSumoclass of &%Sumoclasses is a
&%PairwiseDisjointSumoclass just in case every instance of the &%SumosetOrSumoclass
is either &%equal to or &%sumodisjoint from every other instance of the
&%SumosetOrSumoclass."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?SUPERCLASS PairwiseDisjointClass)
;;    (forall (?CLASS1 ?CLASS2)
;;       (=>
;;          (and
;;             (instance ?CLASS1 ?SUPERCLASS)
;;             (instance ?CLASS2 ?SUPERCLASS))
;;          (or
;;             (equal ?CLASS1 ?CLASS2)
;;             (disjoint ?CLASS1 ?CLASS2)))))

(tell (sumodocumentation MutuallyDisjointSumoclass "A &%SumosetOrSumoclass of &%Sumoclasses is a
&%MutuallyDisjointSumoclass just in case there exists no instance of an
instance of the original &%SumosetOrSumoclass which is an instance of all of the
instances of the original &%SumosetOrSumoclass."))


(tell (BinarySumofunction KappaFn))
(tell (sumodocumentation KappaFn "A class-forming operator that takes two
arguments:  a variable and a formula containing at least one unbound
occurrence of the variable.  The result of applying &%KappaFn to a
variable and a formula is the &%SumosetOrSumoclass of things that satisfy the formula.
For example, we can denote the &%SumosetOrSumoclass of prime numbers that are less
than 100 with the following expression:  (KappaFn ?NUMBER
(and (instance ?NUMBER PrimeSumonumber) (lessThan ?NUMBER 100))).  Note that
the use of this function is discouraged, since there is currently no
axiomatic support for it."))

;; END FILE

;; BEGIN FILE


;;;;;;;;;;;;;;;;;;;;;
;;  GRAPH THEORY   ;;
;;;;;;;;;;;;;;;;;;;;;

(tell (sumodocumentation Graph "The &%Sumoclass of graphs, where a graph is understood
to be a set of &%GraphNodes connected by &%GraphArcs.  Note that this
&%Sumoclass includes only connected graphs, i.e. graphs in which there is a
&%GraphPath between any two &%GraphNodes.  Note too that every &%Graph
is assumed to contain at least two &%GraphArcs and three &%GraphNodes."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?GRAPH Graph)
;;       (instance ?NODE1 GraphNode)
;;       (instance ?NODE2 GraphNode)
;;       (graphPart ?NODE1 ?GRAPH)
;;       (graphPart ?NODE2 ?GRAPH)
;;       (not (equal ?NODE1 ?NODE2)))
;;    (exists (?ARC ?PATH)
;;       (or
;;          (links ?NODE1 ?NODE2 ?ARC)
;;          (and
;;             (subGraph ?PATH ?GRAPH)
;;             (instance ?PATH GraphPath)
;;             (or
;;                (and
;;                   (equal (BeginNodeFn ?PATH) ?NODE1)
;;                   (equal (EndNodeFn ?PATH) ?NODE2))
;;                (and
;;                   (equal (BeginNodeFn ?PATH) ?NODE2)
;;                   (equal (EndNodeFn ?PATH) ?NODE1)))))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?GRAPH Graph)
;;    (exists (?NODE1 ?NODE2 ?NODE3 ?ARC1 ?ARC2)
;;       (and
;;          (graphPart ?NODE1 ?GRAPH)
;;          (graphPart ?NODE2 ?GRAPH)
;;          (graphPart ?NODE3 ?GRAPH)
;;          (graphPart ?ARC1 ?GRAPH)
;;          (graphPart ?ARC2 ?GRAPH)
;;          (links ?ARC1 ?NODE1 ?NODE2)
;;          (links ?ARC2 ?NODE2 ?NODE3)
;;          (not (equal ?NODE1 ?NODE2))
;;          (not (equal ?NODE2 ?NODE3))
;; 	   (not (equal ?NODE1 ?NODE3))
;;          (not (equal ?ARC1 ?ARC2)))))

(tell (sumodocumentation DirectedGraph "The &%Sumoclass of directed graphs.  A
directed graph is a &%Graph in which all &%GraphArcs
have direction, i.e. every &%GraphArc has an initial node (see
&%InitialNodeFn) and a terminal node (see &%TerminalNodeFn)."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?GRAPH DirectedGraph)
;;       (instance ?ARC GraphArc)
;;       (graphPart ?ARC ?GRAPH))
;;    (exists (?NODE1 ?NODE2)
;;       (and
;;          (equal (InitialNodeFn ?ARC) ?NODE1)
;;          (equal (TerminalNodeFn ?ARC) ?NODE2))))

(tell (sumodocumentation Tree "A Tree is a &%DirectedGraph that has no
&%GraphLoops."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?GRAPH Tree)
;;    (not (exists (?LOOP)
;;       (and
;;          (instance ?LOOP GraphLoop)
;;          (graphPart ?LOOP ?GRAPH)))))

(tell (sumodocumentation GraphPath "Informally, a single, directed route between
two &%GraphNodes in a &%Graph.  Formally, a &%DirectedGraph that is a
&%subGraph of the original &%Graph and such that no two &%GraphArcs in
the &%DirectedGraph have the same intial node (see &%InitialNodeFn) or
the same terminal node (see &%TerminalNodeFn)."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?GRAPH GraphPath)
;;       (instance ?ARC GraphArc)
;;       (graphPart ?ARC ?GRAPH))
;;    (=>
;;       (equal (InitialNodeFn ?ARC) ?NODE)
;;       (not (exists (?OTHER)
;;          (and
;;             (equal (InitialNodeFn ?OTHER) ?NODE)
;;             (not (equal ?OTHER ?ARC)))))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?GRAPH GraphPath)
;;       (instance ?ARC GraphArc)
;;       (graphPart ?ARC ?GRAPH))
;;    (=>
;;       (equal (TerminalNodeFn ?ARC) ?NODE)
;;       (not (exists (?OTHER)
;;          (and
;;             (equal (TerminalNodeFn ?OTHER) ?NODE)
;;             (not (equal ?OTHER ?ARC)))))))

(tell (sumodocumentation GraphCircuit "A &%GraphPath that begins (see
&%BeginNodeFn) and ends (see &%EndNodeFn) at the same
&%GraphNode."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (instance ?GRAPH GraphCircuit)
;;    (exists (?NODE)
;;       (and
;;          (equal (BeginNodeFn ?GRAPH) ?NODE)
;;          (equal (EndNodeFn ?GRAPH) ?NODE))))

(tell (sumodocumentation MultiGraph "The &%Sumoclass of multigraphs.  A multigraph
is a &%Graph containing at least one pair of &%GraphNodes that are
connected by more than one &%GraphArc."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (instance ?GRAPH MultiGraph)
;;    (exists (?ARC1 ?ARC2 ?NODE1 ?NODE2)
;;       (and
;;          (graphPart ?ARC1 ?GRAPH)
;;          (graphPart ?ARC2 ?GRAPH)
;;          (graphPart ?NODE1 ?GRAPH)
;;          (graphPart ?NODE2 ?GRAPH)
;;          (links ?NODE1 ?NODE2 ?ARC1)
;;          (links ?NODE1 ?NODE2 ?ARC2)
;;          (not (equal ?ARC1 ?ARC2)))))

(tell (sumodocumentation PseudoGraph "The &%Sumoclass of pseudographs.  A pseudograph
is a &%Graph containing at least one &%GraphLoop."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (instance ?GRAPH PseudoGraph)
;;    (exists (?LOOP)
;;       (and
;;          (instance ?LOOP GraphLoop)
;;          (graphPart ?LOOP ?GRAPH))))

(tell (sumodocumentation GraphElement "Noncompositional parts of &%Graphs.
These parts are restricted to &%GraphNodes and &%GraphArcs."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?PART GraphElement)
;;    (exists (?GRAPH)
;;       (and
;;          (instance ?GRAPH Graph)
;;          (graphPart ?PART ?GRAPH))))

(tell (sumodocumentation GraphNode "&%Graphs are comprised of &%GraphNodes
and &%GraphArcs.  Every &%GraphNode is linked by a &%GraphArc."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?NODE GraphNode)
;;    (exists (?OTHER ?ARC)
;;       (links ?NODE ?OTHER ?ARC)))

(tell (sumodocumentation GraphArc "&%Graphs are comprised of &%GraphNodes
and &%GraphArcs.  Every &%GraphArc links two &%GraphNodes."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?ARC GraphArc)
;;    (exists (?NODE1 ?NODE2)
;;       (links ?NODE1 ?NODE2 ?ARC)))

(tell (sumodocumentation GraphLoop "A &%GraphArc in which a &%GraphNode is
linked to itself."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (instance ?LOOP GraphLoop)
;;    (exists (?NODE)
;;       (links ?NODE ?NODE ?LOOP)))


(tell (TernaryPredicate links))
(tell (sumodocumentation links "a &%TernaryPredicate that specifies the
&%GraphArc connecting two &%GraphNodes."))


(tell (BinaryPredicate graphPart))
(tell (AsymmetricSumorelation graphPart))
(tell (IrreflexiveSumorelation graphPart))
(tell (sumodocumentation graphPart "A basic relation for &%Graphs and their
parts.  (&%graphPart ?PART ?GRAPH) means that ?PART is a &%GraphArc
or &%GraphNode of the &%Graph ?GRAPH."))

(tell (BinaryPredicate subGraph))
(tell (ReflexiveSumorelation subGraph))
(tell (TransitiveSumorelation subGraph))
(tell (sumodocumentation subGraph "The relation between two &%Graphs when one
&%Graph is a part of the other.  (&%subGraph ?GRAPH1 ?GRAPH2) means
that ?GRAPH1 is a part of ?GRAPH2."))


(tell (BinaryPredicate pathLength))
(tell (AsymmetricSumorelation pathLength))
(tell (IrreflexiveSumorelation pathLength))
(tell (sumodocumentation pathLength "A &%BinaryPredicate that specifies the
length (in number of &%GraphNodes) of a &%GraphPath.
(&%pathLength ?PATH ?NUMBER) means that there are ?NUMBER nodes in
the &%GraphPath ?PATH."))

(tell (UnarySumofunction InitialNodeFn))
(tell (sumodocumentation InitialNodeFn "A &%UnarySumofunction that maps a
&%GraphArc to the initial node of the &%GraphArc.  Note
that this is a partial function.  In particular, the function is
undefined for &%GraphArcs that are not part of a &%DirectedGraph."))

(tell (UnarySumofunction TerminalNodeFn))
(tell (sumodocumentation TerminalNodeFn "A &%UnarySumofunction that maps a
&%GraphArc to the terminal node of the &%GraphArc.  Note that this
is a partial function.  In particular, the function is undefined
for &%GraphArcs that are not part of a &%DirectedGraph."))

(tell (UnarySumofunction BeginNodeFn))
(tell (relatedInternalConcept BeginNodeFn InitialNodeFn))
(tell (sumodocumentation BeginNodeFn "A &%UnarySumofunction that maps a &%GraphPath
to the &%GraphNode that is the beginning of the &%GraphPath.  Note that,
unlike &%InitialNodeFn (which relates a &%GraphArc to a &%GraphNode),
&%BeginNodeFn is a total function - every &%GraphPath has a beginning."))

(tell (UnarySumofunction EndNodeFn))
(tell (relatedInternalConcept EndNodeFn TerminalNodeFn))
(tell (sumodocumentation EndNodeFn "A &%UnarySumofunction that maps a &%GraphPath
to the &%GraphNode that is the end of the &%GraphPath.  Note that, unlike
&%TerminalNodeFn (which relates a &%GraphArc to a &%GraphNode),
&%EndNodeFn is a total function - every &%GraphPath has a end."))

(tell (BinaryPredicate arcWeight))
(tell (sumodocumentation arcWeight "This predicate indicates the value of a
&%GraphArc in a &%Graph.  This could map to the length of a road in
a road network or the flow rate of a pipe in a plumbing system."))

(tell (UnarySumofunction PathWeightFn))
(tell (sumodocumentation PathWeightFn "A &%UnarySumofunction that maps a
&%GraphPath to the sum of the &%arcWeights on the &%GraphArcs in
the &%GraphPath."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (and
;;       (equal (PathWeightFn ?PATH) ?SUM)
;;       (subGraph ?SUBPATH ?PATH)
;;       (graphPart ?ARC1 ?PATH)
;;       (arcWeight ?ARC1 ?NUMBER1)
;;       (forall (?ARC2)
;;          (=>
;;             (graphPart ?ARC2 ?PATH)
;;             (or
;;                (graphPart ?ARC2 ?SUBPATH)
;;                (equal ?ARC2 ?ARC1)))))
;;    (equal ?SUM (AdditionFn (PathWeightFn ?SUBPATH) ?NUMBER1)))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (and
;;       (equal (PathWeightFn ?PATH) ?SUM)
;;       (graphPart ?ARC1 ?PATH)
;;       (graphPart ?ARC2 ?PATH)
;;       (arcWeight ?ARC1 ?NUMBER1)
;;       (arcWeight ?ARC2 ?NUMBER2)
;;       (forall (?ARC3)
;;          (=>
;;             (graphPart ?ARC3 ?PATH)
;;             (or
;;                (equal ?ARC3 ?ARC1)
;;                (equal ?ARC3 ?ARC2)))))
;;    (equal (PathWeightFn ?PATH) (AdditionFn ?NUMBER1 ?NUMBER2)))

(tell (BinarySumofunction MinimalWeightedPathFn))
(tell (sumodocumentation MinimalWeightedPathFn "This &%BinarySumofunction assigns two
&%GraphNodes to the &%GraphPath with the smallest sum of weighted arcs
between the two &%GraphNodes."))


;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (and
;;       (equal (MinimalWeightedPathFn ?NODE1 ?NODE2) ?PATH)
;;       (equal (PathWeightFn ?PATH) ?NUMBER))
;;    (forall (?PATH2)
;;       (=>
;;          (and
;;             (instance ?PATH2 (GraphPathFn ?NODE1 ?NODE2))
;;             (equal (PathWeightFn ?PATH2) ?NUMBER2))
;;          (greaterThanOrEqualTo ?NUMBER2 ?NUMBER1))))

(tell (BinarySumofunction MaximalWeightedPathFn))
(tell (sumodocumentation MaximalWeightedPathFn "This &%BinarySumofunction assigns two
&%GraphNodes to the &%GraphPath with the largest sum of weighted arcs
between the two &%GraphNodes."))


;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (and
;;       (equal (MaximalWeightedPathFn ?NODE1 ?NODE2) ?PATH)
;;       (equal (PathWeightFn ?PATH) ?NUMBER))
;;    (forall (?PATH2)
;;       (=>
;;          (and
;;             (instance ?PATH2 (GraphPathFn ?NODE1 ?NODE2))
;;             (equal (PathWeightFn ?PATH2) ?NUMBER2))
;;          (lessThanOrEqualTo ?NUMBER2 ?NUMBER1))))

(tell (BinarySumofunction GraphPathFn))
(tell (sumodocumentation GraphPathFn "A &%BinarySumofunction that maps two &%GraphNodes
to the &%Sumoclass of &%GraphPaths between those two nodes.  Note that the two
&%GraphNodes must belong to the same &%Graph."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (graphPart ?PATH ?GRAPH)
;;       (not (instance ?GRAPH DirectedGraph)))
;;    (<=>
;;       (equal (GraphPathFn ?NODE1 ?NODE2) ?PATH)
;;       (equal (GraphPathFn ?NODE2 ?NODE1) ?PATH)))

(tell (UnarySumofunction CutSumosetFn))
(tell (sumodocumentation CutSumosetFn "A &%UnarySumofunction that assigns a &%Graph the
&%Sumoclass of &%GraphPaths that partition the graph into two separate
graphs if cut.  There may be more than one cutset for a given graph."))

(tell (UnarySumofunction MinimalCutSumosetFn))
(tell (relatedInternalConcept MinimalCutSumosetFn CutSumosetFn))
(tell (sumodocumentation MinimalCutSumosetFn "A &%UnarySumofunction that assigns a &%Graph
the &%Sumoclass of &%GraphPaths which comprise cutsets for the &%Graph and
which have the least number of &%GraphArcs."))


;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (equal (MinimalCutSetFn ?GRAPH) ?PATHCLASS)
;;    (exists (?NUMBER)
;;       (forall (?PATH)
;;          (=>
;;             (instance ?PATH ?PATHCLASS)
;;             (pathLength ?PATH ?NUMBER)))))

;; sumo2loom is dropping the following statement because it
;; wants to be an implication:
;; (not (exists (?PATH1 ?PATH2)
;;    (and
;;       (instance ?PATH1 (CutSetFn ?GRAPH))
;;       (instance ?PATH2 (MinimalCutSetFn ?GRAPH))
;;       (pathLength ?PATH1 ?NUMBER1)
;;       (pathLength ?PATH2 ?NUMBER2)
;;       (lessThan ?NUMBER1 ?NUMBER2))))

;; END FILE

;; BEGIN FILE


;;;;;;;;;;;;;;;;;;;;;;;;;
;;  UNITS OF MEASURE   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

;; INCLUDES 'NUMERIC FUNCTIONS'

;; This section was originally based on the relations in the Quantities
;; ontology (developed by ITBM-CNR) and the units of measure in the
;; "Standard Units" and "Standard Dimensions" ontologies on the Ontolingua
;; server.  This content has been extensively revised by Helena Sofia Pinto
;; of the Instituto Superior Tecnico in Portugal.  The sources for these
;; revisions were:
;; - Barry Taylor, NIST Special Publication 811, Guide for the Use of the
;;   International System of Units (SI), 1995.
;; - Encyclopaedia Britannica (on-line version at http://www.britannica.com)

(tell (sumodocumentation UnitOfMeasure "A standard of measurement for some dimension.
For example, the &%Meter is a &%UnitOfMeasure for the dimension of length,
as is the &%Inch.  There is no intrinsic sumoproperty of a &%UnitOfMeasure that
makes it primitive or fundamental; rather, a system of units (e.g.
&%SystemeInternationalUnit) defines a set of orthogonal dimensions and
assigns units for each."))

(tell (sumodocumentation SystemeInternationalUnit "The &%Sumoclass of Systeme
International (SI) units."))

(tell (sumodocumentation LengthMeasure "The &%Sumoclass of &%ConstantQuantities relating
to length."))

(tell (sumodocumentation MassMeasure "The &%Sumoclass of &%ConstantQuantities relating
to the amount of matter in an &%Object."))

(tell (sumodocumentation AreaMeasure "Measures of the amount of space in two
dimensions."))

(tell (sumodocumentation VolumeMeasure "Measures of the amount of space in three
dimensions."))

(tell (sumodocumentation TemperatureMeasure "Measures of temperature.
In scientific circles, the temperature of something is understood as the
average velocity of the atoms or molecules that make up the thing."))

(tell (sumodocumentation CurrencyMeasure "Includes all standard measures of monetary
value, including &%UnitedStatesDollar, &%UnitedStatesCent, Lire, Yen, etc."))

(tell (sumodocumentation AngleMeasure "The value of an angle in a plane or in a
solid."))

(tell (sumodocumentation PlaneAngleMeasure "The value of an angle in a plane."))

(tell (sumodocumentation SolidAngleMeasure "The value of an angle in a solid."))

(tell (BinarySumofunction MeasureFn))
(tell (sumodocumentation MeasureFn "This &%BinarySumofunction maps a &%RealSumonumber and
a &%UnitOfMeasure to that &%Sumonumber of units.  It is used for expressing
&%ConstantQuantities.  For example, the concept of three meters is
represented as (&%MeasureFn 3 &%Meter)."))


;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (=>
;;    (and
;;       (instance ?REL RelationExtendedToQuantities)
;;       (instance ?REL TernaryRelation)
;;       (instance ?NUMBER1 RealNumber)
;;       (instance ?NUMBER2 RealNumber)
;;       (holds ?REL ?NUMBER1 ?NUMBER2 ?VALUE))
;;    (forall (?UNIT)
;;       (=>
;;          (instance ?UNIT UnitOfMeasure)
;;          (holds ?REL (MeasureFn ?NUMBER1 ?UNIT) (MeasureFn ?NUMBER2 ?UNIT) (MeasureFn ?VALUE ?UNIT)))))

;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (=>
;;    (and
;;       (instance ?REL RelationExtendedToQuantities)
;;       (instance ?REL BinaryRelation)
;;       (instance ?NUMBER1 RealNumber)
;;       (instance ?NUMBER2 RealNumber)
;;       (holds ?REL ?NUMBER1 ?NUMBER2))
;;    (forall (?UNIT)
;;       (=>
;;          (instance ?UNIT UnitOfMeasure)
;;          (holds ?REL (MeasureFn ?NUMBER1 ?UNIT) (MeasureFn ?NUMBER2 ?UNIT)))))

(tell (UnarySumofunction KiloFn))
(tell (sumodocumentation KiloFn "A &%UnarySumofunction that maps a &%UnitOfMeasure into
a &%UnitOfMeasure that is equal to 1,000 units of the original &%UnitOfMeasure.
For example, (&%KiloFn &%Gram) is 1,000 &%Grams."))


(tell (UnarySumofunction MegaFn))
(tell (sumodocumentation MegaFn "A &%UnarySumofunction that maps a &%UnitOfMeasure into
a &%UnitOfMeasure that is equal to 1,000,000 units of the original
&%UnitOfMeasure.  For example, (&%KiloFn &%Hertz) is 1,000,000 &%Hertz."))


(tell (UnarySumofunction GigaFn))
(tell (sumodocumentation GigaFn "A &%UnarySumofunction that maps a &%UnitOfMeasure into
a &%UnitOfMeasure that is equal to 1,000,000,000 units of the original
&%UnitOfMeasure.  For example, (&%GigaFn &%Hertz) is 1,000,000,000 &%Hertz."))


(tell (UnarySumofunction TeraFn))
(tell (sumodocumentation TeraFn "A &%UnarySumofunction that maps a &%UnitOfMeasure
into a &%UnitOfMeasure that is equal to 1,000,000,000,000 units of the original
&%UnitOfMeasure.  For example, (&%TeraFn &%Hertz) is 1,000,000,000,000 &%Hertz."))


(tell (UnarySumofunction MilliFn))
(tell (sumodocumentation MilliFn "A &%UnarySumofunction that maps a &%UnitOfMeasure into
a &%UnitOfMeasure that is equal to .001 units of the original &%UnitOfMeasure.
For example, (&%MilliFn &%Ampere) is .001 &%Amperes."))


(tell (UnarySumofunction MicroFn))
(tell (sumodocumentation MicroFn "A &%UnarySumofunction that maps a &%UnitOfMeasure into
a &%UnitOfMeasure that is equal to .000001 units of the original &%UnitOfMeasure.
For example, (&%MicroFn &%Meter) is .000001 &%Meters."))


(tell (UnarySumofunction NanoFn))
(tell (sumodocumentation NanoFn "A &%UnarySumofunction that maps a &%UnitOfMeasure into
a &%UnitOfMeasure that is equal to .000000001 units of the original
&%UnitOfMeasure.  For example, (&%MicroFn &%SecondDuration) is .000000001
&%SecondDurations."))


(tell (UnarySumofunction PicoFn))
(tell (sumodocumentation PicoFn "A &%UnarySumofunction that maps a &%UnitOfMeasure into
a &%UnitOfMeasure that is equal to .000000000001 units of the original
&%UnitOfMeasure.  For example, (&%PicoFn &%Ampere) is .000000000001
&%Amperes."))


(tell (BinarySumofunction IntervalFn))
(tell (relatedInternalConcept IntervalFn RecurrentTimeIntervalFn))
(tell (sumodocumentation IntervalFn "A &%BinarySumofunction that maps two &%ConstantQuantities
to the &%Sumoclass of &%ConstantQuantities that comprise the interval from the first
&%ConstantQuantity to the second &%ConstantQuantity.  For example, (&%IntervalFn
(&%MeasureFn 8 &%Meter) (&%MeasureFn 14 &%Meter)) would return the &%Sumoclass of
&%ConstantQuantities between 8 and 14 meters in length."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (instance ?QUANTITY (IntervalFn ?FROM ?TO))
;;    (and
;;         (greaterThanOrEqualTo ?QUANTITY ?FROM)
;;         (lessThanOrEqualTo ?QUANTITY ?TO)))

(tell (UnarySumofunction MagnitudeFn))
(tell (sumodocumentation MagnitudeFn "The magnitude of a &%ConstantQuantity is the
numeric value for the quantity.  In other words, &%MagnitudeFn converts
a &%ConstantQuantity with an associated &%UnitOfMeasure into an ordinary
&%RealSumonumber.  For example, the magnitude of the &%ConstantQuantity 2
&%Kilometers is the &%RealSumonumber 2.   Note that the magnitude of a
quantity in a given unit times that unit is equal to the original
quantity."))


(tell (BinarySumofunction DensityFn))
(tell (sumodocumentation DensityFn "&%DensityFn maps an instance of &%MassMeasure
and an instance of &%VolumeMeasure to the density represented by this
proportion of mass and volume.  For example, (&%DensityFn (&%MeasureFn 3 &%Gram)
(&%MeasureFn 1 &%Liter)) represents the density of 3 grams per liter."))

(tell (BinarySumofunction SpeedFn))
(tell (sumodocumentation SpeedFn "Maps an instance of &%LengthMeasure and an instance of
&%TimeDuration to the speed represented by this proportion of distance and time.
For example, (&%SpeedFn (&%MeasureFn 55 &%Mile)(&%MeasureFn 1 &%HourDuration))
represents the velocity of 55 miles per hour."))

(tell (QuaternarySumofunction VelocityFn))
(tell (sumodocumentation VelocityFn "Specifies the velocity of an object, i.e. the speed
and the direction of the speed.  For example (&%VelocityFn (&%MeasureFn 55 &%Mile)
(&%MeasureFn 2 &%HourDuration) ?REFERENCE &%North) denotes the velocity of 55 miles
per hour North of the given reference point ?REFERENCE."))


;; Now the units of measure:

;; First base units for the SI system. No conversion functions are
;; provided for these units.

;; Length Base Unit

(tell (SystemeInternationalUnit Meter))
(tell (sumodocumentation Meter "SI &%LengthMeasure.  Symbol:  m. It is one of the
base units in SI, and it is currently defined as follows: the &%Meter
is the length of the path traveled by light in a vacuum during a time
interval of 1/299792458 of a &%SecondDuration."))

;; Mass Base Unit

(tell (SystemeInternationalUnit Gram))
(tell (sumodocumentation Gram "Submultiple of kilogram.  Symbol: g.
1 kilogram = 1000 &%Grams."))

;; Time Base Unit

(tell (SystemeInternationalUnit SecondDuration))
(tell (sumodocumentation SecondDuration "SI &%TimeDuration.  Symbol: s.
It is one of the base units in SI, and it is currently defined as
follows: the &%SecondDuration is the duration of 9192631770 periods of
the radiation corresponding to the transition between the two hyperfine
levels of the ground state of the cesium 133 atom."))

;; Electric Current Base Unit

(tell (SystemeInternationalUnit Ampere))
(tell (sumodocumentation Ampere "SI electric current measure.  Symbol: A. It is
one of the base units in SI. It is defined as follows: the &%Ampere is
that constant current which, if maintained in two straight parallel
conductors of infinite length, of negligible circular cross-section, and
placed 1 &%Meter apart in a vacuum, would produce between these conductors
a force equal to 2*10^(-7) &%Newton per &%Meter of length."))

;; Thermodynamic Temperature Base Unit

(tell (SystemeInternationalUnit KelvinDegree))
(tell (sumodocumentation KelvinDegree "SI &%TemperatureMeasure.  Symbol: K.
It is one of the base units in SI (it is also a unit in the ITS system).
Kelvin differs from the Celsius scale in that the triple point of water
is defined to be 273.16 &%KelvinDegrees while it is 0 &%CelsiusDegrees.
The magnitudes of intervals in the two scales are the same.  By definition
the conversion constant is 273.15."))

;; Amount Of Substance Base Unit

(tell (SystemeInternationalUnit Mole))
(tell (sumodocumentation Mole "SI amount of substance unit. symbol: mol. It is one
of the base units in SI. It is defined as follows:  the &%Mole is the
amount of substance of a system which contains as many elementary entities
as there are atoms in 0.012 &%Kilograms of carbon 12.  Note that, when this
&%UnitOfMeasure is used, the elementary entities must be specified - they
may be atoms, molecules, ions, electrons, etc. or groups of such
particles."))

;; Luminosity Intensity Base Unit

(tell (SystemeInternationalUnit Candela))
(tell (sumodocumentation Candela "SI luminosity intensity measure.  Symbol: cd.
It is one of the base units in SI, and it is currently defined as
follows:  the &%Candela is the luminous intensity, in a given direction,
of a source that emits monochromatic radiation of frequency 540*10^12
&%Hertz and that has a radiant intensity in that direction of 1/683
&%Watt per &%Steradian."))

(tell (UnitOfMeasure Liter))
(tell (sumodocumentation Liter "Unit of volume in the metric system.  It is currently
defined to be equal to one cubic decimeter (0.001 cubic meter).  Symbol: l."))

(tell (UnitOfMeasure Centimeter))
(tell (sumodocumentation Centimeter "Submultiple of &%Meter.  Symbol: cm. It is
the 100th part of a &%Meter"))


;; What follows are derived SI units with special names and symbols
;; (multiples and submultiples are together since they represent
;; quantities of the same kind).

;; Plane angle unit

(tell (SystemeInternationalUnit Radian))
(tell (sumodocumentation Radian "SI plane angle measure.  Symbol: rad.  It is the
angle of a circle subtended by an arc equal in length to the circle's
radius. Another definition is:  the plane angle between two radii of a
circle which cut off on the circumference an arc equal in length to the
radius.  &%Radian = m/m = 1."))

;; Solid angle unit

(tell (SystemeInternationalUnit Steradian))
(tell (sumodocumentation Steradian "SI solid angle measure.  Symbol: sr.  It is
the solid angle of a sphere subtended by a portion of the surface whose
area is equal to the square of the sphere's radius.  Another definition
is: the solid angle which, having its vertex in the center of the sphere,
cuts off an area of the surface of the sphere equal to that of a square
with sides of length equal to the radius of the sphere.  &%Steradian =
m^2/m^2 = 1."))

;; Frequency units

(tell (SystemeInternationalUnit Hertz))
(tell (sumodocumentation Hertz "SI frequency measure.  Symbol: Hz. It is the
number of cycles per second.  &%Hertz = s^(-1).  Note that &%Hertz
does not have a conversion function."))

; Force Unit

(tell (SystemeInternationalUnit Newton))
(tell (sumodocumentation Newton "SI force measure.  Symbol: N. It is that force
which gives to a mass of 1 kilogram an acceleration of 1 &%Meter per
&%SecondDuration.  &%Newton = m*kg*s^(-2)."))

; Pressure unit

(tell (SystemeInternationalUnit Pascal))
(tell (sumodocumentation Pascal "SI pressure measure.  Symbol:Pa. It is the
pressure of one &%Newton per square &%Meter.  &%Pascal = N/m^2
= m^(-1)*kg*s^(-2)."))

; Energy Unit

(tell (SystemeInternationalUnit Joule))
(tell (sumodocumentation Joule "SI energy measure.  Symbol: J.  It is the work
done when the point of application of 1 &%Newton is displaced a distance
of 1 &%Meter in the direction of the force.  &%Joule = N*m =
m^2*kg*s^(-2)."))

; Power Units

(tell (SystemeInternationalUnit Watt))
(tell (sumodocumentation Watt "SI power measure.  Symbol: W.  A &%UnitOfMeasure
that measures power, i.e. energy produced or expended divided by
&%TimeDuration. It is the power which gives rise to the production
of energy (or work) at the rate of one &%Joule per &%SecondDuration.
&%Watt = J/s = m^2*kg*s^(-3)."))

;;; Note: According to SI one should not use the expression "per unit of."

; Electric Charge Units

(tell (SystemeInternationalUnit Coulomb))
(tell (sumodocumentation Coulomb "SI electric charge measure.  Symbol: C. It is
the quantity of electric charge transported through a cross section of
a conductor in an electric circuit during each &%SecondDuration by a
current of 1 &%Ampere.  Coulomb = s*A."))

; Electric Potential Units

(tell (SystemeInternationalUnit Volt))
(tell (sumodocumentation Volt "SI electric potential measure.  Symbol: V.  It is
the difference of electric potential between two points of a conducting
wire carrying a constant current of 1 &%Ampere, when the power dissipated
between these points is equal to 1 &%Watt.  &%Volt = W/A =
m^2*kg*s^(-3)*A^(-1)."))

; Capacitance Units

(tell (SystemeInternationalUnit Farad))
(tell (sumodocumentation Farad "SI capacitance measure.  Symbol: F.  It is the
capacitance of a capacitator between the plates of which there appears
a difference of potential of 1 &%Volt when it is charged by a quantity
of electricity equal to 1 Coulomb.  &%Farad = C/V =
m^(-2)*kg(-1)*s^4*A^2."))

;Electric Resistance Units

(tell (SystemeInternationalUnit Ohm))
(tell (sumodocumentation Ohm "SI electric resistance measure. It is the electric
resistance between two points of a conductor when a constant difference
of potential of 1 &%Volt, applied between these two points,
produces in this conductor a current of 1 &%Ampere, this conductor not
being the force of any electromotive force.  &%Ohm = V/A =
m^2*kg*s^(-3)*A^(-2)."))

; Electric Conductance Units

(tell (SystemeInternationalUnit Siemens))
(tell (sumodocumentation Siemens "SI electric conductance measure.  Symbol:  S.
In the case of direct current, the conductance in &%Siemens is the
reciprocal of the resistance in &%Ohms; in the case of alternating current,
it is the reciprocal of the impedance in ohms.  siemens = A/V =
m^(-2)*kg(-1)*s^(3)*A^2."))

; Magnetic Flux Units

(tell (SystemeInternationalUnit Weber))
(tell (sumodocumentation Weber "SI magnetic flux measure.  Symbol: Wb. It is the
magnetic flux which, linking a circuit of one turn, produces in it an
electromotive force of 1 &%Volt as it is reduced to zero at a uniform
rate in 1 &%SecondDuration.  &%Weber = V*s = m^2*kg*s^(-2)*A^(-1)." ))

; Magnetic Flux Density Units

(tell (SystemeInternationalUnit Tesla))
(tell (sumodocumentation Tesla "SI magnetic flux density measure.  Symbol:  T.
One &%Tesla equals one &%Weber per square &%Meter.  &%Tesla = Wb/m^2 =
kg*s^(-2)*A^(-1)."))

; Inductance Units

(tell (SystemeInternationalUnit Henry))
(tell (sumodocumentation Henry "SI inductance measure.  Symbol: H.  One &%Henry
is equivalent to one &%Volt divided by one &%Ampere per &%SecondDuration.
If a current changing at the rate of one &%Ampere per &%SecondDuration
induces an electromotive force of one &%Volt, the circuit has an
inductance of one &%Henry.  &%Henry = Wb/A = m^2*kg*s^(-2)*A^(-2)."))

; Celsius Temperature unit

(tell (SystemeInternationalUnit CelsiusDegree))
(tell (sumodocumentation CelsiusDegree "A &%TemperatureMeasure.  The freezing point
and the boiling point of water are, respectively, 0 &%CelsiusDegrees and 100
&%CelsiusDegrees."))



; Luminous Flux Units

(tell (SystemeInternationalUnit Lumen))
(tell (sumodocumentation Lumen "SI luminous flux measure.  Symbol: lm.  It is the
amount streaming outward through one solid angle of 1 &%Steradian from a
uniform point source having an intensity of one &%Candela.  &%Lumen =
cd*sr = cd * 1."))

; Illuminance Units

(tell (SystemeInternationalUnit Lux))
(tell (sumodocumentation Lux "SI illuminance measure.  Symbol: lx.  It is the
amount of illumination provided when one &%Lumen is evenly distributed
over an area of 1 square &%Meter. This is also equivalent to the
illumination that would exist on a surface all points of which are one
&%Meter from a point source of one &%Candela.  &%Lux = lm/m^2 =
m^(-2)*cd."))

; Activity Units

(tell (SystemeInternationalUnit Becquerel))
(tell (sumodocumentation Becquerel "SI activity measure.  Symbol: Bq.  It measures
the amount of radioactivity contained in a given sample of matter. It is
that quantity of a radioactive element in which there is one atomic
disintegration per &%SecondDuration.  &%Becquerel = s^(-1)."))

; Absorbed Dose Units

(tell (SystemeInternationalUnit Gray))
(tell (sumodocumentation Gray "SI absorbed dose measure.  Symbol: Gy.  It measures
the dose of radiation absorbed in living tissue. It is equal approximately
to the absorbed dose delivered when the energy per unit mass imparted to
matter by ionizing radiation is 1 &%Joule per kilogram.  &%Gray = J/kg
= m^2*s^(-2)."))

; Dose Equivalent Units

(tell (SystemeInternationalUnit Sievert))
(tell (sumodocumentation Sievert "SI dose equivalent measure.  Symbol: Sv.  It is
a unit of biologic dose of ionizing radiation.  The &%Sievert makes it
possible to normalize doses of different types of radiation. It takes
into account the relative biologic effectiveness of ionizing radiation,
since each form of such radiation--e.g., X rays, gamma rays, neutrons--
has a slightly different effect on living tissue for a given absorbed
dose. The dose equivalent of a given type of radiation (in &%Sievert) is
the dose of the radiation in &%Gray multiplied by a quality factor that
is based on the relative biologic effectiveness of the radiation.
Accordingly, one &%Sievert is generally defined as the amount of radiation
roughly equivalent in biologic effectiveness to one &%Gray of gamma
radiation.  &%Sievert = J/kg = m^2*s^(-2)"))

; Units that are accepted for -use- with SI

(tell (UnitOfMeasure DayDuration))
(tell (sumodocumentation DayDuration "Time unit. 1 day = 24 hours."))


(tell (UnitOfMeasure HourDuration))
(tell (sumodocumentation HourDuration "Time unit. 1 hour = 60 minutes."))


(tell (UnitOfMeasure MinuteDuration))
(tell (sumodocumentation MinuteDuration "Time unit. 1 minute = 60 seconds. "))


(tell (UnitOfMeasure WeekDuration))
(tell (sumodocumentation WeekDuration "Time unit.  A week's duration is seven days."))


(tell (UnitOfMeasure YearDuration))
(tell (sumodocumentation YearDuration "Time unit. one calendar year. 1 year =
365 days = 31536000 seconds."))


;; What follows are units that are also accepted for use with SI.  The
;; SI equivalents for these units are obtained experimentally.

(tell (UnitOfMeasure Amu))
(tell (sumodocumentation Amu "Atomic mass unit.  Symbol: u. It is the mass of
the twelfth part of an atom of the Carbon 12 isotope."))


(tell (UnitOfMeasure ElectronVolt))
(tell (sumodocumentation ElectronVolt "The &%ElectronVolt is an energy measure.
Symbol: eV.  It is the kinetic energy acquired by an electron in passing
through a potential difference of 1 &%Volt in a vacuum."))


;; The following units have been temporarily accepted for use with
;; SI units.

(tell (UnitOfMeasure Angstrom))
(tell (sumodocumentation Angstrom "The &%Angstrom is a &%LengthMeasure.
1 &%Angstrom = 10^(-10) m"))


;; The following units are unacceptable in SI but are part of other
;; systems of measurement that are widely used.

;; More Length units

(tell (UnitOfMeasure Foot))
(tell (sumodocumentation Foot "English length unit of feet."))


(tell (UnitOfMeasure Inch))
(tell (sumodocumentation Inch "English length unit of inches."))


(tell (UnitOfMeasure Mile))
(tell (sumodocumentation Mile "English length unit of miles."))


;; More Volume units

(tell (UnitOfMeasure UnitedStatesGallon))
(tell (relatedInternalConcept UnitedStatesGallon UnitedKingdomGallon))
(tell (sumodocumentation UnitedStatesGallon "Unit of volume commonly used in the
United States."))


(tell (UnitOfMeasure Quart))
(tell (sumodocumentation Quart "English unit of volume equal to 1/4 of a
&%UnitedStatesGallon."))


(tell (UnitOfMeasure Pint))
(tell (sumodocumentation Pint "English unit of volume equal to 1/2 of a
&%Quart."))


(tell (UnitOfMeasure Cup))
(tell (sumodocumentation Cup "English unit of volume equal to 1/2 of a
&%Pint."))


(tell (UnitOfMeasure Ounce))
(tell (sumodocumentation Ounce "English unit of volume equal to 1/8 of a
&%Cup."))


(tell (UnitOfMeasure UnitedKingdomGallon))
(tell (sumodocumentation UnitedKingdomGallon "Unit of volume commonly used in the
United Kingdom."))


;; More Mass units

(tell (UnitOfMeasure AtomGram))
(tell (sumodocumentation AtomGram "&%MassMeasure that is also known as the gram-atom.
Defined as the mass in grams of 1 &%Mole of pure substance.  For example,
1 &%AtomGram of Carbon 12 will be 12 &%Grams of pure Carbon 12.  2 &%AtomGrams
of the same substance will be 24 &%Grams of it.  This is an unusual unit in
that it is essentially 1 &%Mole of 'stuff' measured in grams, so that the
actual value (i.e. mass) depends on the type of substance."))

(tell (UnitOfMeasure PoundMass))
(tell (sumodocumentation PoundMass "English mass unit of pounds."))


(tell (UnitOfMeasure Slug))
(tell (sumodocumentation Slug "English mass unit of slugs."))


;; More Temperature units

(tell (UnitOfMeasure RankineDegree))
(tell (sumodocumentation RankineDegree "A &%TemperatureMeasure.  Note
that 0 &%RankineDegrees is the same as the absolute zero (i.e. 0
&%KelvinDegrees)."))


(tell (UnitOfMeasure FahrenheitDegree))
(tell (sumodocumentation FahrenheitDegree "A &%TemperatureMeasure that is commonly
used in the United States.  On the Fahrenheit scale, the freezing point
of water is 32 &%FahrenheitDegrees, and the boiling point of water is
212 &%FahrenheitDegrees."))

;; More Force units

(tell (UnitOfMeasure PoundForce))
(tell (sumodocumentation PoundForce "English pound of force. The conversion
factor depends on the local value of the acceleration of free fall. A
mean value is used in the conversion axiom associated with this
constant."))


;; More Energy units

(tell (UnitOfMeasure Calorie))
(tell (sumodocumentation Calorie "A &%Calorie is an energy measure."))


(tell (UnitOfMeasure BritishThermalUnit))
(tell (sumodocumentation BritishThermalUnit "An energy measure."))


;; More plane angle units

(tell (UnitOfMeasure AngularDegree))
(tell (sumodocumentation AngularDegree "A plane angle measure."))


; Other interesting units of measure

; Currency units

(tell (UnitOfMeasure UnitedStatesDollar))
(tell (sumodocumentation UnitedStatesDollar "A currency measure."))

(tell (UnitOfMeasure UnitedStatesCent))
(tell (sumodocumentation UnitedStatesCent "A currency measure.  1 &%UnitedStatesCent is
equal to .01 &%UnitedStatesDollars."))


(tell (UnitOfMeasure EuroDollar))
(tell (sumodocumentation EuroDollar "A currency measure of most European Union countries.
It is based on the &%UnitedStatesDollar."))

(tell (UnitOfMeasure EuroCent))
(tell (sumodocumentation EuroCent "A currency measure.  1 &%EuroCent is equal to .01
&%EuroDollars."))


; Information units

(tell (sumodocumentation InformationMeasure "Measures of the amount of information.
Includes &%Bit, &%Byte, and multiples of these, e.g. &%KiloByte and
&%MegaByte."))

(tell (UnitOfMeasure Bit))
(tell (sumodocumentation Bit "One &%Bit of information.  A one or a zero."))

(tell (UnitOfMeasure Byte))
(tell (sumodocumentation Byte "One &%Byte of information.  A &%Byte is eight
&%Bits."))


(tell (UnitOfMeasure KiloByte))
(tell (sumodocumentation KiloByte "One &%KiloByte (KB) of information.  One
&%KiloByte is 1024 &%Bytes.  Note that this sense of 'kilo' is
different from the one accepted in the SI system."))


(tell (UnitOfMeasure MegaByte))
(tell (sumodocumentation MegaByte "One &%MegaByte (MB) of information.  One
&%MegaByte is 1024 &%KiloBytes.  Note that this sense of 'mega' is
different from the one accepted in the SI system."))


;; The following content was inspired by the Quantities ontology
;; developed by ITBM-CNR.

(tell (BinaryPredicate measure))
(tell (AsymmetricSumorelation measure))
(tell (sumodocumentation measure "A very general &%Predicate for asserting that a
particular &%Object is measured by a particular &%ConstantQuantity.
In general, the second argument of this &%Predicate will be an instance
of the &%Sumofunction &%MeasureFn."))

(tell (SingleValuedSumorelation age))
(tell (sumodocumentation age "Simply relates an &%Object to a &%ConstantQuantity
specifying the age of the &%Object."))

(tell (sumodocumentation length "&%BinaryPredicate that is used to state the measure
of an &%Object from one point to another point along its surface."))

(tell (SingleValuedSumorelation width))
(tell (sumodocumentation width "&%BinaryPredicate that is used to state the measure
of an &%Object from side to side at its widest span."))

(tell (sumodocumentation diameter "&%BinaryPredicate that is used to state the
measure of a circular &%Object from side to side."))

(tell (SingleValuedSumorelation altitude))
(tell (sumodocumentation altitude "&%BinaryPredicate that is used to state the &%length
between an &%Object from its highest point to sea level.  Note that this
&%Predicate can be used to specify, for example, the height of geographic
features, e.g. mountains, the altitude of aircraft, and the orbit of satellites
around the Earth."))

(tell (SingleValuedSumorelation distance))
(tell (SpatialSumorelation distance))
(tell (TernaryPredicate distance))
(tell (sumodocumentation distance "(&%distance ?OBJ1 ?OBJ2 ?QUANT) means that the
shortest distance between the two objects ?OBJ1 and ?OBJ2 is ?QUANT."))

(tell (BinaryPredicate larger))
(tell (SpatialSumorelation larger))
(tell (TransitiveSumorelation larger))
(tell (IrreflexiveSumorelation larger))
(tell (sumodocumentation larger "(&%larger ?OBJ1 ?OBJ2) simply means that ?OBJ1 is
larger, with respect to all &%LengthMeasures, than ?OBJ2."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (larger ?OBJ1 ?OBJ2)
;;    (forall (?QUANT1 ?QUANT2)
;;       (=>
;;          (and
;;             (measure ?OBJ1 (MeasureFn ?QUANT1 LengthMeasure))
;;             (measure ?OBJ2 (MeasureFn ?QUANT2 LengthMeasure)))
;;          (greaterThan ?QUANT1 ?QUANT2))))

(tell (BinaryPredicate smaller))
(tell (SpatialSumorelation smaller))
(tell (TransitiveSumorelation smaller))
(tell (IrreflexiveSumorelation smaller))
(tell (sumodocumentation smaller "(&%smaller ?OBJ1 ?OBJ2) simply means that ?OBJ1
is smaller, with respect to all &%LengthMeasures, than ?OBJ2."))

(tell (SingleValuedSumorelation monetaryValue))
(tell (sumodocumentation monetaryValue "A &%BinaryPredicate that associates an
&%Object with its value expressed as an instance of &%CurrencyMeasure."))

(tell (UnarySumofunction WealthFn))
(tell (sumodocumentation WealthFn "A &%UnarySumofunction that maps an &%Agent to a &%CurrencyMeasure specifying the value of the sumoproperty owned by the &%Agent.  Note that this &%Sumofunction is generally used in conjunction with the &%Sumofunction &%PropertyFn, e.g. (&%WealthFn (&%PropertyFn BillGates)) would return the monetary value of the sum of Bill Gates' holdings."))


;; END FILE

;; BEGIN FILE


;;;;;;;;;;;;;;;;;;;;;;;
;; TEMPORAL CONCEPTS ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; INCLUDES 'STRUCTURAL ONTOLOGY'
;; INCLUDES 'BASE ONTOLOGY'

;; The first part of this section contains definitions relations involving
;; temporal notions.  Most of these definitions and axioms were derived from
;; James Allen's work.  This part of the section was extensively revised on
;; the basis of comments from Pat Hayes.  The second part of this section
;; is an attempt to incorporate the Simple-Time ontology from the
;; Ontolingua server into the SUMO.

(tell (TimePoint PositiveInfinity))
(tell (sumodocumentation PositiveInfinity "The &%TimePoint that is after
all other &%TimePoints."))


;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?POINT TimePoint)
;;       (not (equal ?POINT PositiveInfinity)))
;;    (exists (?OTHERPOINT)
;;       (temporallyBetween ?POINT ?OTHERPOINT PositiveInfinity)))

(tell (TimePoint NegativeInfinity))
(tell (sumodocumentation NegativeInfinity "The &%TimePoint that is before
all other &%TimePoints."))


;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?POINT TimePoint)
;;       (not (equal ?POINT NegativeInfinity)))
;;    (exists (?OTHERPOINT)
;;       (temporallyBetween NegativeInfinity ?OTHERPOINT ?POINT)))

(tell (BinaryPredicate duration))
(tell (AsymmetricSumorelation duration))
(tell (TotalValuedSumorelation duration))
(tell (sumodocumentation duration "(&%duration ?POS ?TIME) means that the
duration of the &%TimePosition ?POS is ?TIME.  Note that this
&%Predicate can be used in conjunction with the &%Sumofunction &%WhenFn
to specify the duration of any instance of &%Physical."))

(tell (BinaryPredicate frequency))
(tell (AsymmetricSumorelation frequency))
(tell (sumodocumentation frequency "(frequency ?PROC ?TIME) means that the
&%Process type of ?PROC recurs after every interval of ?TIME."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (frequency ?PROC ?TIME1)
;;    (forall (?TIME2)
;;       (=>
;;          (duration ?TIME2 ?TIME1)
;;          (exists (?POSITION)
;;             (and
;;                (temporalPart ?POSITION ?TIME2)
;;                (holdsDuring ?POSITION (exists (?INST) (instance ?INST ?PROC))))))))

(tell (BinaryPredicate temporalPart))
(tell (AsymmetricSumorelation temporalPart))
(tell (sumodocumentation temporalPart "(&%temporalPart ?POS1 ?POS2)
means that &%TimePosition ?POS1 is part of &%TimePosition ?POS2."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?POINT TimePoint)
;;    (exists (?INTERVAL)
;;       (and
;;          (instance ?INTERVAL TimeInterval)
;;          (temporalPart ?POINT ?INTERVAL))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?INTERVAL TimeInterval)
;;    (exists (?POINT)
;;       (and
;;          (instance ?POINT TimePoint)
;;          (temporalPart ?POINT ?INTERVAL))))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (holdsDuring ?TIME1 ?SITUATION)
;;       (temporalPart ?TIME2 ?TIME1))
;;    (holdsDuring ?TIME2 ?SITUATION))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (holdsDuring ?INTERVAL (holds ?REL ?INST1 ?INST2))
;;       (instance ?INST1 Physical)
;;       (instance ?INST2 Physical))
;;    (and
;;       (time ?INST1 ?INTERVAL)
;;       (time ?INST2 ?INTERVAL)))


(tell (TemporalSumorelation BeginFn))
(tell (UnarySumofunction BeginFn))
(tell (sumodocumentation BeginFn "A &%UnarySumofunction that maps a &%TimeInterval to
the &%TimePoint at which the interval begins."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (equal (BeginFn ?INTERVAL) ?POINT)
;;    (forall (?OTHERPOINT)
;;       (=>
;;          (and
;;             (temporalPart ?OTHERPOINT ?INTERVAL)
;;             (not (equal ?OTHERPOINT ?POINT)))
;;          (before ?POINT ?OTHERPOINT))))


(tell (TemporalSumorelation EndFn))
(tell (UnarySumofunction EndFn))
(tell (sumodocumentation EndFn "A &%UnarySumofunction that maps a &%TimeInterval to
the &%TimePoint at which the interval ends."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (equal (EndFn ?INTERVAL) ?POINT)
;;    (forall (?OTHERPOINT)
;;       (=>
;;          (and
;;             (temporalPart ?OTHERPOINT ?INTERVAL)
;;             (not (equal ?OTHERPOINT ?POINT)))
;;          (before ?OTHERPOINT ?POINT))))

(tell (BinaryPredicate starts))
(tell (TemporalSumorelation starts))
(tell (TransitiveSumorelation starts))
(tell (IrreflexiveSumorelation starts))
(tell (sumodocumentation starts "(&%starts ?INTERVAL1 ?INTERVAL2) means that
?INTERVAL1 and ?INTERVAL2 are both &%TimeIntervals that have the same
initial &%TimePoint and that ?INTERVAL1 ends before ?INTERVAL2."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (starts ?INTERVAL1 ?INTERVAL2)
;;    (and
;;       (equal
;;          (BeginFn ?INTERVAL1)
;; 	   (BeginFn ?INTERVAL2))
;;       (before
;;          (EndFn ?INTERVAL1)
;;   	   (EndFn ?INTERVAL2))))

(tell (BinaryPredicate finishes))
(tell (TemporalSumorelation finishes))
(tell (TransitiveSumorelation finishes))
(tell (IrreflexiveSumorelation finishes))
(tell (sumodocumentation finishes "(&%finishes ?INTERVAL1 ?INTERVAL2) means that
?INTERVAL1 and ?INTERVAL2 are both &%TimeIntervals that have the same
ending &%TimePoint and that ?INTERVAL2 begins before ?INTERVAL1."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (finishes ?INTERVAL1 ?INTERVAL2)
;;    (and
;;       (before
;;          (BeginFn ?INTERVAL2)
;;          (BeginFn ?INTERVAL1))
;;       (equal
;;          (EndFn ?INTERVAL2)
;;          (EndFn ?INTERVAL1))))

(tell (TemporalSumorelation before))
(tell (IrreflexiveSumorelation before))
(tell (TransitiveSumorelation before))
(tell (relatedInternalConcept before earlier))
(tell (sumodocumentation before "(&%before ?POINT1 ?POINT2) means that ?POINT1
precedes ?POINT2 on the universal timeline."))

;; An Object exists (and, hence, retains its identity) over time, i.e.,
;; an object exists at every point over some interval of time.

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;     (instance ?OBJ Object)
;;     (exists (?TIME1 ?TIME2)
;;        (and
;;           (instance ?TIME1 TimePoint)
;;           (instance ?TIME2 TimePoint)
;;           (before ?TIME1 ?TIME2)
;;           (forall (?TIME)
;;              (=>
;; 	         (and
;; 		     (beforeOrEqual ?TIME1 ?TIME)
;;                  (beforeOrEqual ?TIME ?TIME2))
;;                (time ?OBJ ?TIME))))))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (result ?PROC ?OBJ)
;;    (forall (?TIME)
;;       (=>
;;          (before ?TIME (BeginFn (WhenFn ?PROC)))
;;          (not
;;             (time ?OBJ ?TIME)))))

(tell (BinaryPredicate beforeOrEqual))
(tell (PartialOrderingSumorelation beforeOrEqual))
(tell (sumodocumentation beforeOrEqual "(&%beforeOrEqual ?POINT1 ?POINT2) means that ?POINT1
is identical with ?POINT2 or occurs before it on the universal timeline."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (beforeOrEqual ?POINT1 ?POINT2)
;;    (or
;;        (before ?POINT1 ?POINT2)
;;        (equal ?POINT1 ?POINT2)))

(tell (TemporalSumorelation temporallyBetween))
(tell (TernaryPredicate temporallyBetween))
(tell (sumodocumentation temporallyBetween "(&%temporallyBetween ?POINT1 ?POINT2
?POINT3) means that the &%TimePoint ?POINT2 is between the &%TimePoints
?POINT1 and ?POINT3, i.e. ?POINT1 is before ?POINT2 and ?POINT2 is before
?POINT3."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (temporallyBetween ?POINT1 ?POINT2 ?POINT3)
;;    (and
;;       (before ?POINT1 ?POINT2)
;;       (before ?POINT2 ?POINT3)))

(tell (TemporalSumorelation temporallyBetweenOrEqual))
(tell (TernaryPredicate temporallyBetweenOrEqual))
(tell (sumodocumentation temporallyBetweenOrEqual "(&%temporallyBetweenOrEqual ?POINT1 ?POINT2
?POINT3) means that the &%TimePoint ?POINT1 is before or equal to the
&%TimePoint ?POINT2 and ?POINT2 is before or equal to the &%TimePoint
?POINT3."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (temporallyBetweenOrEqual ?POINT1 ?POINT2 ?POINT3)
;;    (and
;;       (beforeOrEqual ?POINT1 ?POINT2)
;;       (beforeOrEqual ?POINT2 ?POINT3)))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (and
;;       (time ?PHYS ?TIME)
;;       (instance ?TIME TimePoint))
;;    (temporallyBetweenOrEqual (BeginFn (WhenFn ?PHYS)) ?TIME (EndFn (WhenFn ?PHYS))))

(tell (BinaryPredicate overlapsTemporally))
(tell (TemporalSumorelation overlapsTemporally))
(tell (PartialOrderingSumorelation overlapsTemporally))
(tell (sumodocumentation overlapsTemporally "(&%overlapsTemporally ?INTERVAL1
?INTERVAL2) means that the &%TimeInterval ?INTERVAL1 subsumes the
&%TimeInterval ?INTERVAL2, i.e. the starting point of ?INTERVAL2 is
equal to or after the starting point of ?INTERVAL1 and the ending
point of ?INTERVAL2 is equal to or before the ending point of ?INTERVAL1."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (overlapsTemporally ?INTERVAL1 ?INTERVAL2)
;;    (or
;;       (equal ?INTERVAL1 ?INTERVAL2)
;;       (during ?INTERVAL1 ?INTERVAL2)
;;       (starts ?INTERVAL1 ?INTERVAL2)
;;       (finishes ?INTERVAL1 ?INTERVAL2)))

;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (=>
;;    (and
;;       (instance ?REL SpatialRelation)
;;       (holds ?REL ?OBJ1 ?OBJ2))
;;    (overlapsTemporally (WhenFn ?OBJ1) (WhenFn ?OBJ2)))

(tell (TemporalSumorelation during))
(tell (TransitiveSumorelation during))
(tell (IrreflexiveSumorelation during))
(tell (sumodocumentation during "(&%during ?INTERVAL1 ?INTERVAL2) means that
?INTERVAL1 starts after and ends before ?INTERVAL2."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (during ?INTERVAL1 ?INTERVAL2)
;;    (and
;;       (before (EndFn ?INTERVAL1) (EndFn ?INTERVAL2))
;;       (before (BeginFn ?INTERVAL2) (BeginFn ?INTERVAL1))))

(tell (BinaryPredicate meetsTemporally))
(tell (TemporalSumorelation meetsTemporally))
(tell (AsymmetricSumorelation meetsTemporally))
(tell (IntransitiveSumorelation meetsTemporally))
(tell (sumodocumentation meetsTemporally "(&%meetsTemporally ?INTERVAL1 ?INTERVAL2)
means that the terminal point of the &%TimeInterval ?INTERVAL1 is the
initial point of the &%TimeInterval ?INTERVAL2."))



(tell (BinaryPredicate earlier))
(tell (TemporalSumorelation earlier))
(tell (TransitiveSumorelation earlier))
(tell (IrreflexiveSumorelation earlier))
(tell (sumodocumentation earlier "(earlier INTERVAL1 INTERVAL2) means that
INTERVAL1 ends before INTERVAL2 begins."))


(tell (BinaryPredicate cooccur))
(tell (TemporalSumorelation cooccur))
(tell (EquivalenceSumorelation cooccur))
(tell (sumodocumentation cooccur "(&%cooccur ?THING1 ?THING2) means that the
&%Object or &%Process ?THING1 occurs at the same time as, together with,
or jointly with the &%Object or &%Process ?THING2.  This covers the
following temporal relations:  is co-incident with, is concurrent with,
is contemporaneous with, and is concomitant with."))


;; The following functions generate &%TimeIntervals.

(tell (BinarySumofunction TimeIntervalFn))
(tell (TemporalSumorelation TimeIntervalFn))
(tell (sumodocumentation TimeIntervalFn "A &%BinarySumofunction that takes two &%TimePoints
as arguments and returns the &%TimeInterval defined by these two &%TimePoints.
Note that the first &%TimePoint must occur earlier than the second &%TimePoint."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (equal (TimeIntervalFn ?POINT1 ?POINT2) ?INTERVAL)
;;    (and
;;       (equal (BeginFn ?INTERVAL) ?POINT1)
;;       (equal (EndFn ?INTERVAL) ?POINT2)))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (equal (TimeIntervalFn ?POINT1 ?POINT2) ?INTERVAL)
;;    (forall (?POINT)
;;       (<=>
;;          (temporallyBetweenOrEqual ?POINT1 ?POINT ?POINT2)
;;          (temporalPart ?POINT ?INTERVAL))))

(tell (TemporalSumorelation RecurrentTimeIntervalFn))
(tell (BinarySumofunction RecurrentTimeIntervalFn))
(tell (sumodocumentation RecurrentTimeIntervalFn "A function that is useful for generating
recurring time intervals.  For example, (&%RecurrentTimeIntervalFn (&%HourFn 6 &%Day)
(&%HourFn 12 &%Day)) returns the &%Sumoclass of &%TimeIntervals beginning at 6 in the
morning and ending at 12 noon.  For another example, (&%RecurrentTimeInterval
&%Saturday &%Sunday) returns the &%Sumoclass of all weekends.  For still another example,
(&%RecurrentTimeInterval &%June &%August) returns the &%Sumoclass containing the academic
summer period."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?INTERVAL (RecurrentTimeIntervalFn ?TIMECLASS1 ?TIMECLASS2))
;;    (exists (?TIME1 ?TIME2)
;;       (and
;;          (instance ?TIME1 ?TIMECLASS1)
;;          (instance ?TIME2 ?TIMECLASS2)
;;          (starts ?TIME1 ?INTERVAL)
;;          (finishes ?TIME2 ?INTERVAL))))

(tell (TemporalSumorelation WhenFn))
(tell (UnarySumofunction WhenFn))
(tell (sumodocumentation WhenFn "A &%UnarySumofunction that maps an &%Object or
&%Process to the exact &%TimeInterval during which it exists.  Note
that, for every &%TimePoint ?TIME outside of the &%TimeInterval
(WhenFn ?THING), (time ?THING ?TIME) does not hold."))


(tell (TemporalSumorelation PastFn))
(tell (UnarySumofunction PastFn))
(tell (sumodocumentation PastFn "A &%UnarySumofunction that maps a &%TimePosition
to the &%TimeInterval that meets it and that begins at
&%NegativeInfinity."))



(tell (TemporalSumorelation ImmediatePastFn))
(tell (UnarySumofunction ImmediatePastFn))
(tell (sumodocumentation ImmediatePastFn "A &%UnarySumofunction that maps a
&%TimePosition to a short, indeterminate &%TimeInterval that
immediately precedes the &%TimePosition."))


;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;      (and
;;           (resource ?PROC ?OBJ)
;;           (holdsDuring (ImmediatePastFn (WhenFn ?PROC)) (measure ?OBJ ?QUANT1))
;;           (holdsDuring (ImmediateFutureFn (WhenFn ?PROC)) (measure ?OBJ ?QUANT2)))
;;      (greaterThan ?QUANT1 ?QUANT2))

(tell (TemporalSumorelation FutureFn))
(tell (UnarySumofunction FutureFn))
(tell (sumodocumentation FutureFn "A &%UnarySumofunction that maps a &%TimePosition
to the &%TimeInterval which it meets and which ends at
&%PositiveInfinity."))



(tell (TemporalSumorelation ImmediateFutureFn))
(tell (UnarySumofunction ImmediateFutureFn))
(tell (sumodocumentation ImmediateFutureFn "A &%UnarySumofunction that maps a
&%TimePosition to a short, indeterminate &%TimeInterval that
immediately follows the &%TimePosition."))


;; The following definitions and axioms (down to the next section break)
;; cover the content in the Simple-Time ontology on the Ontolingua server.

(tell (BinaryPredicate date))
(tell (SingleValuedSumorelation date))
(tell (AsymmetricSumorelation date))
(tell (sumodocumentation date "A &%BinaryPredicate that specifies a
&%TimePosition in absolute calendar time, at the resolution
of one day, for a particular &%Object or &%Process."))

(tell (TemporalSumorelation YearFn))
(tell (UnarySumofunction YearFn))
(tell (sumodocumentation YearFn "A &%UnarySumofunction that maps a number to the corresponding calendar
&%Year.  For example, (&%YearFn 1912) returns the &%Sumoclass containing just one instance,
the year of 1912.  As might be expected, positive integers return years in the Common Era,
while negative integers return years in B.C.E.  Note that this function returns a &%Sumoclass
as a value.  The reason for this is that the related functions, viz. &%MonthFn, &%DayFn,
&%HourFn, &%MinuteFn, and &%SecondFn, are used to generate both specific &%TimeIntervals
and recurrent intervals, and the only way to do this is to make the sumodomains and sumoranges of
these functions classes rather than individuals."))

(tell (TemporalSumorelation MonthFn))
(tell (BinarySumofunction MonthFn))
(tell (sumodocumentation MonthFn "A &%BinarySumofunction that maps a subclass of &%Month and a
subclass of &%Year to the class containing the &%Months corresponding to thos &%Years.
For example (&%MonthFn &%January (&%YearFn 1912)) is the class containing the eighth
&%Month, i.e. August, of the &%Year 1912.  For another example, (&%MonthFn &%August
&%Year) is equal to &%August, the class of all months of August.  Note that this function
returns a &%Sumoclass as a value.  The reason for this is that the related functions, viz.
DayFn, HourFn, MinuteFn, and SecondFn, are used to generate both specific &%TimeIntervals
and recurrent intervals, and the only way to do this is to make the sumodomains and sumoranges of
these functions classes rather than individuals."))

(tell (TemporalSumorelation DayFn))
(tell (BinarySumofunction DayFn))
(tell (sumodocumentation DayFn "A &%BinarySumofunction that assigns a &%PositiveRealSumonumber and
a subclass of &%Months to the &%Days within each &%Month corresponding to that
&%PositiveRealSumonumber.  For example, (&%DayFn 16 &%August) is the &%Sumoclass of all
sixteenth days of August.  For another example, (&%DayFn 9 &%Month) would return
the class of all ninth days of any month.  For still another example, (&%DayFn 18
(&%MonthFn 8 (YearFn 1912))) denotes the 18th day of August 1912."))



(tell (TemporalSumorelation HourFn))
(tell (BinarySumofunction HourFn))
(tell (sumodocumentation HourFn "A &%BinarySumofunction that assigns a &%PositiveRealSumonumber and
a subclass of &%Days to the &%Hours within each &%Day corresponding to that
&%PositiveRealSumonumber.  For example, (&%HourFn 12 &%Thursday) is the &%Sumoclass of all
instances of noon Thursday.  For another example, (&%HourFn 24 &%Day) would return
the class of all instances of midnight.  For still another example, (&%HourFn 14
(&%DayFn 18 (&%MonthFn 8 (YearFn 1912)))) denotes 2 PM on the 18th day of August
1912."))



(tell (TemporalSumorelation MinuteFn))
(tell (BinarySumofunction MinuteFn))
(tell (sumodocumentation MinuteFn "A &%BinarySumofunction that assigns a &%PositiveRealSumonumber and
a subclass of &%Hours to the &%Minutes within each &%Hour corresponding to that
&%PositiveRealSumonumber.  For example, (&%MinuteFn 30 (&%HourFn 17 &%Day)) is the &%Sumoclass
of all 5:30's in the afternoon.  For another example, (&%MinuteFn 15 &%Hour) would return
the class of all instances of quarter past the hour.  For still another example,
(&%MinuteFn 15 (&%HourFn 14 (&%DayFn 18 (&%MonthFn 8 (YearFn 1912))))) denotes 15
minutes after 2 PM on the 18th day of August 1912."))



(tell (TemporalSumorelation SecondFn))
(tell (BinarySumofunction SecondFn))
(tell (sumodocumentation SecondFn "A &%BinarySumofunction that assigns a &%PositiveRealSumonumber and a
subclass of &%Minutes to the &%Seconds within each &%Minute corresponding to that
&%PositiveRealSumonumber.  For example, (&%SecondFn 4 (&%MinuteFn 5 &%Hour)) is the &%Sumoclass
of all fourth &%Seconds of every fifth &%Minute of every hour.  For another example,
(&%SecondFn 8 &%Minute) would return the eighth second of every minute.  For still
another example, (&%SecondFn 9 (&%MinuteFn 15 (&%HourFn 14 (&%DayFn 18 (&%MonthFn 8
(YearFn 1912)))))) denotes 9 seconds and 15 minutes after 2 PM on the 18th day of
August 1912."))



(tell (relatedInternalConcept Year YearFn))
(tell (relatedInternalConcept Year YearDuration))
(tell (sumodocumentation Year "The &%Sumoclass of all calendar &%Years."))



(tell (sumodocumentation LeapYear "The &%Sumoclass of all leap years.  These are years
which are either (i.) evenly divisible by 4 and not by 100 or (ii.) evenly
divisible by 400 (this latter case is known as a leap century)."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?LEAP LeapYear)
;;       (equal ?LEAP (MeasureFn ?NUMBER Year)))
;;    (or
;;       (and
;;          (equal (RemainderFn ?NUMBER 4) 0)
;;          (not (equal (RemainderFn ?NUMBER 100) 0)))
;;       (equal (RemainderFn ?NUMBER 400) 0)))

(tell (relatedInternalConcept Month MonthFn))
(tell (sumodocumentation Month "The &%Sumoclass of all calendar &%Months."))

(tell (sumodocumentation January "The &%Sumoclass of all &%Months which are January."))



(tell (sumodocumentation February "The &%Sumoclass of all &%Months which are February."))




(tell (sumodocumentation March "The &%Sumoclass of all &%Months which are March."))



(tell (sumodocumentation April "The &%Sumoclass of all &%Months which are April."))



(tell (sumodocumentation May "The &%Sumoclass of all &%Months which are May."))



(tell (sumodocumentation June "The &%Sumoclass of all &%Months which are June."))



(tell (sumodocumentation July "The &%Sumoclass of all &%Months which are July."))



(tell (sumodocumentation August "The &%Sumoclass of all &%Months which are August."))



(tell (sumodocumentation September "The &%Sumoclass of all &%Months which are September."))



(tell (sumodocumentation October "The &%Sumoclass of all &%Months which are October."))



(tell (sumodocumentation November "The &%Sumoclass of all &%Months which are November."))



(tell (sumodocumentation December "The &%Sumoclass of all &%Months which are December."))



(tell (relatedInternalConcept Day DayFn))
(tell (relatedInternalConcept Day DayDuration))
(tell (sumodocumentation Day "The &%Sumoclass of all calendar &%Days."))


(tell (sumodocumentation Monday "The &%Sumoclass of all calendar Mondays."))

(tell (sumodocumentation Tuesday "The &%Sumoclass of all calendar Tuesdays."))


(tell (sumodocumentation Wednesday "The &%Sumoclass of all calendar Wednesdays."))


(tell (sumodocumentation Thursday "The &%Sumoclass of all calendar Thursdays."))


(tell (sumodocumentation Friday "The &%Sumoclass of all calendar Fridays."))


(tell (sumodocumentation Saturday "The &%Sumoclass of all calendar Saturdays."))


(tell (sumodocumentation Sunday "The &%Sumoclass of all calendar Sundays."))



(tell (sumodocumentation Week "The &%Sumoclass of all calendar weeks."))


(tell (relatedInternalConcept Hour HourFn))
(tell (relatedInternalConcept Hour HourDuration))
(tell (sumodocumentation Hour "The &%Sumoclass of all clock &%Hours."))


(tell (relatedInternalConcept Minute MinuteFn))
(tell (relatedInternalConcept Minute MinuteDuration))
(tell (sumodocumentation Minute "The &%Sumoclass of all clock &%Minutes."))


(tell (relatedInternalConcept Second SecondDuration))
(tell (relatedInternalConcept Second SecondFn))
(tell (sumodocumentation Second "The &%Sumoclass of all clock &%Seconds."))


(tell (TemporalSumorelation TemporalCompositionFn))
(tell (BinarySumofunction TemporalCompositionFn))
(tell (sumodocumentation TemporalCompositionFn "The basic &%Sumofunction for expressing
the composition of larger &%TimeIntervals out of smaller &%TimeIntervals.
For example, if &%ThisSeptember is an &%instance of &%September,
(&%TemporalCompositionFn &%ThisSeptember &%Day) denotes the &%Sumoclass of
consecutive days that make up &%ThisSeptember.  Note that one can obtain
the number of instances of this &%Sumoclass by using the function &%CardinalityFn."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (equal (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS)
;;    (forall (?TIME1 ?TIME2)
;;       (=>
;;          (and
;;             (instance ?TIME1 ?INTERVAL-TYPE)
;;             (instance ?TIME2 ?CLASS))
;;          (exists (?DURATION)
;;             (and
;;                (duration ?TIME1 ?DURATION)
;;                (duration ?TIME2 ?DURATION))))))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (equal (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS)
;;    (forall (?TIME1 ?TIME2)
;;       (=>
;;          (and
;;             (instance ?TIME1 ?CLASS)
;;             (instance ?TIME2 ?CLASS)
;;             (not (equal ?TIME1 ?TIME2)))
;;          (or
;;             (meetsTemporally ?TIME1 ?TIME2)
;;             (meetsTemporally ?TIME2 ?TIME1)
;;             (earlier ?TIME1 ?TIME2)
;;             (earlier ?TIME2 ?TIME1)))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (equal (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS)
;;    (exists (?TIME)
;;       (and
;;          (instance ?TIME ?CLASS)
;;          (starts ?TIME ?INTERVAL))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (equal (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS)
;;    (exists (?TIME)
;;       (and
;;          (instance ?TIME ?CLASS)
;;          (finishes ?TIME ?INTERVAL))))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (equal (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS)
;;    (forall (?TIME1)
;;       (=>
;;          (and
;;             (instance ?TIME1 ?CLASS)
;;             (not (finishes ?TIME1 ?INTERVAL)))
;;          (exists (?TIME2)
;;             (and
;;                (instance ?TIME2 ?CLASS)
;;                (meetsTemporally ?TIME1 ?TIME2))))))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (equal (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS)
;;    (forall (?TIME1)
;;       (=>
;;          (and
;;             (instance ?TIME1 ?CLASS)
;;             (not (starts ?TIME1 ?INTERVAL)))
;;          (exists (?TIME2)
;;             (and
;;                (instance ?TIME2 ?CLASS)
;;                (meetsTemporally ?TIME2 ?TIME1))))))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (equal (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS)
;;    (forall (?TIME)
;;       (=>
;;          (and
;;             (instance ?TIME TimePoint)
;;             (temporalPart ?TIME ?INTERVAL))
;;          (exists (?INSTANCE)
;;             (and
;;                (instance ?INSTANCE ?CLASS)
;;                (temporalPart ?TIME ?INSTANCE))))))








;; END FILE

;; BEGIN FILE


;;;;;;;;;;;;;;;;;;;
;; MEREOTOPOLOGY ;;
;;;;;;;;;;;;;;;;;;;

;; INCLUDES 'STRUCTURAL ONTOLOGY'
;; INCLUDES 'BASE ONTOLOGY'

;; Most of this content is taken from Barry Smith's and Nicola Guarino's
;; papers on the subject.

;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (instance connected BinaryPredicate)
;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (instance connected SpatialRelation)
;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (instance connected ReflexiveRelation)
;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (instance connected SymmetricRelation)
;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (domain connected 1 Object)
;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (domain connected 2 Object)
(tell (sumodocumentation connected "(connected ?OBJ1 ?OBJ2) means that ?OBJ1
&%meetsSpatially ?OBJ2 or that ?OBJ1 &%overlapsSpatially ?OBJ2."))

;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (=>
;;      (connected ?OBJ1 ?OBJ2)
;;      (or
;;           (meetsSpatially ?OBJ1 ?OBJ2)
;;           (overlapsSpatially ?OBJ1 ?OBJ2)))

;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (<=>
;; 	(instance ?OBJ SelfConnectedObject)
;; 	(forall (?PART1 ?PART2)
;; 		(=>
;; 			(equal ?OBJ (MereologicalSumFn ?PART1 ?PART2))
;; 			(connected ?PART1 ?PART2))))

(tell (SpatialSumorelation connects))
(tell (TernaryPredicate connects))
(tell (sumodocumentation connects "The relationship between three things, when one of
the three things connects the other two.  More formally, (&%connects ?OBJ1
?OBJ2 ?OBJ3) means that (&%connected ?OBJ1 ?OBJ2) and (&%connected ?OBJ1 ?OBJ3)
and not (&%connected ?OBJ2 ?OBJ3)."))

;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (<=>
;;    (connects ?OBJ1 ?OBJ2 ?OBJ3)
;;    (and
;;       (connected ?OBJ1 ?OBJ2)
;;       (connected ?OBJ1 ?OBJ3)
;;       (not
;;          (connected ?OBJ2 ?OBJ3))))

;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (subrelation meetsSpatially connected)
(tell (IrreflexiveSumorelation meetsSpatially))
(tell (SymmetricSumorelation meetsSpatially))
(tell (sumodocumentation meetsSpatially "(&%meetsSpatially ?OBJ1 ?OBJ2) means that
?OBJ1 and ?OBJ2 are &%connected but that neither ?OBJ1 nor ?OBJ2
&%overlapsSpatially the other."))

;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (subrelation overlapsSpatially connected)
(tell (ReflexiveSumorelation overlapsSpatially))
(tell (SymmetricSumorelation overlapsSpatially))
(tell (sumodocumentation overlapsSpatially "(&%overlapsSpatially ?OBJ1 ?OBJ2) means
that the &%Objects ?OBJ1 and ?OBJ2 have some parts in common.  This is a
reflexive and symmetric (but not transitive) relation."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(overlapsSpatially ?OBJ1 ?OBJ2)
;;      	(exists (?OBJ3)
;;           	(and
;;                	(part ?OBJ3 ?OBJ1)
;;                	(part ?OBJ3 ?OBJ2))))


;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (member ?OBJ1 ?COLL)
;;       (member ?OBJ2 ?COLL))
;;    (not
;;          (overlapsSpatially ?OBJ1 ?OBJ2)))

;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (=>
;;    (and
;;       (instance ?REL CaseRole)
;;       (holds ?REL ?PROCESS ?OBJ))
;;    (exists (?TIME)
;;       (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ)))

(tell (SymmetricSumorelation overlapsPartially))
(tell (IrreflexiveSumorelation overlapsPartially))
(tell (sumodocumentation overlapsPartially "(&%overlapsPartially ?OBJ1 ?OBJ2) means
that ?OBJ1 and ?OBJ2 have part(s) in common, but neither ?OBJ1 nor ?OBJ2
is a &%part of the other."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (overlapsPartially ?OBJ1 ?OBJ2)
;;       (and
;;          (not (part ?OBJ1 ?OBJ2))
;;          (not (part ?OBJ2 ?OBJ1))
;;          (exists (?OBJ3)
;;             (and
;;                (part ?OBJ3 ?OBJ1)
;;                (part ?OBJ3 ?OBJ2)))))

(tell (IrreflexiveSumorelation superficialPart))
(tell (TransitiveSumorelation superficialPart))
(tell (sumodocumentation superficialPart "(&%superficialPart ?OBJ1 ?OBJ2)
means that ?OBJ1 is a part of ?OBJ2 that has no interior parts of its own
(or, intuitively, that only overlaps those parts of ?OBJ2 that are
externally connected with the mereological complement of ?OBJ2). This too
is a transitive relation closed under &%MereologicalSumFn and
&%MereologicalProductFn."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(superficialPart ?OBJ1 ?OBJ2)
;; 	(and
;; 		(not
;; 			(interiorPart ?OBJ1 ?OBJ2))
;; 		(not
;; 			(exists (?OBJ3)
;; 				(interiorPart ?OBJ3 ?OBJ1)))))

(tell (AsymmetricSumorelation surface))
(tell (sumodocumentation surface "(&%surface ?OBJ1 ?OBJ2) means that ?OBJ1
is a maximally connected &%superficialPart of ?OBJ2.  Note that some
&%SelfConnectedObjects have more than one surface, e.g. a hollow
object like a tennis ball has both an inner and an outer surface."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (surface ?OBJ1 ?OBJ2)
;;    (forall (?OBJ3)
;;       (=>
;; 	   (superficialPart ?OBJ3 ?OBJ2)
;; 	   (part ?OBJ3 ?OBJ1))))

(tell (IrreflexiveSumorelation interiorPart))
(tell (TransitiveSumorelation interiorPart))
(tell (sumodocumentation interiorPart "(&%interiorPart ?OBJ1 ?OBJ2) means
that ?OBJ1 is part ?OBJ2 and there is no overlap between ?OBJ1 and
any &%superficialPart ?OBJ2."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;; 	(interiorPart ?OBJ1 ?OBJ2)
;;      	(forall (?PART)
;;                	(=>
;;                     	(superficialPart ?PART ?OBJ2)
;;                     	(not
;;                          	(overlapsSpatially ?OBJ1 ?PART)))))

(tell (sumodocumentation bottom "(&%bottom ?BOTTOM ?OBJECT) holds if ?BOTTOM is the
lowest or deepest maximal superficial part of ?OBJECT."))

;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (=>
;; 	(and
;; 		(bottom ?BOTTOM ?OBJECT)
;; 		(part ?PART ?OBJECT)
;; 		(not (connected ?PART ?BOTTOM)))
;; 	(orientation ?PART ?BOTTOM Above))

(tell (sumodocumentation top "(&%top ?TOP ?OBJECT) means that ?TOP is the highest maximal
superficial part of ?OBJECT."))

;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (=>
;; 	(and
;; 		(top ?TOP ?OBJECT)
;; 		(part ?PART ?OBJECT)
;; 		(not (connected ?PART ?TOP)))
;; 	(orientation ?PART ?TOP Below))

(tell (sumodocumentation side "(&%side ?SIDE ?OBJECT) means that ?SIDE is a side of the object,
as opposed to the &%top or &%bottom."))

;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (=>
;; 	(and
;; 		(side ?SIDE ?OBJECT)
;; 		(part ?PART ?OBJECT)
;; 		(not (connected ?PART ?SIDE)))
;;       (or
;; 	      (orientation ?SIDE ?PART Left)
;;             (orientation ?SIDE ?PART Right)))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(width ?OBJECT ?WIDTH)
;; 	(exists (?SIDE1 ?SIDE2)
;; 		(and
;; 			(side ?SIDE1 ?OBJECT)
;; 			(side ?SIDE2 ?OBJECT)
;; 			(distance ?SIDE1 ?SIDE2 ?WIDTH))))

(tell (sumodocumentation height "The height of an &%Object is the distance between
its &%top and its &%bottom."))


(tell (SpatialSumorelation MereologicalSumFn))
(tell (BinarySumofunction MereologicalSumFn))
(tell (relatedInternalConcept MereologicalSumFn MereologicalProductFn))
(tell (relatedInternalConcept MereologicalSumFn MereologicalDifferenceFn))
(tell (sumodocumentation MereologicalSumFn "(&%MereologicalSumFn ?OBJ1 ?OBJ2)
denotes the &%Object consisting of the parts which belong to either
?OBJ1 or ?OBJ2."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;      (equal ?OBJ3 (MereologicalSumFn ?OBJ1 ?OBJ2))
;;      (forall (?PART)
;; 	       (<=>
;; 	            (part ?PART ?OBJ3)
;; 		      (or
;; 	  	           (part ?PART ?OBJ1)
;; 			     (part ?PART ?OBJ2)))))

(tell (SpatialSumorelation MereologicalProductFn))
(tell (BinarySumofunction MereologicalProductFn))
(tell (relatedInternalConcept MereologicalProductFn MereologicalDifferenceFn))
(tell (sumodocumentation MereologicalProductFn "(&%MereologicalProductFn ?OBJ1 ?OBJ2)
denotes the &%Object consisting of the parts which belong to both ?OBJ1
and ?OBJ2."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;      (equal ?OBJ3 (MereologicalProductFn ?OBJ1 ?OBJ2))
;;      (forall (?PART)
;; 	       (<=>
;; 	            (part ?PART ?OBJ3)
;; 		      (and
;; 	  	           (part ?PART ?OBJ1)
;; 			     (part ?PART ?OBJ2)))))

(tell (SpatialSumorelation MereologicalDifferenceFn))
(tell (BinarySumofunction MereologicalDifferenceFn))
(tell (sumodocumentation MereologicalDifferenceFn "(&%MereologicalDifferenceFn ?OBJ1
?OBJ2) denotes the &%Object consisting of the parts which belong to ?OBJ1
and not to ?OBJ2."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;      (equal ?OBJ3 (MereologicalDifferenceFn ?OBJ1 ?OBJ2))
;;      (forall (?PART)
;; 	       (<=>
;; 	            (part ?PART ?OBJ3)
;; 		      (and
;; 	  	           (part ?PART ?OBJ1)
;;                        (not
;; 			          (part ?PART ?OBJ2))))))

;; What follows is an alignment of Casati and Varzi's formal theory of
;; holes with the SUMO.

(tell (BinaryPredicate hole))
(tell (SpatialSumorelation hole))
(tell (AsymmetricSumorelation hole))
(tell (sumodocumentation hole "(&%hole ?HOLE ?OBJ) means that ?HOLE is a
&%Hole in ?OBJ.  A &%Hole is a fillable body located at the
&%surface an &%Object."))

(tell (sumodocumentation Hole "A hole is an immaterial body located at the surface
of an &%Object.  Since every &%Hole is ontologically dependent on its host
(i.e., the object in which it is a hole), being a &%Hole is defined as
being a &%hole in something.  Note that two &%Holes may occupy the same
region, or part of the same region, without sharing any parts."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(instance ?HOLE Hole)
;; 	(exists (?OBJ)
;; 		(hole ?HOLE ?OBJ)))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(hole ?HOLE ?OBJ)
;;       (not
;; 		(instance ?OBJ Hole)))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(hole ?HOLE ?OBJ)
;;           (not
;; 		 (overlapsSpatially ?HOLE ?OBJ)))

;; Any two hosts of a hole have a common proper part that entirely hosts
;; the hole.

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(hole ?HOLE ?OBJ1)
;;             (hole ?HOLE ?OBJ2))
;;       (exists (?OBJ3)
;;              (and
;; 			(properPart ?OBJ3 (MereologicalProductFn ?OBJ1 ?OBJ2))
;;                   (hole ?HOLE ?OBJ3))))

;; A common host of two holes hosts all parts of the sum of those holes.

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;; 	(and
;; 		(hole ?HOLE1 ?OBJ)
;;       	(hole ?HOLE2 ?OBJ))
;;      	(forall (?HOLE3)
;;         	(=>
;; 			(part ?HOLE3 (MereologicalSumFn ?HOLE1 ?HOLE2))
;;                   (hole ?HOLE3 ?OBJ))))

;; Any object that includes the host of a hole is a host of that hole,
;; unless its parts also include parts of that very hole.

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(hole ?HOLE ?OBJ1)
;;             (part ?OBJ1 ?OBJ2))
;;       (or
;; 		(overlapsSpatially ?HOLE ?OBJ2)
;;             (hole ?HOLE ?OBJ2)))

;; Overlapping holes have overlapping hosts.


;; No hole is atomic

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?HOLE1 Hole)
;;       (exists (?HOLE2)
;;       	(properPart ?HOLE2 ?HOLE1)))

;; Topological Definitions

;; Definition of 'PrincipalHostFn'

(tell (SpatialSumorelation PrincipalHostFn))
(tell (UnarySumofunction PrincipalHostFn))
(tell (AsymmetricSumorelation PrincipalHostFn))
(tell (sumodocumentation PrincipalHostFn "A &%UnarySumofunction that maps a &%Hole to
the &%Object which is its principal host.  The principle host of a &%Hole
is its maximally connected host (a notion taken here to be defined only
when the argument is a hole)."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;      (equal ?OBJ1 (PrincipalHostFn ?HOLE))
;;      (forall (?OBJ2)
;; 		(<=>
;; 			(overlapsSpatially ?OBJ2 ?OBJ1)
;; 			(exists (?OBJ3)
;; 				(and
;; 					(hole ?HOLE ?OBJ3)
;; 				      (overlapsSpatially ?OBJ2 ?OBJ3))))))

;; Holes are connected with their hosts.

;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (=>
;; 	(hole ?HOLE ?OBJ)
;;       (connected ?HOLE ?OBJ))

;; No hole can have a proper part that is externally connected
;; with exactly the same things as the hole itself.

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?HOLE1 Hole)
;;             (properPart ?HOLE2 ?HOLE1))
;;       (exists (?OBJ)
;;             (and
;; 			(meetsSpatially ?HOLE1 ?OBJ)
;;                   (not
;; 				(meetsSpatially ?HOLE2 ?OBJ)))))

(tell (ShapeAttribute Fillable))
(tell (sumodocumentation Fillable "Something is &%Fillable if it can be filled by
something else.  Note that 'filled' here means perfectly filled."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (exists (?TIME)
;;       (holdsDuring ?TIME
;;          (fills ?OBJ ?HOLE)))
;;      (attribute ?HOLE Fillable))

;; Something is fillable just in case it is part of a hole; i.e.,
;; fillability is an exclusive property of holes and their parts.

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(attribute ?HOLE1 Fillable)
;;        	(exists (?HOLE2)
;;         	(and
;; 			(instance ?HOLE2 Hole)
;;                   (part ?HOLE1 ?HOLE2))))

(tell (SpatialSumorelation partiallyFills))
(tell (AsymmetricSumorelation partiallyFills))
(tell (sumodocumentation partiallyFills "(&%partiallyFills ?OBJ ?HOLE) means that
?OBJ &%completelyFills some part of ?HOLE. Note that if (&%partiallyFills
?OBJ1 ?HOLE) and (&%part ?OBJ1 ?OBJ2), then (&%partiallyFills ?OBJ2 ?HOLE).
Note too that a partial filler need not be wholly inside a hole (it may
stick out), which means that every complete filler also qualifies as
(is a limit case of) a partial one."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(partiallyFills ?OBJ ?HOLE1)
;; 	(exists (?HOLE2)
;; 		(and
;; 			(part ?HOLE2 ?HOLE1)
;; 			(completelyFills ?OBJ ?HOLE2))))

(tell (AsymmetricSumorelation properlyFills))
(tell (sumodocumentation properlyFills "(&%properlyFills ?OBJ ?HOLE)
means that ?HOLE is properly (though perhaps incompletely) filled by
?OBJ, i.e. some part of ?HOLE is perfectly filled by ?OBJ.  Note that
&%properlyFills is the dual of &%completelyFills, and is so
related to &%partiallyFills that ?OBJ &%properlyFills ?HOLE just in
case ?OBJ &%partiallyFills every part of ?HOLE.  (Thus, every perfect
filler is both complete and proper in this sense)."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(properlyFills ?OBJ ?HOLE1)
;; 	(exists (?HOLE2)
;; 		(and
;; 			(part ?HOLE2 ?HOLE1)
;; 			(fills ?OBJ ?HOLE2))))

(tell (AsymmetricSumorelation completelyFills))
(tell (sumodocumentation completelyFills "(&%completelyFills ?OBJ ?HOLE)
means that some &%part of the &%Object ?OBJ fills the &%Hole ?HOLE.
Note that if (&%completelyFills ?OBJ1 ?HOLE) and (&%part
?OBJ1 ?OBJ2), then (&%completelyFills ?OBJ2 ?HOLE)."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(completelyFills ?OBJ1 ?HOLE)
;; 	(exists (?OBJ2)
;; 		(and
;; 			(part ?OBJ2 ?OBJ1)
;; 			(fills ?OBJ2 ?HOLE))))

(tell (AsymmetricSumorelation fills))
(tell (relatedInternalConcept fills Fillable))
(tell (sumodocumentation fills "Holes can be filled.  (&%fills ?OBJ ?HOLE)
means that the &%Object ?OBJ fills the &%Hole ?HOLE.  Note that
&%fills here means perfectly filled."))

;; Perfect fillers and fillable entities have no parts in common (rather,
;; they may occupy the same spatial region).

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(fills ?OBJ1 ?HOLE)
;;            	(attribute ?OBJ2 Fillable))
;;       (not
;; 		(overlapsSpatially ?OBJ1 ?OBJ2)))

;; A complete filler of (a part of) a hole is connected with everything
;; with which (that part of) the hole itself is connected.

;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (=>
;;    (completelyFills ?OBJ1 ?HOLE)
;;       (forall (?OBJ2)
;;    	   (=>
;; 	      (connected ?OBJ2 ?HOLE)
;;             (connected ?OBJ2 ?OBJ1))))

;; Every hole is connected with everything with which a proper filler
;; of the hole is connected.

;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (=>
;; 	(and
;; 		(properlyFills ?OBJ1 ?HOLE)
;;           	(connected ?OBJ2 ?OBJ1))
;;      	(connected ?HOLE ?OBJ2))

;; A perfect filler of (a part of) a hole completely fills every proper
;; part of (that part of) that hole.


;; Every proper part of a perfect filler of (a part of) a hole properly
;; fills (that part of) that hole.


(tell (SpatialSumorelation SkinFn))
(tell (UnarySumofunction SkinFn))
(tell (AsymmetricSumorelation SkinFn))
(tell (sumodocumentation SkinFn "A &%UnarySumofunction that maps a &%Hole to the skin
of the &%Hole.  The skin of a &%Hole is the fusion of those superficial
parts (see &%superficialPart) of the &%Hole's principal host (see
&%PrincipalHostFn) with which the &%Hole is externally connected."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;      (equal ?OBJ1 (SkinFn ?HOLE))
;;      (forall (?OBJ2)
;; 		(<=>
;; 			(overlapsSpatially ?OBJ2 ?OBJ1)
;; 			(exists (?OBJ3)
;; 				(and
;; 				      (superficialPart ?OBJ3 (PrincipalHostFn ?HOLE))
;; 				      (meetsSpatially ?HOLE ?OBJ3)
;; 				      (overlapsSpatially ?OBJ2 ?OBJ3))))))

;; END FILE

;; BEGIN FILE


;;;;;;;;;;;;;;;;;;;;;
;;    PROCESSES    ;;
;;;;;;;;;;;;;;;;;;;;;

;; INCLUDES 'TEMPORAL CONCEPTS'
;; INCLUDES 'OBJECTS'
;; INCLUDES 'QUALITIES'

(tell (BinaryPredicate subProcess))
(tell (PartialOrderingSumorelation subProcess))
(tell (sumodocumentation subProcess "(&%subProcess ?SUBPROC ?PROC) means that ?SUBPROC
is a subprocess of ?PROC.  A subprocess is here understood as a temporally
distinguished part (proper or not) of a &%Process."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (subProcess ?SUBPROC ?PROC)
;;       (or
;;          (equal (WhenFn ?SUBPROC) (WhenFn ?PROC))
;;          (during (WhenFn ?SUBPROC) (WhenFn ?PROC))))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (subProcess ?SUBPROC ?PROC)
;;    (forall (?REGION)
;;       (=>
;;          (located ?PROC ?REGION)
;;          (located ?SUBPROC ?REGION))))

;; Each temporal part of a Process exists at some timepoint.

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;;             (instance ?PROC Process)
;;             (subProcess ?SUBPROC ?PROC))
;;      	(exists (?TIME)
;;       	    (time ?SUBPROC ?TIME)))

;; The following formulas cover the hierarchy of &%Classes under
;; &%BiologicalProcess.

(tell (sumodocumentation BiologicalProcess "A &%Process embodied in an &%Organism."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?PROC BiologicalProcess)
;;    (exists (?OBJ)
;;       (and
;;          (instance ?OBJ Organism)
;;          (located ?PROC ?OBJ))))


(tell (sumodocumentation PhysiologicProcess "A normal process of an &%Organism
or part of an &%Organism."))

(tell (sumodocumentation OrganismProcess "A physiologic function of the
&%Organism as a whole, of multiple organ systems or of multiple
&%Organs or &%Tissues."))

(tell (sumodocumentation Birth "The &%Process of being born."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?BIRTH Birth)
;;       (experiencer ?BIRTH ?AGENT))
;;    (exists (?DEATH)
;;       (and
;;          (instance ?DEATH Death)
;;          (experiencer ?DEATH ?AGENT))))

(tell (sumodocumentation Death "The &%Process of dying."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?DEATH Death)
;;       (experiencer ?DEATH ?AGENT))
;;    (holdsDuring (FutureFn (WhenFn ?DEATH)) (attribute ?AGENT Dead)))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?DEATH Death)
;;       (instance ?BIRTH Birth)
;;       (experiencer ?DEATH ?AGENT)
;;       (experiencer ?BIRTH ?AGENT))
;;    (exists (?TIME)
;;       (and
;;          (meetsTemporally (WhenFn ?BIRTH) ?TIME)
;;          (meetsTemporally ?TIME (WhenFn ?DEATH))
;;          (holdsDuring ?TIME (attribute ?AGENT Living)))))

(tell (sumodocumentation Breathing "The &%Process of respiration, by which oxygen
is made available to an &%Animal.  This covers processes of inhalation,
exhalation, and alternations between the two."))

(tell (sumodocumentation Ingesting "The &%Process by which &%Food is
incorporated into an &%Animal."))


(tell (sumodocumentation Eating "The &%Process by which solid &%Food is
incorporated into an &%Animal."))


(tell (sumodocumentation Drinking "The &%Process by which liquid &%Food, i.e.
&%Beverages, are incorporated into an &%Animal."))

(tell (sumodocumentation Growth "The &%Process of biological development in which
an &%Organism or part of an &%Organism changes its form or its size."))

(tell (sumodocumentation Replication "The &%Process of biological reproduction.
This can be either a sexual or an asexual process."))


;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?REP Replication)
;;    (exists (?BODY)
;;       (and
;;          (instance ?BODY ReproductiveBody)
;;          (result ?REP ?BODY))))

(tell (sumodocumentation SexualReproduction "Sexual &%Processes of biological
reproduction."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?REP SexualReproduction)
;;       (result ?REP ?ORGANISM))
;;    (not (exists (?MOTHER ?FATHER)
;;       (and
;;          (mother ?ORGANISM ?MOTHER)
;;          (father ?ORGANISM ?FATHER)))))

(tell (sumodocumentation AsexualReproduction "Asexual &%Processes of biological
reproduction."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?REP AsexualReproduction)
;;       (result ?REP ?ORGANISM))
;;    (not (exists (?PARENT1 ?PARENT2)
;;       (and
;;          (parent ?ORGANISM ?PARENT1)
;;          (parent ?ORGANISM ?PARENT2)
;;          (not (equal ?PARENT1 ?PARENT2))))))

(tell (sumodocumentation PsychologicalProcess "A &%BiologicalProcess which takes place in
the mind or brain of an &%Organism and which may be manifested in the behavior
of the &%Organism."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;     (instance ?PROCESS PsychologicalProcess)
;;     (exists (?ANIMAL)
;;         (and
;;             (instance ?ANIMAL Animal)
;;             (experiencer ?PROCESS ?ANIMAL))))

(tell (sumodocumentation OrganOrTissueProcess "A &%PhysiologicProcess of a
particular &%Organ or &%Tissue."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;     (instance ?PROC OrganOrTissueProcess)
;;     (exists (?THING)
;;         (and
;;             (located ?PROC ?THING)
;;             (or
;;                 (instance ?THING Organ)
;;                 (instance ?THING Tissue)))))

(tell (sumodocumentation PathologicProcess "A disordered process, activity, or
state of the &%Organism as a whole, of a body system or systems, or of
multiple &%Organs or &%Tissues. Included here are normal responses to a
negative stimulus as well as patholologic conditions or states that are
less specific than a disease. Pathologic functions frequently have
systemic effects."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?PATH PathologicProcess)
;;       (experiencer ?PATH ?ORG))
;;    (exists (?PART ?DISEASE)
;;       (and
;;          (part ?PART ?ORG)
;;          (instance ?DISEASE DiseaseOrSyndrome)
;;          (attribute ?PART ?DISEASE))))

(tell (sumodocumentation Injuring "The process of creating a traumatic wound or
injury.  Since &%Injuring is not possible without some biologic function
of the organism being injured, it is a subclass of &%BiologicalProcess."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;     (instance ?INJ Injuring)
;;     (exists (?STRUCT)
;;         (and
;;             (instance ?STRUCT AnatomicalStructure)
;;             (patient ?INJ ?STRUCT))))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (instance ?INJ Injuring)
;;    (and
;;       (instance ?INJ Damaging)
;;       (patient ?INJ Organism)))

(tell (sumodocumentation Poisoning "A &%Poisoning is caused by an external
substance.  Since &%Poisoning is not possible without some biologic
function which affects the &%Organism being injured, it is a subclass
of &%BiologicalProcess."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;     (instance ?POISON Poisoning)
;;     (exists (?THING)
;;         (and
;;             (patient ?POISON ?THING)
;;             (or
;;                 (instance ?THING Organism)
;;                 (instance ?THING AnatomicalStructure)))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;     (instance ?POISON Poisoning)
;;     (exists (?SUBSTANCE)
;;         (and
;; 		(instance ?SUBSTANCE BiologicallyActiveSubstance)
;;             (instrument ?POISON ?SUBSTANCE))))

(tell (sumodocumentation IntentionalProcess "A &%Process that is
deliberately set in motion by a &%CognitiveAgent."))

;; sumo2loom is dropping the following statement because it uses
;; hasPurposeForAgent, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?PROC IntentionalProcess)
;;       (agent ?PROC ?AGENT))
;;    (and
;;       (instance ?AGENT CognitiveAgent)
;;       (exists (?PURP)
;;          (hasPurposeForAgent ?PROC ?PURP ?AGENT))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?PROC IntentionalProcess)
;;    (exists (?AGENT)
;;       (and
;;          (instance ?AGENT CognitiveAgent)
;;          (agent ?PROC ?AGENT))))

(tell (sumodocumentation IntentionalPsychologicalProcess "An &%IntentionalProcess that
can be realized entirely within the mind or brain of an &%Organism.  Thus,
for example, &%Reasoning is a subclass of &%IntentionalPsychologicalProcess,
because one can reason simply by exercising one's mind/brain.  On the other
hand, &%RecreationOrExercise is not a subclass of &%IntentionalPsychologicalProcess,
because many instances of &%RecreationOrExercise necessarily have &%subProcesses
of &%BodyMotion."))

(tell (sumodocumentation RecreationOrExercise "A &%Process that is carried out for
the purpose of recreation or exercise."))

(tell (sumodocumentation OrganizationalProcess "An &%IntentionalProcess that
is carried out within or by an &%Organization."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?ACT OrganizationalProcess)
;;       (agent ?ACT ?AGENT))
;;    (or
;;       (instance ?AGENT Organization)
;;       (exists (?ORG)
;;          (and
;;             (instance ?ORG Organization)
;;             (member ?AGENT ?ORG)))))

(tell (sumodocumentation EducationalProcess "Any &%Process which occurs in an
organizational setting and which is intended to result in &%Learning."))

;; sumo2loom is dropping the following statement because it uses
;; hasPurpose, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?EDUCATION EducationalProcess)
;;       (patient ?EDUCATION ?PERSON))
;;    (hasPurpose ?EDUCATION (exists (?LEARN)
;;                              (and
;;                                 (instance ?LEARN Learning)
;;                                 (patient ?LEARN ?PERSON)))))

(tell (sumodocumentation ReligiousProcess "An &%OrganizationalProcess that is
carried out within or by a &%ReligiousOrganization."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?ACT ReligiousProcess)
;;       (agent ?ACT ?AGENT))
;;    (or
;;       (instance ?AGENT ReligiousOrganization)
;;       (exists (?ORG)
;;          (and
;;             (member ?AGENT ?ORG)
;;             (instance ?ORG ReligiousOrganization)))))

(tell (sumodocumentation JoiningAnOrganization "The &%OrganizationalProcess of
becoming a &%member of an &%Organization."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?JOIN JoiningAnOrganization)
;;       (instance ?ORG Organization)
;;       (agent ?JOIN ?ORG)
;;       (patient ?JOIN ?PERSON))
;;    (holdsDuring (ImmediateFutureFn (WhenFn ?JOIN)) (member ?PERSON ?ORG)))

(tell (sumodocumentation LeavingAnOrganization "The &%OrganizationalProcess of
leaving an &%Organization, whether voluntarily or involuntarily."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?LEAVE LeavingAnOrganization)
;;       (instance ?ORG Organization)
;;       (agent ?LEAVE ?ORG)
;;       (patient ?LEAVE ?PERSON))
;;    (holdsDuring (ImmediateFutureFn (WhenFn ?LEAVE)) (not (member ?PERSON ?ORG))))

(tell (sumodocumentation Graduation "The &%OrganizationalProcess of graduating
from an &%EducationalOrganization."))


(tell (sumodocumentation Matriculation "The &%OrganizationalProcess of joining an
&%EducationalOrganization as a student."))


(tell (sumodocumentation Hiring "&%OrganizationalProcesses where someone is made an
employee of an &%Organization."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?HIRE Hiring)
;;       (instance ?ORG Organization)
;;       (agent ?HIRE ?ORG)
;;       (patient ?HIRE ?PERSON))
;;    (holdsDuring (ImmediateFutureFn (WhenFn ?HIRE)) (employs ?ORG ?PERSON)))

(tell (sumodocumentation TerminatingEmployment "&%OrganizationalProcesses where someone
ceases to be an employee of an &%Organization.  Note that this covers being
laid off, being fired, and voluntarily leaving a job."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?FIRE TerminatingEmployment)
;;       (instance ?ORG Organization)
;;       (agent ?FIRE ?ORG)
;;       (patient ?FIRE ?PERSON))
;;    (holdsDuring (ImmediateFutureFn (WhenFn ?FIRE)) (not (employs ?ORG ?PERSON))))

(tell (sumodocumentation PoliticalProcess "An &%OrganizationalProcess carried
out by officially constituted governments or with the aim of overthrowing
or modifying such a government."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?PROC PoliticalProcess)
;;    (exists (?GOV)
;;       (and
;;          (instance ?GOV Government)
;;          (or
;;             (agent ?PROC ?GOV)
;;             (patient ?PROC ?GOV)))))

(tell (sumodocumentation MilitaryProcess "Any &%Process that is carried out by a
military organization.  Note that this class covers &%Processes, e.g.
military operations, that are the result of careful planning, as well as
those which are unscripted."))

(tell (sumodocumentation RegulatoryProcess "an &%OrganizationalProcess whose aim is
the enforcement of rules or regulations."))

(tell (sumodocumentation Managing "&%OrganizationalProcesses that involve overseeing
the activities of others."))

(tell (sumodocumentation Planning "Specifying a set of actions in order to meet a
set of goals or objectives."))

(tell (sumodocumentation QuantityChange "Any &%InternalChange where a &%PhysicalQuantity
associated with the &%patient is altered."))

(tell (relatedInternalConcept Increasing Putting))
(tell (sumodocumentation Increasing "Any &%QuantityChange where the &%PhysicalQuantity
is increased."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?INCREASE Increasing)
;;       (patient ?INCREASE ?OBJ))
;;    (exists (?UNIT ?QUANT1 ?QUANT2)
;;    	(and
;;          (holdsDuring (ImmediatePastFn (WhenFn ?INCREASE)) (equal (MeasureFn ?OBJ ?UNIT) ?QUANT1))
;; 	   (holdsDuring (ImmediateFutureFn (WhenFn ?INCREASE)) (equal (MeasureFn ?OBJ ?UNIT) ?QUANT2))
;; 	   (greaterThan ?QUANT2 ?QUANT1))))

(tell (sumodocumentation Heating "Any &%Increasing &%Process where the &%PhysicalQuantity
increased is a &%TemperatureMeasure."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?HEAT Heating)
;;       (patient ?HEAT ?OBJ))
;;    (exists (?UNIT ?QUANT1 ?QUANT2)
;;    	(and
;;          (instance ?UNIT TemperatureMeasure)
;;          (holdsDuring (ImmediatePastFn (WhenFn ?HEAT)) (equal (MeasureFn ?OBJ ?UNIT) ?QUANT1))
;; 	   (holdsDuring (ImmediateFutureFn (WhenFn ?HEAT)) (equal (MeasureFn ?OBJ ?UNIT) ?QUANT2))
;; 	   (greaterThan ?QUANT2 ?QUANT1))))

(tell (relatedInternalConcept Decreasing Removing))
(tell (sumodocumentation Decreasing "Any &%QuantityChange where the &%PhysicalQuantity
is decreased."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?DECREASE Decreasing)
;;       (patient ?DECREASE ?OBJ))
;;    (exists (?UNIT ?QUANT1 ?QUANT2)
;;    	(and
;;          (holdsDuring (ImmediatePastFn (WhenFn ?DECREASE)) (equal (MeasureFn ?OBJ ?UNIT) ?QUANT1))
;; 	   (holdsDuring (ImmediateFutureFn (WhenFn ?DECREASE)) (equal (MeasureFn ?OBJ ?UNIT) ?QUANT2))
;; 	   (lessThan ?QUANT2 ?QUANT1))))

(tell (sumodocumentation Cooling "Any &%Decreasing &%Process where the &%PhysicalQuantity
decreased is a &%TemperatureMeasure."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?COOL Cooling)
;;       (patient ?COOL ?OBJ))
;;    (exists (?UNIT ?QUANT1 ?QUANT2)
;;    	(and
;;          (instance ?UNIT TemperatureMeasure)
;;          (holdsDuring (ImmediatePastFn (WhenFn ?COOL)) (equal (MeasureFn ?OBJ ?UNIT) ?QUANT1))
;; 	   (holdsDuring (ImmediateFutureFn (WhenFn ?COOL)) (equal (MeasureFn ?OBJ ?UNIT) ?QUANT2))
;; 	   (lessThan ?QUANT2 ?QUANT1))))

(tell (sumodocumentation Motion "Any &%Process of movement."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?MOTION Motion)
;;       (patient ?MOTION ?OBJ)
;;       (origin ?MOTION ?PLACE))
;;    (holdsDuring (ImmediatePastFn (WhenFn ?MOTION)) (located ?OBJ ?PLACE)))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?MOTION Motion)
;;       (patient ?MOTION ?OBJ)
;;       (destination ?MOTION ?PLACE))
;;    (holdsDuring (ImmediateFutureFn (WhenFn ?MOTION)) (located ?OBJ ?PLACE)))

(tell (CaseRole path))
(tell (sumodocumentation path "(&%path ?MOTION ?PATH) means that ?PATH is a route
along which ?MOTION occurs.  For example, Highway 101 is the path in the
following proposition:  the car drove up Highway 101."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (and
;;       (path ?PROCESS ?PATH1)
;;       (origin ?PROCESS ?SOURCE)
;;       (destination ?PROCESS ?DEST)
;;       (length ?PATH1 ?MEASURE1)
;;       (not
;;          (exists (?PATH2 ?MEASURE2)
;;             (and
;;                (path ?PROCESS ?PATH2)
;;                (origin ?PROCESS ?ORIGIN)
;;                (destination ?PROCESS ?DEST)
;;                (length ?PATH2 ?MEASURE2)
;;                (lessThan ?MEASURE2 ?MEASURE1)))))
;;    (forall (?OBJ)
;;       (=>
;;          (part ?OBJ ?PATH1)
;;          (between ?SOURCE ?OBJ ?DEST))))

(tell (sumodocumentation BodyMotion "Any &%Motion where the &%agent-rel is an &%Organism
and the &%patient is a &%BodyPart."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?MOTION BodyMotion)
;;    (exists (?OBJ ?AGENT)
;;       (and
;;          (instance ?OBJ BodyPart)
;;          (patient ?MOTION ?OBJ)
;;          (instance ?AGENT Organism)
;;          (agent ?MOTION ?AGENT))))

(tell (sumodocumentation Walking "Any &%BodyMotion which is accomplished by
means of the legs of an &%Organism on land for the purpose of moving
from one point to another."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?WALK Walking)
;;       (agent ?WALK ?AGENT))
;;    (exists (?AREA)
;;       (and
;;          (instance ?AREA LandArea)
;;          (located ?AGENT ?AREA))))

(tell (sumodocumentation Swimming "Any deliberate and controlled &%BodyMotion
through water that is accomplished by an &%Organism."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?SWIM Swimming)
;;       (agent ?SWIM ?AGENT))
;;    (exists (?AREA)
;;       (and
;;          (instance ?AREA WaterArea)
;;          (located ?AGENT ?AREA))))

(tell (sumodocumentation Dancing "Any &%BodyMotion of &%Humans which is
deliberately coordinated with music."))

(tell (sumodocumentation DirectionChange "The act of changing the direction in
which the &%patient of the act is oriented."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (instance ?PROC DirectionChange)
;;    (exists (?ATTR)
;;       (and
;;          (instance ?ATTR DirectionalAttribute)
;;          (or
;;             (and
;;                (holdsDuring (ImmediatePastFn (WhenFn ?PROC)) (manner ?PROC ?ATTR))
;;                (holdsDuring (ImmediateFutureFn (WhenFn ?PROC)) (not (manner ?PROC ?ATTR))))
;;             (and
;;                (holdsDuring (ImmediateFutureFn (WhenFn ?PROC)) (manner ?PROC ?ATTR))
;;                (holdsDuring (ImmediatePastFn (WhenFn ?PROC)) (not (manner ?PROC ?ATTR))))))))

(tell (sumodocumentation Transfer "Any &%instance of &%Motion where the &%agent-rel
of the &%Motion and the &%patient of the &%Motion are not the same
thing."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?TRANSFER Transfer)
;;       (agent ?TRANSFER ?AGENT)
;;       (patient ?TRANSFER ?PATIENT))
;;    (not
;;       (equal ?AGENT ?PATIENT)))

(tell (sumodocumentation Removing "The &%Sumoclass of &%Processes where something is
taken away from a location.  Note that the thing removed and the location
are specified with the &%CaseRoles &%patient and &%origin, respectively."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?REMOVE Removing)
;;       (origin ?REMOVE ?PLACE)
;;       (patient ?REMOVE ?OBJ))
;;    (and
;;       (holdsDuring (ImmediatePastFn (WhenFn ?REMOVE)) (located ?OBJ ?PLACE))
;;       (holdsDuring (ImmediateFutureFn (WhenFn ?REMOVE)) (not (located ?OBJ ?PLACE)))))

(tell (sumodocumentation Uncovering "The &%Sumoclass of &%Removing processes where the &%agent-rel
uncovers the &%patient, either completely or only partially."))

(tell (sumodocumentation Putting "The &%Sumoclass of &%Processes where something is put
in a location.  Note that the location is specified with the &%CaseRole
&%destination."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?PUT Putting)
;;       (destination ?PUT ?PLACE)
;;       (patient ?PUT ?OBJ))
;;    (and
;;       (holdsDuring (ImmediatePastFn (WhenFn ?PUT)) (not (located ?OBJ ?PLACE)))
;;       (holdsDuring (ImmediateFutureFn (WhenFn ?PUT)) (located ?OBJ ?PLACE))))

(tell (sumodocumentation Covering "The &%Sumoclass of &%Putting processes where the &%agent-rel
covers the &%patient, either completely or only partially, with something
else."))

(tell (sumodocumentation Substituting "The &%Sumoclass of &%Transfers where one thing is
replaced with something else."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?SUB Substituting)
;;    (exists (?PUT ?REMOVE ?OBJ1 ?OBJ2 ?PLACE)
;;       (and
;;          (instance ?PUT Putting)
;;          (instance ?REMOVE Removing)
;;          (subProcess ?PUT ?SUB)
;;          (subProcess ?REMOVE ?SUB)
;;          (patient ?REMOVE ?OBJ1)
;;          (origin ?REMOVE ?PLACE)
;;          (patient ?PUT ?OBJ2)
;;          (destination ?PUT ?PLACE)
;;          (not (equal ?OBJ1 ?OBJ2)))))

(tell (sumodocumentation Impelling "The &%subclass of &%Transfer where the &%patient
travels through space by means of a sudden, forceful event.  Some examples
would be shooting, throwing, tossing, etc."))

(tell (sumodocumentation Shooting "The &%subclass of &%Impelling where the &%patient
is a projectile that is fired through the air by means of some sort of
&%Device."))

(tell (sumodocumentation Touching "Any &%Transfer where two &%Objects are
brought into immediate physical contact with one another."))

;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (=>
;;    (and
;;       (instance ?TOUCH Touching)
;;       (agent ?TOUCH ?OBJ1)
;;       (patient ?TOUCH ?OBJ2))
;;    (holdsDuring (ImmediateFutureFn (WhenFn ?TOUCH)) (connected ?OBJ1 ?OBJ2)))

(tell (sumodocumentation Impacting "Any &%Touching where something comes into
sudden, forceful, physical contact with something else.  Some examples
would be striking, knocking, whipping etc."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?IMPACT Impacting)
;;       (patient ?IMPACT ?OBJ))
;;    (exists (?IMPEL)
;;       (and
;;          (instance ?IMPEL Impelling)
;;          (patient ?IMPEL ?OBJ)
;;          (earlier (WhenFn ?IMPEL) (WhenFn ?IMPACT)))))

(tell (relatedInternalConcept Transportation TransportationDevice))
(tell (sumodocumentation Transportation "&%Motion from one point to another by means
of a &%TransportationDevice."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?TRANS Transportation)
;;    (exists (?DEVICE)
;;          (and
;;             (instance ?DEVICE TransportationDevice)
;;             (instrument ?TRANS ?DEVICE))))

(tell (sumodocumentation Guiding "Any &%IntentionalProcess where the &%agent-rel tries to
direct the movements of another &%Object, whether an &%Agent or not."))

(tell (sumodocumentation Steering "Controlling the direction and/or speed of a
&%TransportationDevice.  This includes navigating a ship, driving a car
or truck, operating a train, etc."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?STEER Steering)
;;    (exists (?VEHICLE)
;;       (and
;;          (instance ?VEHICLE TransportationDevice)
;;          (patient ?STEER ?VEHICLE))))

(tell (relatedInternalConcept ChangeOfPossession possesses))
(tell (sumodocumentation ChangeOfPossession "The &%Sumoclass of &%Processes where
ownership of something is transferred from one &%Agent to another."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?CHANGE ChangeOfPossession)
;;       (patient ?CHANGE ?OBJ)
;;       (holdsDuring (ImmediatePastFn (WhenFn ?CHANGE)) (possesses ?AGENT1 ?OBJ))
;;       (holdsDuring (ImmediateFutureFn (WhenFn ?CHANGE)) (possesses ?AGENT2 ?OBJ)))
;;    (not
;;       (equal ?AGENT1 ?AGENT2)))

(tell (sumodocumentation Giving "The &%subclass of &%ChangeOfPossession where the
&%agent-rel gives the &%destination something."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?GIVE Giving)
;;       (agent ?GIVE ?AGENT1)
;;       (destination ?GIVE ?AGENT2)
;;       (instance ?AGENT2 Agent)
;;       (patient ?GIVE ?OBJ))
;;    (and
;;       (holdsDuring (ImmediatePastFn (WhenFn ?GIVE)) (possesses ?AGENT1 ?OBJ))
;;       (holdsDuring (ImmediateFutureFn (WhenFn ?GIVE)) (possesses ?AGENT2 ?OBJ))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?GIVE Giving)
;;       (agent ?GIVE ?AGENT1)
;;       (destination ?GIVE ?AGENT2)
;;       (instance ?AGENT2 Agent)
;;       (patient ?GIVE ?OBJ))
;;    (exists (?GET)
;;       (and
;;          (instance ?GET Getting)
;;          (agent ?GET ?AGENT2)
;;          (origin ?GET ?AGENT1)
;;          (patient ?GET ?OBJ))))

(tell (sumodocumentation UnilateralGiving "Any instance of &%Giving that is not part
of a &%Transaction.  In other words, any instance of &%Giving where nothing
is received in return.  Some examples of &%UnilateralGiving are:  honorary
awards, gifts, and financial grants."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?GIVE UnilateralGiving)
;;    (not
;;       (exists (?TRANS)
;;          (and
;;             (instance ?TRANS Transaction)
;;             (subProcess ?GIVE ?TRANS)))))

(tell (sumodocumentation Lending "The &%subclass of &%Giving &%Processes where
the &%agent-rel gives the &%destination something for a limited period of
time with the expectation that it will be returned later (perhaps with
interest)."))

;; sumo2loom is skipping this implication because both sides are nontrivial:
;; (<=>
;;    (and
;;       (instance ?BORROW Borrowing)
;;       (agent ?BORROW ?AGENT1)
;;       (origin ?BORROW ?AGENT2)
;;       (patient ?BORROW ?OBJECT))
;;    (and
;;       (instance ?LEND Lending)
;;       (agent ?LEND ?AGENT2)
;;       (destination ?LEND ?AGENT1)
;;       (patient ?LEND ?OBJECT)))

(tell (sumodocumentation Getting "The &%subclass of &%ChangeOfPossession where the
&%agent-rel gets something.  Note that the source from which something is
obtained is specified with the &%origin &%CaseRole."))

(tell (relatedInternalConcept UnilateralGetting UnilateralGiving))
(tell (sumodocumentation UnilateralGetting "Any instance of &%Getting that is not part
of a &%Transaction.  In other words, any instance of &%Getting where nothing
is given in return.  Some examples of &%UnilateralGetting are:  appropriating,
commandeering, stealing, etc."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?GET UnilateralGetting)
;;    (not
;;       (exists (?TRANS)
;;          (and
;;             (instance ?TRANS Transaction)
;;             (subProcess ?GET ?TRANS)))))

(tell (sumodocumentation Borrowing "The &%subclass of &%Getting &%Processes where
the &%agent-rel gets something for a limited period of time with the expectation
that it will be returned later (perhaps with interest)."))

(tell (sumodocumentation Transaction "The &%subclass of &%ChangeOfPossession where
something is exchanged for something else."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?TRANS Transaction)
;;    (exists (?AGENT1 ?AGENT2 ?GIVE1 ?GIVE2 ?OBJ1 ?OBJ2)
;;       (and
;;          (instance ?GIVE1 Giving)
;;          (instance ?GIVE2 Giving)
;; 	   (subProcess ?GIVE1 ?TRANS)
;;    	   (subProcess ?GIVE2 ?TRANS)
;;          (agent ?GIVE1 ?AGENT1)
;;          (agent ?GIVE2 ?AGENT2)
;;          (patient ?GIVE1 ?OBJ1)
;;          (patient ?GIVE2 ?OBJ2)
;;          (destination ?GIVE1 ?AGENT2)
;;          (destination ?GIVE2 ?AGENT1)
;;          (not
;;             (equal ?AGENT1 ?AGENT2))
;;          (not
;;             (equal ?OBJ1 ?OBJ2)))))

(tell (sumodocumentation FinancialTransaction "A &%Transaction where an instance
of &%CurrencyMeasure is exchanged for something else."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?TRANS FinancialTransaction)
;;    (exists (?OBJ)
;;       (and
;;          (patient ?TRANS ?OBJ)
;;          (instance ?OBJ Currency))))

(tell (sumodocumentation Betting "A &%FinancialTransaction where an instance of
&%CurrencyMeasure is exchanged for the possibility of winning a larger
instance of &%CurrencyMeasure within the context of some sort of
&%Game."))

(tell (relatedInternalConcept Buying Selling))
(tell (sumodocumentation Buying "A &%FinancialTransaction in which an instance of
&%CurrencyMeasure is exchanged for an instance of &%Physical."))

(tell (sumodocumentation Selling "A &%FinancialTransaction in which an instance of
&%Physical is exchanged for an instance of &%CurrencyMeasure."))

;; sumo2loom is skipping this implication because both sides are nontrivial:
;; (<=>
;;    (and
;;       (instance ?BUY Buying)
;;       (agent ?BUY ?AGENT1)
;;       (origin ?BUY ?AGENT2)
;;       (patient ?BUY ?OBJECT))
;;    (and
;;       (instance ?SELL Selling)
;;       (agent ?SELL ?AGENT2)
;;       (destination ?SELL ?AGENT1)
;;       (patient ?SELL ?OBJECT)))

(tell (sumodocumentation Learning "The &%Sumoclass of &%Processes which relate to the
acquisition of information."))


;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (holdsDuring ?TIME
;;       (exists (?LEARN)
;;          (and
;;             (instance ?LEARN Learning)
;;             (agent ?LEARN ?AGENT)
;;             (patient ?LEARN ?PROP))))
;;    (holdsDuring (ImmediateFutureFn ?TIME)
;;       (believes ?AGENT ?PROP)))

(tell (sumodocumentation Sumoclassifying "The &%Sumoclass of &%IntentionalPsychologicalProcesses
which involve attaching a name or category to a thing or set of things.
Note that &%Sumoclassifying is distinguished from &%Learning by the fact
that the latter covers the acquisition by a &%CognitiveAgent of any
&%Sumoproposition, while the former involves the assignment of a label
or category."))

(tell (sumodocumentation Reasoning "The &%Sumoclass of &%IntentionalPsychologicalProcesses
which involve concluding, on the basis of either deductive or inductive
evidence, that a particular &%Sumoproposition or &%Sentence is true."))


(tell (sumodocumentation Selecting "The &%Sumoclass of &%IntentionalPsychologicalProcesses
which involve opting for one or more &%Entity out of a larger set of &%Entities."))

(tell (sumodocumentation Comparing "The &%Sumoclass of &%IntentionalPsychologicalProcesses
which involve comparing, relating, contrasting, etc. the properties of
two or more &%Entities."))

(tell (sumodocumentation Calculating "&%IntentionalPsychologicalProcesses which involve
the consideration and/or manipulation of instances of &%Quantity."))

(tell (sumodocumentation Measuring "The &%Sumoclass of &%Calculating &%Processes where
the aim is to determine the &%PhysicalQuantity of some aspect of the &%patient."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?MEAS Measuring)
;;       (agent ?MEAS ?AGENT)
;;       (patient ?MEAS ?OBJ))
;;    (exists (?QUANT ?UNIT)
;;       (holdsDuring (ImmediateFutureFn (WhenFn ?MEAS))
;;          (knows ?AGENT (measure ?OBJ (MeasureFn ?QUANT ?UNIT))))))

(tell (sumodocumentation Counting "Enumerating something.  The &%Sumoclass of &%Calculating
&%Processes where the aim is to determine the &%Sumonumber corresponding to the
&%patient."))

;; sumo2loom is dropping the following statement because it uses
;; knows, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?COUNT Counting)
;;       (agent ?COUNT ?AGENT)
;;       (patient ?COUNT ?ENTITY))
;;    (exists (?NUMBER)
;;       (knows ?AGENT (equal (CardinalityFn ?ENTITY) ?NUMBER))))

(tell (sumodocumentation Predicting "The &%Sumoclass of &%IntentionalPsychologicalProcesses
which involve the formulation of a &%Sumoproposition about a state of affairs
which might be realized in the future."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?PREDICT Predicting)
;;       (patient ?PREDICT ?FORMULA))
;;    (exists (?TIME)
;;       (and
;;          (holdsDuring ?TIME ?FORMULA)
;;          (or
;;             (before ?TIME (WhenFn ?PREDICT))
;;             (earlier ?TIME (WhenFn ?PREDICT))))))

(tell (sumodocumentation Remembering "The &%Sumoclass of &%PsychologicalProcesses which
involve the recollection of prior experiences and/or of knowledge
which was previously acquired."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?REMEMBER Remembering)
;;       (patient ?REMEMBER ?FORMULA))
;;    (exists (?TIME)
;;       (and
;;          (holdsDuring ?TIME ?FORMULA)
;;          (or
;;             (before ?TIME (WhenFn ?REMEMBER))
;;             (earlier ?TIME (WhenFn ?REMEMBER))))))

(tell (sumodocumentation Keeping "The &%Sumoclass of &%Processes where the &%agent-rel
keeps something in a particular location for an extended period of time."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?KEEP Keeping)
;;       (agent ?KEEP ?AGENT)
;;       (patient ?KEEP ?OBJ))
;;    (exists (?PUT)
;;       (and
;;          (instance ?PUT Putting)
;;          (agent ?PUT ?AGENT)
;;          (patient ?PUT ?OBJ)
;;          (earlier (WhenFn ?PUT) (WhenFn ?KEEP)))))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (and
;;       (instance ?KEEP Keeping)
;;       (patient ?KEEP ?OBJ))
;;    (exists (?PLACE)
;;       (forall (?TIME)
;;          (=>
;;             (temporalPart ?TIME (WhenFn ?KEEP))
;;             (holdsDuring ?TIME (located ?OBJ ?PLACE))))))

(tell (sumodocumentation Confining "The &%Sumoclass of &%Keeping &%Processes where the
&%patient is &%Human and is kept against his/her will.  This covers
imprisonment, being jailed, held in custody, etc."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?CONFINE Confining)
;;    (exists (?HUMAN)
;;       (and
;;          (instance ?HUMAN Human)
;;          (patient ?CONFINE ?HUMAN))))

;; sumo2loom is dropping the following statement because it uses
;; desires, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?CONFINE Confining)
;;       (patient ?CONFINE ?PERSON))
;;    (not (desires ?PERSON (patient ?CONFINE ?PERSON))))

(tell (sumodocumentation Maintaining "The &%Sumoclass of &%Processes where the &%agent-rel
cares for or maintains the &%Object."))

(tell (relatedInternalConcept Repairing Maintaining))
(tell (sumodocumentation Repairing "The &%Sumoclass of &%Processes where the &%agent-rel
makes a modification or series of modifications to an &%Object that is not
functioning as intended so that it works properly."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?REPAIR Repairing)
;;       (patient ?REPAIR ?OBJ))
;;    (exists (?DAMAGE)
;;       (and
;;          (instance ?DAMAGE Damaging)
;;          (patient ?DAMAGE ?OBJ)
;;          (earlier (WhenFn ?DAMAGE) (WhenFn ?REPAIR)))))

(tell (sumodocumentation TherapeuticProcess "A &%Process that is carried out
for the purpose of curing, improving or reducing the pain associated
with a &%DiseaseOrSyndrome."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?PROC TherapeuticProcess)
;;       (patient ?PROC ?BIO))
;;    (or
;;       (instance ?BIO Organism)
;;       (exists (?ORG)
;;          (and
;;             (instance ?ORG Organism)
;;             (part ?BIO ?ORG)))))

(tell (sumodocumentation Surgery "Any &%TherapeuticProcess that involves making an
incision in the &%Animal that is the &%patient of the &%TherapeuticProcess."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?ACT Surgery)
;;       (patient ?ACT ?ANIMAL))
;;    (exists (?SUBACT)
;;       (and
;;          (instance ?SUBACT Cutting)
;;          (instance ?ANIMAL Animal)
;;          (patient ?ANIMAL ?CUTTING)
;;          (subProcess ?SUBACT ?ACT))))

(tell (sumodocumentation Damaging "The &%Sumoclass of &%Processes where the &%agent-rel
brings about a situation where the &%patient no longer functions normally
or as intended."))

(tell (sumodocumentation Destruction "The &%subclass of &%Damagings in which
the &%patient (or an essential element of the &%patient) is destroyed.
Note that the difference between this concept and its superclass is solely
one of extent."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (instance ?PROCESS Destruction)
;;    (exists (?PATIENT)
;;       (and
;;          (patient ?PROCESS ?PATIENT)
;;          (time ?PATIENT (ImmediatePastFn(WhenFn ?PROCESS)))
;;          (not
;;             (time ?PATIENT (ImmediateFutureFn (WhenFn ?PROCESS)))))))

(tell (sumodocumentation Killing "The &%subclass of &%Destruction in which the
death of an &%Organism is caused by an &%Organism.  Note that in cases
of suicide the &%Organism would be the same in both cases."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?KILL Killing)
;;       (agent ?KILL ?AGENT)
;;       (patient ?KILL ?PATIENT))
;;    (and
;;       (instance ?AGENT Organism)
;;       (instance ?PATIENT Organism)))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?KILL Killing)
;;       (patient ?KILL ?PATIENT))
;;    (and
;;       (holdsDuring (ImmediatePastFn (WhenFn ?KILL)) (attribute ?PATIENT Living))
;;       (holdsDuring (FutureFn (WhenFn ?KILL)) (attribute ?PATIENT Dead))))

(tell (sumodocumentation Poking "The &%Sumoclass of &%Processes where the &%agent-rel
pierces the surface of the &%Object with an &%instrument."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?POKE Poking)
;;       (agent ?POKE ?AGENT)
;;       (patient ?POKE ?OBJ)
;;       (instrument ?POKE ?INST))
;;    (holdsDuring (WhenFn ?POKE) (connects ?INST ?AGENT ?OBJ)))

(tell (sumodocumentation Cutting "The &%subclass of &%Poking &%Processes which
involve a sharp &%instrument."))

(tell (relatedInternalConcept Attaching Putting))
(tell (sumodocumentation Attaching "A &%Process where one &%Object becomes attached
to another &%Object.  Note that this differs from &%Putting in that two
things which are attached may already be in the same location."))

;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (=>
;;    (and
;;       (instance ?ATTACH Attaching)
;;       (patient ?ATTACH ?OBJ1)
;;       (patient ?ATTACH ?OBJ2))
;;    (and
;;       (holdsDuring (ImmediatePastFn (WhenFn ?ATTACH)) (not (connected ?OBJ1 ?OBJ2)))
;;       (holdsDuring (ImmediateFutureFn (WhenFn ?ATTACH)) (connected ?OBJ1 ?OBJ2))))

(tell (sumodocumentation Detaching "A &%Process where the &%agent-rel detaches one thing
from something else.  Note that this is different from &%Removing in that
neither of the two things which are detached may be removed from the location
where it was attached."))

;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (=>
;;    (and
;;       (instance ?DETACH Detaching)
;;       (patient ?DETACH ?OBJ1)
;;       (patient ?DETACH ?OBJ2))
;;    (and
;;       (holdsDuring (ImmediatePastFn (WhenFn ?DETACH)) (connected ?OBJ1 ?OBJ2))
;;       (holdsDuring (ImmediateFutureFn (WhenFn ?DETACH)) (not (connected ?OBJ1 ?OBJ2)))))

(tell (sumodocumentation Combining "A &%Process where two or more things are combined
into a single thing."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (<=>
;;    (and
;;       (instance ?COMBINE Combining)
;;       (resource ?COMBINE ?OBJ1)
;;       (result ?COMBINE ?OBJ2))
;;    (and
;;       (holdsDuring (ImmediatePastFn (WhenFn ?COMBINE)) (not (part ?OBJ1 ?OBJ2)))
;;       (holdsDuring (ImmediateFutureFn (WhenFn ?COMBINE)) (part ?OBJ1 ?OBJ2))))

(tell (sumodocumentation Separating "A &%Process where something is disassembled
into (some of) its parts."))

(tell (sumodocumentation ChemicalProcess "A &%ChemicalProcess occurs whenever
chemical compounds (&%CompoundSubstances) are formed or decomposed.
For example, reactants disappear as chemical change occurs, and products
appear as chemical change occurs.  In a chemical change a chemical
reaction takes place.  Catalysts in a &%ChemicalProcess may speed up the
reaction, but aren't themselves produced or consumed.  Examples: rusting of
iron and the decomposition of water, induced by an electric current, to
gaseous hydrogen and gaseous oxygen."))


(tell (sumodocumentation ChemicalSynthesis "The &%Sumoclass of &%ChemicalProcesses in
which a &%CompoundSubstance is formed from simpler reactants."))


;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (instance ?COMPOUND CompoundSubstance)
;;    (exists (?ELEMENT1 ?ELEMENT2 ?PROCESS)
;;       (and
;;          (instance ?ELEMENT1 ElementalSubstance)
;;          (instance ?ELEMENT2 ElementalSubstance)
;;          (not (equal ?ELEMENT1 ?ELEMENT2))
;;  	   (instance ?PROCESS ChemicalSynthesis)
;;          (resource ?PROCESS ?ELEMENT1)
;;          (resource ?PROCESS ?ELEMENT2)
;;          (result ?PROCESS ?COMPOUND))))

(tell (sumodocumentation ChemicalDecomposition "The &%Sumoclass of &%ChemicalProcesses
in which a &%CompoundSubstance breaks down into simpler products."))


(tell (sumodocumentation Combustion "The &%Sumoclass of &%ChemicalProcesses in which an &%Object
reacts with oxygen and gives off heat.  This includes all &%Processes in which
something is burning."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?COMBUSTION Combustion)
;;    (exists (?HEAT ?LIGHT)
;;       (and
;;          (instance ?HEAT Heating)
;;          (instance ?LIGHT RadiatingLight)
;;          (subProcess ?HEAT ?COMBUSTION)
;;          (subProcess ?LIGHT ?COMBUSTION))))

(tell (sumodocumentation InternalChange "&%Processes which involve altering an internal
sumoproperty of an &%Object, e.g. the shape of the &%Object, its coloring, its
structure, etc.  &%Processes that are not instances of this class include
changes that only affect the relationship to other objects, e.g. changes in
spatial or temporal location."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?CHANGE InternalChange)
;;       (patient ?CHANGE ?OBJ))
;;    (exists (?PROPERTY)
;;       (or
;;          (and
;;             (holdsDuring (ImmediatePastFn (WhenFn ?CHANGE)) (attribute ?OBJ ?PROPERTY))
;;             (holdsDuring (ImmediateFutureFn (WhenFn ?CHANGE)) (not (attribute ?OBJ ?PROPERTY))))
;;          (and
;;             (holdsDuring (ImmediatePastFn (WhenFn ?CHANGE)) (not (attribute ?OBJ ?PROPERTY)))
;;             (holdsDuring (ImmediateFutureFn (WhenFn ?CHANGE)) (attribute ?OBJ ?PROPERTY))))))

(tell (sumodocumentation SurfaceChange "&%Processes which involve altering
the properties that apply to the surface of an &%Object."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?ALT SurfaceChange)
;;       (patient ?ALT ?OBJ))
;;    (exists (?PART ?PROPERTY)
;;       (and
;;          (superficialPart ?PART ?OBJ)
;;          (holdsDuring (ImmediatePastFn (WhenFn ?ALT)) (attribute ?PART ?PROPERTY))
;;          (holdsDuring (ImmediateFutureFn (WhenFn ?ALT)) (not (attribute ?PART ?PROPERTY))))))

(tell (sumodocumentation ShapeChange "The &%Process of changing the shape of an &%Object."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?ALT ShapeChange)
;;       (patient ?ALT ?OBJ))
;;    (exists (?PROPERTY)
;;       (and
;;          (instance ?PROPERTY ShapeAttribute)
;;          (or
;;             (and
;;                (holdsDuring (ImmediatePastFn (WhenFn ?ALT)) (attribute ?OBJ ?PROPERTY))
;;                (holdsDuring (ImmediateFutureFn (WhenFn ?ALT)) (not (attribute ?OBJ ?PROPERTY))))
;;             (and
;;                (holdsDuring (ImmediatePastFn (WhenFn ?ALT)) (not (attribute ?OBJ ?PROPERTY)))
;;                (holdsDuring (ImmediateFutureFn (WhenFn ?ALT)) (attribute ?OBJ ?PROPERTY)))))))

(tell (sumodocumentation Coloring "The &%subclass of &%SurfaceChange where a
&%ColorAttribute of the &%patient is altered."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?COLORING Coloring)
;;       (patient ?COLORING ?OBJ))
;;    (exists (?PROPERTY)
;;       (and
;;          (instance ?PROPERTY ColorAttribute)
;;          (holdsDuring (ImmediatePastFn (WhenFn ?COLORING)) (attribute ?OBJ ?PROPERTY))
;;          (holdsDuring (ImmediateFutureFn (WhenFn ?COLORING)) (not (attribute ?OBJ ?PROPERTY))))))

(tell (sumodocumentation ContentDevelopment "A &%subclass of &%IntentionalProcess in
which content is modified, its form is altered or it is created anew."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?DEVELOP ContentDevelopment)
;;    (exists (?OBJ)
;;       (and
;;          (instance ?OBJ ContentBearingObject)
;;          (patient ?DEVELOP ?OBJ))))

(tell (sumodocumentation Reading "A &%subclass of &%ContentDevelopment in which
content is converted from a written form into a spoken or mental representation."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?READ Reading)
;;    (exists (?TEXT ?PROP)
;;       (and
;;          (instance ?TEXT Text)
;;          (containsInformation ?TEXT ?PROP)
;;          (realization ?READ ?PROP))))

(tell (sumodocumentation Writing "A &%subclass of &%ContentDevelopment in which
content is converted from one form (e.g. uttered, written or represented
mentally) into a written form.  Note that this class covers both
transcription and original creation of written &%Texts."))

(tell (sumodocumentation Encoding "Converting a document or message into a formal
language or into a code that can be understood only by a relatively small
body of &%Agents.  Generally speaking, this hinders wide dissemination of
the content in the original document or message."))

(tell (sumodocumentation Decoding "Converting a document or message that has previously
been encoded (see &%Encoding) into a &%Language that can be understood by a
relatively large number of speakers."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?DECODE Decoding)
;;       (patient ?DECODE ?DOC1))
;;    (exists (?ENCODE ?DOC2 ?TIME)
;;       (and
;;          (containsInformation ?DOC2 ?PROP)
;;          (containsInformation ?DOC1 ?PROP)
;;  	   (temporalPart ?TIME (PastFn (WhenFn ?DECODE)))
;;          (holdsDuring ?TIME
;;             (and
;;                (instance ?ENCODE Encoding)
;;                (patient ?ENCODE ?DOC2))))))

(tell (sumodocumentation Wetting "The &%Sumoclass of &%Processes where a &%Liquid is
added to an &%Object."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?WET Wetting)
;;       (patient ?WET ?OBJ))
;;    (holdsDuring (ImmediateFutureFn (WhenFn ?WET))
;;       (or
;;          (attribute ?OBJ Wet)
;;          (attribute ?OBJ Damp))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?WET Wetting)
;;    (exists (?OBJ)
;;       (and
;;          (attribute ?OBJ Liquid)
;;          (patient ?WET ?OBJ))))

(tell (sumodocumentation Drying "The &%Sumoclass of &%Processes where a &%Liquid is removed
from an &%Object."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?DRY Drying)
;;       (patient ?DRY ?OBJ))
;;    (holdsDuring (ImmediateFutureFn (WhenFn ?DRY))
;;       (attribute ?OBJ Dry)))

(tell (relatedInternalConcept Creation Destruction))
(tell (sumodocumentation Creation "The &%subclass of &%Process in which
something is created.  Note that the thing created is specified
with the &%result &%CaseRole."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?ACTION Creation)
;;    (exists (?RESULT)
;;       (result ?ACTION ?RESULT)))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (instance ?PROCESS Creation)
;;    (exists (?PATIENT)
;;       (and
;;          (patient ?PROCESS ?PATIENT)
;;          (time ?PATIENT (ImmediateFutureFn(WhenFn ?PROCESS)))
;;          (not
;;             (time ?PATIENT (ImmediatePastFn (WhenFn ?PROCESS)))))))

(tell (sumodocumentation Making "The &%subclass of &%Creation in which an individual
&%Artifact or a type of &%Artifact is made."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?MAKE Making)
;;    (exists (?ARTIFACT)
;;       (and
;;          (instance ?ARTIFACT Artifact)
;;          (result ?MAKE ?ARTIFACT))))

(tell (sumodocumentation Constructing "The &%subclass of &%Making in which a
&%StationaryArtifact is built."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (exists (?BUILD)
;;       (and
;;          (instance ?BUILD Constructing)
;;          (result ?BUILD ?ARTIFACT)))
;;    (instance ?ARTIFACT StationaryArtifact))

(tell (sumodocumentation Manufacture "The &%Making of &%Artifacts on a mass
scale."))

(tell (sumodocumentation Publication "The &%Manufacture of &%Texts.  Note that
there is no implication that the &%Texts are distributed.  Such
distribution, when it occurs, is an instance of &%Dissemination."))


(tell (sumodocumentation Cooking "The &%Making of an &%instance of &%Food."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?COOK Cooking)
;;    (exists (?FOOD)
;;       (and
;;          (instance ?FOOD Food)
;;          (result ?COOK ?FOOD))))

(tell (sumodocumentation Searching "Any &%Process where the aim is to find
something, whether it be information (i.e. a &%Sumoproposition) or an
&%Object."))


(tell (sumodocumentation Pursuing "The &%subclass of &%Searching where the thing
sought is an &%Object.  Some examples would be hunting, shopping,
trawling, and stalking."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?PURSUE Pursuing)
;;       (agent ?PURSUE ?AGENT)
;;       (patient ?PURSUE ?OBJ))
;;    (holdsDuring ?PURSUE (wants ?AGENT ?OBJ)))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?PURSUE Pursuing)
;;       (agent ?PURSUE ?AGENT)
;;       (patient ?PURSUE ?OBJ))
;;    (holdsDuring ?PURSUE (not (possesses ?AGENT ?OBJ))))

(tell (sumodocumentation Investigating "The &%subclass of &%Searching where the
thing sought is a piece of information (i.e. a &%Sumoproposition denoted by
a &%Formula)."))


;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?INVESTIGATE Investigating)
;;       (agent ?INVESTIGATE ?AGENT)
;;       (patient ?INVESTIGATE ?PROP))
;;    (holdsDuring (WhenFn ?INVESTIGATE) (not (knows ?AGENT ?PROP))))

(tell (sumodocumentation DiagnosticProcess "A &%Process that is carried out for
the purpose of determining the nature of a &%DiseaseOrSyndrome."))

;; sumo2loom is dropping the following statement because it uses
;; hasPurposeForAgent, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?PROC DiagnosticProcess)
;;       (agent ?PROC ?AGENT))
;;    (exists (?CAUSE)
;;       (hasPurposeForAgent ?PROC (knows ?AGENT (causes ?CAUSE ?PROC)) ?AGENT)))

(tell (sumodocumentation SocialInteraction "The &%subclass of
&%IntentionalProcess that involves interactions between
&%CognitiveAgents."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?INTERACTION SocialInteraction)
;;    (exists (?AGENT1 ?AGENT2)
;;       (and
;;          (agent ?INTERACTION ?AGENT1)
;;          (agent ?INTERACTION ?AGENT2)
;;          (not
;;             (equal ?AGENT1 ?AGENT2)))))

(tell (sumodocumentation Pretending "Any &%SocialInteraction where a
&%CognitiveAgent or &%Group of &%CognitiveAgents attempts to make
another &%CognitiveAgent or &%Group of &%CognitiveAgents believe
something that is false.  This covers deceit, affectation,
impersonation, and entertainment productions, to give just a few
examples."))

;; sumo2loom is dropping the following statement because it uses
;; hasPurpose, which has Formula in its domain:
;; (=>
;;    (instance ?PRETEND Pretending)
;;    (exists (?PERSON ?PROP)
;;       (and
;;          (hasPurpose ?PRETEND (believes ?PERSON ?PROP))
;;          (true ?PROP True))))

(tell (relatedInternalConcept Communication ContentDevelopment))
(tell (sumodocumentation Communication "A &%SocialInteraction that involves
the transfer of information between two or more &%CognitiveAgents
via a &%ContentBearingObject.  Note that &%Communication is closely
related to, but essentially different from, &%ContentDevelopment.
The latter involves the creation or modification of a &%ContentBearingObject,
while &%Communication is the transfer of such an object for the purpose
of conveying a message."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?COMMUNICATE Communication)
;;    (exists (?OBJ ?AGENT1 ?AGENT2)
;;       (and
;;          (instance ?OBJ ContentBearingObject)
;;          (patient ?COMMUNICATE ?OBJ)
;;          (instance ?AGENT1 CognitiveAgent)
;;          (agent ?COMMUNICATE ?AGENT1)
;;          (instance ?AGENT2 CognitiveAgent)
;;          (destination ?COMMUNICATE ?AGENT2))))

(tell (sumodocumentation Disseminating "Any &%Communication that involves a
single &%agent-rel and many &%destinations.  This covers the release
of a published book, broadcasting, a theatrical performance, giving
orders to assembled troops, delivering a public lecture, etc."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?DISSEMINATE Disseminating)
;;    (exists (?AGENT1 ?AGENT2)
;;       (and
;;          (destination ?DISSEMINATE ?AGENT1)
;;          (instance ?AGENT1 CognitiveAgent)
;;          (destination ?DISSEMINATE ?AGENT2)
;;          (instance ?AGENT2 CognitiveAgent)
;;          (not (equal ?AGENT1 ?AGENT2)))))

(tell (sumodocumentation Advertising "A &%Disseminating whose purpose is to
promote the sale of an &%Object represented in a &%Text or &%Icon
(the advertisement)."))

;; sumo2loom is dropping the following statement because it uses
;; hasPurpose, which has Formula in its domain:
;; (=>
;;    (instance ?ADVERT Advertising)
;;    (exists (?OBJ)
;;       (and
;;          (refers ?ADVERT ?OBJ)
;;          (hasPurpose ?ADVERT (exists (?SALE) (and (instance ?SALE Selling) (patient ?SALE ?OBJ)))))))

(tell (sumodocumentation Stating "Instances of this &%Sumoclass commit a sender to some truth.
Example: John concluded that Peter was not present, and predicted that he would
arrive soon."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?STATE Stating)
;;       (agent ?STATE ?AGENT)
;;       (patient ?STATE ?FORMULA)
;;       (instance ?FORMULA Formula))
;;    (holdsDuring (WhenFn ?STATE) (believes ?AGENT ?FORMULA)))

(tell (sumodocumentation Directing "Instances of this &%Sumoclass urge some further action
among the receivers.  Example: The 5th Battalion requested air support from
the 3rd Bomber Group."))

(tell (sumodocumentation Ordering "A &%Directing in which the receiver is
commanded to realize the content of a &%ContentBearingObject.  Orders
are injunctions, the disobedience of which involves sanctions, or
which express an obligation upon the part of the orderee."))

;; sumo2loom is dropping the following statement because it uses
;; modalAttribute, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?ORDER Ordering)
;;       (patient ?ORDER ?FORMULA))
;;    (modalAttribute ?FORMULA Obligation))

(tell (sumodocumentation Requesting "A request expresses a desire by the &%agent-rel of the
request that the &%destination of the request perform some future action."))

;; sumo2loom is dropping the following statement because it uses
;; desires, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?REQUEST Requesting)
;;       (agent ?REQUEST ?AGENT)
;;       (patient ?REQUEST ?FORMULA)
;;       (instance ?FORMULA Formula))
;;    (desires ?AGENT ?FORMULA))

(tell (sumodocumentation Questioning "A request for information."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?QUESTION Questioning)
;;       (agent ?QUESTION ?AGENT)
;;       (patient ?QUESTION ?FORMULA)
;;       (instance ?FORMULA Formula))
;;    (holdsDuring (WhenFn ?QUESTION) (not (knows ?AGENT ?FORMULA))))

(tell (sumodocumentation Committing "Instances of this &%Sumoclass commit the sender to some
future course. Example: Bob promised Susan that he would be home by 11pm."))

;; sumo2loom is dropping the following statement because it uses
;; modalAttribute, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?COMMIT Committing)
;;       (patient ?COMMIT ?FORMULA)
;;       (instance ?FORMULA Formula))
;;    (modalAttribute ?FORMULA Promise))

(tell (sumodocumentation Expressing "Instances of this &%Sumoclass express a state of the sender.
Example: Jane thanked Barbara for the present she had given her."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?EXPRESS Expressing)
;;       (agent ?EXPRESS ?AGENT))
;;    (exists (?STATE)
;;       (and
;;          (instance ?STATE StateOfMind)
;;          (attribute ?AGENT ?STATE)
;;          (represents ?EXPRESS ?STATE))))

(tell (sumodocumentation Declaring "The &%Sumoclass of &%Communications that effect an
institutional alteration when performed by competent authority.  Some
examples are nominating, marrying, and excommunicating."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?DECLARE Declaring)
;;       (agent ?DECLARE ?AGENT1))
;;    (exists (?PROC ?AGENT2)
;;       (or
;;          (confersRight ?PROC ?DECLARE ?AGENT2)
;;          (confersObligation ?PROC ?DECLARE ?AGENT2))))

(tell (sumodocumentation Cooperation "The &%subclass of &%SocialInteraction where
the participants involved work together for the achievement of a common
goal."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?COOPERATE Cooperation)
;;    (exists (?PURP)
;;       (forall (?AGENT)
;;          (=>
;;             (agent ?COOPERATE ?AGENT)
;;             (hasPurposeForAgent ?COOPERATE ?PURP ?AGENT)))))

(tell (sumodocumentation Meeting "The coming together of two or more
&%CognitiveAgents for the purpose of &%Communication.  This covers informal
meetings, e.g. visits with family members, and formal meetings, e.g. a board
of directors meeting."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?MEET Meeting)
;;       (agent ?MEET ?AGENT1)
;;       (agent ?MEET ?AGENT2))
;;    (holdsDuring (WhenFn ?MEET) (orientation ?AGENT1 ?AGENT2 Near)))

;; sumo2loom is dropping the following statement because it uses
;; hasPurpose, which has Formula in its domain:
;; (=>
;;    (instance ?MEET Meeting)
;;    (exists (?AGENT1 ?AGENT2)
;;       (and
;;          (agent ?MEET ?AGENT1)
;;          (agent ?MEET ?AGENT2)
;;          (hasPurpose ?MEET (exists (?COMM) (and (instance ?COMM Communication) (agent ?COMM ?AGENT1) (agent ?COMM ?AGENT2)))))))

(tell (sumodocumentation Contest "A &%SocialInteraction where the &%agent-rel and
&%patient are &%CognitiveAgents who are trying to defeat one another.
Note that this concept is often applied in a metaphorical sense in natural
language, when we speak, e.g., of the struggle of plants for space or
sunlight, or of bacteria for food resources in some environment."))

;; sumo2loom is dropping the following statement because it uses
;; hasPurposeForAgent, which has Formula in its domain:
;; (=>
;;    (instance ?CONTEST Contest)
;;    (exists (?AGENT1 ?AGENT2 ?PURP1 ?PURP2)
;;       (and
;;          (agent ?CONTEST ?AGENT1)
;;          (agent ?CONTEST ?AGENT2)
;;          (hasPurposeForAgent ?CONTEST ?PURP1 ?AGENT1)
;;          (hasPurposeForAgent ?CONTEST ?PURP2 ?AGENT2)
;;          (not
;;             (equal ?AGENT1 ?AGENT2))
;;          (not
;;             (equal ?PURP1 ?PURP2)))))

(tell (sumodocumentation ViolentContest "A &%Contest where one participant attempts to
physically injure another participant."))

(tell (sumodocumentation War "A military confrontation between two or more
&%Nations or &%Organizations whose members are &%Nations.  As the
corresponding axiom specifies, a &%War is made up of &%Battles."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?WAR War)
;;    (exists (?BATTLE)
;;       (and
;;          (instance ?BATTLE Battle)
;;          (subProcess ?BATTLE ?WAR))))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (and
;;       (instance ?WAR War)
;;       (agent ?WAR ?AGENT))
;;    (or
;;       (instance ?AGENT Nation)
;;       (and
;;          (instance ?AGENT Organization)
;;          (forall (?MEMBER)
;;             (=>
;;                (member ?MEMBER ?AGENT)
;;                (instance ?MEMBER Nation))))))

(tell (sumodocumentation Battle "A &%ViolentContest between two or more military
units within the context of a war.  Note that this does not cover the
metaphorical sense of 'battle', which simply means a struggle of some
sort.  This sense should be represented with the more general concept of
&%Contest."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?BATTLE Battle)
;;    (exists (?WAR)
;;       (and
;;          (instance ?WAR War)
;;          (subProcess ?BATTLE ?WAR))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?BATTLE Battle)
;;    (exists (?ATTACK)
;;       (and
;;          (instance ?ATTACK ViolentContest)
;;          (subProcess ?ATTACK ?BATTLE))))

(tell (sumodocumentation Game "A &%Contest whose purpose is the
enjoyment/stimulation of the participants or spectators of the &%Game."))

(tell (sumodocumentation Sport "A &%Game which requires some degree of physical
exercion from the participants of the game."))

(tell (sumodocumentation LegalAction "Any &%Process where a &%CognitiveAgent seeks
to obtain something from another &%CognitiveAgent through a court of law."))

(tell (sumodocumentation Maneuver "An intentional move or play within a &%Contest.
In many cases, a &%Maneuver is part of a strategy for winning the
larger &%Contest of which the &%Maneuver is a part."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?MOVE Maneuver)
;;    (exists (?CONTEST)
;;       (and
;;          (instance ?CONTEST Contest)
;;          (subProcess ?MOVE ?CONTEST))))

(tell (sumodocumentation Perception "Sensing some aspect of the material world.
Note that the &%agent-rel of this sensing is assumed to be an &%Animal."))




(tell (sumodocumentation Seeing "The &%subclass of &%Perception in which the
sensing is done by an ocular &%Organ."))

;; sumo2loom is dropping the following statement because it uses
;; knows, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?SEE Seeing)
;;       (agent ?SEE ?AGENT)
;;       (patient ?SEE ?OBJ))
;;    (and
;;       (attribute ?OBJ Illuminated)
;;       (exists (?PROP)
;;          (and
;;             (instance ?PROP ColorAttribute)
;;             (knows ?AGENT (attribute ?OBJ ?PROP))))))

(tell (sumodocumentation Smelling "The &%subclass of &%Perception in which the
sensing is done by an olefactory &%Organ."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?SMELL Smelling)
;;       (patient ?SMELL ?OBJ))
;;    (exists (?ATTR)
;;       (and
;;          (instance ?ATTR OlfactoryAttribute)
;;          (attribute ?OBJ ?ATTR))))

(tell (sumodocumentation Tasting "The &%subclass of &%Perception in which the
sensing is done by of an &%Organ which can discriminate various tastes."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?TASTE Tasting)
;;       (patient ?TASTE ?OBJ))
;;    (exists (?ATTR)
;;       (and
;;          (instance ?ATTR TasteAttribute)
;;          (attribute ?OBJ ?ATTR))))

(tell (sumodocumentation Hearing "The &%subclass of &%Perception in which the
sensing is done by an auditory &%Organ."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?HEAR Hearing)
;;       (patient ?HEAR ?OBJ))
;;    (exists (?ATTR)
;;       (and
;;          (instance ?ATTR SoundAttribute)
;;          (attribute ?OBJ ?ATTR))))

(tell (sumodocumentation TactilePerception "The &%subclass of &%Perception in which
the sensing is done by &%Touching.  Note that &%Touching need not involve
&%TactilePerception.  For example, a person who has lost all sensation in
both of his legs would have no &%TactilePerception of anything his legs
were &%Touching."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?TACTILE TactilePerception)
;;    (exists (?TOUCH)
;;       (and
;;          (instance ?TOUCH Touching)
;;          (subProcess ?TOUCH ?TACTILE))))

(tell (sumodocumentation Radiating "Processes in which some form of radiation,
e.g. radio waves, light waves, electrical energy, etc., is given off
or absorbed by something else."))

(tell (sumodocumentation RadiatingLight "The &%subclass of &%Radiating in which
light is given off or absorbed.  Some examples include blinking, flashing,
and glittering."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (exists (?EMIT)
;;       (and
;;          (instance ?EMIT RadiatingLight)
;;          (patient ?EMIT ?REGION)
;;          (instance ?REGION Region)))
;;    (attribute ?REGION Illuminated))

(tell (sumodocumentation RadiatingSound "The &%subclass of &%Radiating in which
sound waves are given off or absorbed.  Some examples include creaking,
roaring, and whistling."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?EMIT RadiatingSound)
;;       (agent ?EMIT ?SOUND))
;;    (exists (?ATTR)
;;       (and
;;          (instance ?ATTR SoundAttribute)
;;          (attribute ?SOUND ?ATTR))))

(tell (sumodocumentation Music "The &%subclass of &%RadiatingSound where the
sound is intended to be melodic and is produced deliberately."))

(tell (sumodocumentation StateChange "Any &%Process where the &%PhysicalState
of &%part of the &%patient of the &%Process changes."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?PROCESS StateChange)
;;       (patient ?PROCESS ?OBJ))
;;    (exists (?PART ?STATE1 ?STATE2)
;;       (and
;;          (part ?PART ?OBJ)
;;          (instance ?STATE1 PhysicalState)
;;          (instance ?STATE2 PhysicalState)
;;          (not (equal ?STATE1 ?STATE2))
;;          (holdsDuring (ImmediatePastFn (WhenFn ?PROCESS)) (attribute ?PART ?STATE1))
;;          (holdsDuring (ImmediateFutureFn (WhenFn ?FREEZE)) (attribute ?PART ?STATE2)))))

(tell (sumodocumentation Melting "The &%Sumoclass of &%Processes where an &%Object is
heated and converted from a &%Solid to a &%Liquid."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?MELT Melting)
;;    (exists (?HEAT)
;;       (and
;;          (instance ?HEAT Heating)
;;          (subProcess ?HEAT ?MELT))))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?MELT Melting)
;;       (patient ?MELT ?OBJ))
;;    (exists (?PART)
;;       (and
;;          (part ?PART ?OBJ)
;;          (holdsDuring (ImmediatePastFn (WhenFn ?MELT)) (attribute ?PART Solid))
;;          (holdsDuring (ImmediateFutureFn (WhenFn ?MELT)) (attribute ?PART Liquid)))))

(tell (sumodocumentation Boiling "The &%Sumoclass of &%Processes where an &%Object is
heated and converted from a &%Liquid to a &%Gas."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?BOIL Boiling)
;;    (exists (?HEAT)
;;       (and
;;          (instance ?HEAT Heating)
;;          (subProcess ?HEAT ?BOIL))))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?BOIL Boiling)
;;       (patient ?BOIL ?OBJ))
;;    (exists (?PART)
;;       (and
;;          (part ?PART ?OBJ)
;;          (holdsDuring (ImmediatePastFn (WhenFn ?BOIL)) (attribute ?PART Liquid))
;;          (holdsDuring (ImmediateFutureFn (WhenFn ?BOIL)) (attribute ?PART Gas)))))

(tell (sumodocumentation Condensing "The &%Sumoclass of &%Processes where an &%Object is
cooled and converted from a &%Gas to a &%Liquid."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?COND Condensing)
;;    (exists (?COOL)
;;       (and
;;          (instance ?COOL Cooling)
;;          (subProcess ?COOL ?COND))))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?COND Condensing)
;;       (patient ?COND ?OBJ))
;;    (exists (?PART)
;;       (and
;;          (part ?PART ?OBJ)
;;          (holdsDuring (ImmediatePastFn (WhenFn ?COND)) (attribute ?PART Gas))
;;          (holdsDuring (ImmediateFutureFn (WhenFn ?COND)) (attribute ?PART Liquid)))))

(tell (sumodocumentation Freezing "The &%Sumoclass of &%Processes where an &%Object is
cooled and converted from a &%Liquid to a &%Solid."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?FREEZE Freezing)
;;    (exists (?COOL)
;;       (and
;;          (instance ?COOL Cooling)
;;          (subProcess ?COOL ?FREEZE))))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?FREEZE Freezing)
;;       (patient ?FREEZE ?OBJ))
;;    (exists (?PART)
;;       (and
;;          (part ?PART ?OBJ)
;;          (holdsDuring (ImmediatePastFn (WhenFn ?FREEZE)) (attribute ?PART Liquid))
;;          (holdsDuring (ImmediateFutureFn (WhenFn ?FREEZE)) (attribute ?PART Solid)))))



;; END FILE

;; BEGIN FILE


;;;;;;;;;;;;;;;;;;;
;;    OBJECTS    ;;
;;;;;;;;;;;;;;;;;;;

;; INCLUDES 'MEREOTOPOLOGY'
;; INCLUDES 'PROCESSES'
;; INCLUDES 'QUALITIES'

(tell (sumodocumentation AstronomicalBody "The &%Sumoclass of all astronomical
objects of significant size.  It includes &%SelfConnectedObjects
like planets, stars, and asteroids, as well as &%Sumocollections like
nebulae, galaxies, and constellations.  Note that the planet Earth
is an &%AstronomicalBody, but every &%Region of Earth is a
&%GeographicArea."))

(tell (sumodocumentation GeographicArea "A geographic location, generally having
definite boundaries.  Note that this differs from its immediate superclass
&%Region in that a &%GeographicArea is a three-dimensional &%Region of the
earth.  Accordingly, all astronomical objects other than earth and all
one-dimensional and two-dimensional &%Regions are not classed under
&%GeographicArea."))

(tell (sumodocumentation GeopoliticalArea "Any &%GeographicArea which is associated
with some sort of political structure.  This class includes &%Lands,
&%Cities, districts of cities, counties, etc.  Note that the identity
of a &%GeopoliticalArea may remain constant after a change in borders."))

(tell (sumodocumentation WaterArea "A body which is made up predominantly of water,
e.g. rivers, lakes, oceans, etc."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?AREA WaterArea)
;;    (exists (?BED ?HOLE ?WATER)
;;       (and
;;          (equal (PrincipalHostFn ?HOLE) ?BED)
;;          (instance ?WATER Water)
;;          (properlyFills ?WATER ?HOLE)
;;          (equal (MereologicalSumFn ?BED ?WATER) ?AREA))))

(tell (sumodocumentation SaltWaterArea "A &%WaterArea whose &%Water is saline, e.g.
oceans and seas."))

(tell (sumodocumentation FreshWaterArea "A &%WaterArea whose &%Water is not saline,
e.g. most rivers and lakes."))

(tell (sumodocumentation StreamWaterArea "A relatively narrow &%WaterArea where the
water flows constantly and in the same direction, e.g. a river, a stream,
etc."))

(tell (sumodocumentation StaticWaterArea "A &%WaterArea in which water does not flow
constantly or in the same direction, e.g. most lakes and ponds."))

(tell (sumodocumentation LandArea "An area which is predominantly solid ground,
e.g. a &%Nation, a mountain, a desert, etc.  Note that a &%LandArea may
contain some relatively small &%WaterAreas.  For example, Australia is
a &%LandArea even though it contains various rivers and lakes."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?LAND1 LandArea)
;;    (exists (?LAND2)
;;       (and
;;          (part ?LAND1 ?LAND2)
;;          (or
;;             (instance ?LAND2 Continent)
;;             (instance ?LAND2 Island)))))

(tell (sumodocumentation Continent "One of the seven largest &%LandAreas on earth."))

;; sumo2loom is dropping the following statement because it
;; wants to be an implication:
;; (equal (CardinalityFn Continent) 7)

(tell (sumodocumentation Island "A &%LandArea that is completely surrounded by a &%WaterArea."))

;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (=>
;;    (instance ?ISLAND Island)
;;    (not
;;       (exists (?AREA ?PART1 ?PART2)
;;          (and
;;             (instance ?AREA LandArea)
;;             (part ?PART1 ?ISLAND)
;;             (part ?PART2 ?AREA)
;;             (not
;;                (part ?ISLAND ?AREA))
;;             (not
;;                (part ?AREA ?ISLAND))
;;             (connected ?PART1 ?PART2)))))

(tell (sumodocumentation Nation "The broadest &%GeopoliticalArea, i.e. &%Nations are
&%GeopoliticalAreas that are not part of any other overarching and
comprehensive governance structure (excepting commonwealths and other sorts
of loose international organizations)."))

(tell (sumodocumentation StateOrProvince "Administrative subdivisions of a
&%Nation that are broader than any other political subdivisions that
may exist.  This &%Sumoclass includes the states of the United States, as
well as the provinces of Canada and European countries."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?STATE StateOrProvince)
;;    (exists (?LAND)
;;       (and
;;          (instance ?LAND Nation)
;;          (properPart ?STATE ?LAND))))

(tell (sumodocumentation Address "A &%LandArea of relatively small size.  This
concept represents the state of 'being at an address'."))

(tell (sumodocumentation City "A &%LandArea of relatively small size, inhabited
by a community of people, and having some sort of political structure.
Note that this class includes both large cities and small settlements
like towns, villages, hamlets, etc."))

(tell (sumodocumentation Water "The &%Sumoclass of samples of the compound H20.  Note
that this &%Sumoclass covers both pure and impure &%Water."))

(tell (sumodocumentation Mineral " Any of various naturally occurring homogeneous substances (such as stone, coal, salt, sulfur, sand, petroleum), or synthetic substances having the chemical composition and crystalline form and properties of a naturally occurring mineral."))

(tell (BinaryPredicate developmentalForm))
(tell (AsymmetricSumorelation developmentalForm))
(tell (TransitiveSumorelation developmentalForm))
(tell (sumodocumentation developmentalForm "(&%developmentalForm ?OBJECT ?FORM)
means that ?FORM is an earlier stage in the individual maturation of
?OBJECT.  For example, tadpole and caterpillar are &%developmentalForms
of frogs and butterflies, respectively."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (holdsDuring ?TIME1 (developmentalForm ?OBJ ?ATTR1))
;;       (successorAttributeClosure ?ATTR2 ?ATTR1))
;;    (exists (?TIME2)
;;       (and
;;          (earlier ?TIME2 ?TIME1)
;;          (holdsDuring ?TIME2 (developmentalForm ?OBJ ?ATTR2)))))

(tell (sumodocumentation OrganicObject "This class encompasses &%Organisms,
&%CorpuscularObjects that are parts of &%Organisms, i.e. &%BodyParts,
and &%CorpuscularObjects that are nonintentionally produced by
&%Organisms, e.g. &%ReproductiveBodies."))

(tell (sumodocumentation Organism "Generally, a living individual, including all
&%Plants and &%Animals."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?ORGANISM Organism)
;;    (exists (?BIRTH)
;;       (and
;;          (instance ?BIRTH Birth)
;;          (experiencer ?BIRTH ?ORGANISM))))

(tell (BinaryPredicate inhabits))
(tell (AsymmetricSumorelation inhabits))
(tell (sumodocumentation inhabits "A very basic notion of living within something
else.  (&%inhabits ?ORGANISM ?OBJECT) means that ?OBJECT is the residence,
nest, home, etc. of ?ORGANISM."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (inhabits ?ORGANISM ?OBJ)
;;    (exists (?TIME)
;;       (holdsDuring ?TIME (located ?ORGANISM ?OBJ))))

(tell (BinaryPredicate parent))
(tell (AsymmetricSumorelation parent))
(tell (IntransitiveSumorelation parent))
(tell (sumodocumentation parent "The general relationship of parenthood.
(&%parent ?CHILD ?PARENT) means that ?PARENT is a biological parent
of ?CHILD."))



;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (parent ?CHILD ?PARENT)
;;    (or
;;       (mother ?CHILD ?PARENT)
;;       (father ?CHILD ?PARENT)))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?ORGANISM Organism)
;;    (exists (?PARENT)
;;       (parent ?ORGANISM ?PARENT)))

(tell (SingleValuedSumorelation mother))
(tell (sumodocumentation mother "The general relationship of motherhood.
(&%mother ?CHILD ?MOTHER) means that ?MOTHER is the biological mother
of ?CHILD."))


(tell (SingleValuedSumorelation father))
(tell (sumodocumentation father "The general relationship of fatherhood.
(&%father ?CHILD ?FATHER) means that ?FATHER is the biological father
of ?CHILD."))


(tell (BinaryPredicate sibling))
(tell (SymmetricSumorelation sibling))
(tell (IrreflexiveSumorelation sibling))
(tell (sumodocumentation sibling "The relationship between two &%Organisms that
have the same &%mother and &%father.  Note that this relationship does
not hold between half-brothers, half-sisters, etc."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (sibling ?ANIMAL1 ?ANIMAL2)
;;    (exists (?FATHER ?MOTHER)
;;       (and
;;          (father ?ANIMAL1 ?FATHER)
;;          (father ?ANIMAL2 ?FATHER)
;;          (mother ?ANIMAL1 ?MOTHER)
;;          (mother ?ANIMAL2 ?MOTHER))))

;; The following formulas incorporate the content in the Natural-Kinds
;; ontology developed by ITBM-CNR.  This content is essentially a set of
;; high-level biological categories.

(tell (sumodocumentation Plant "An &%Organism having cellulose cell walls, growing
by synthesis of &%Substances, generally distinguished by the presence of
chlorophyll, and lacking the power of locomotion."))

(tell (sumodocumentation FloweringPlant "A &%Plant that produces seeds and flowers.
This class includes trees, shrubs, herbs, and flowers."))

(tell (sumodocumentation NonFloweringPlant "A &%Plant that reproduces with spores and
does not produce flowers."))

(tell (sumodocumentation Alga "A chiefly aquatic plant that contains chlorophyll,
but does not form embryos during development and lacks vascular tissue."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?ALGA Alga)
;; 	(exists (?WATER)
;; 		(and
;; 			(inhabits ?ALGA ?WATER)
;; 			(instance ?WATER Water))))

(tell (sumodocumentation Fungus "A eukaryotic &%Organism characterized by the
absence of chlorophyll and the presence of rigid cell walls. Included
here are both slime molds and true fungi such as yeasts, molds, mildews,
and mushrooms."))


(tell (sumodocumentation Moss "A &%NonFloweringPlant without true roots and little
if any vascular tissue."))

(tell (sumodocumentation Fern "A &%NonFloweringPlant that contains vascular tissue.
This class includes true ferns, as well as horsetails, club mosses, and
whisk ferns."))

(tell (sumodocumentation Animal "An &%Organism with eukaryotic &%Cells, and lacking
stiff cell walls, plastids, and photosynthetic pigments."))

(tell (sumodocumentation Microorganism "An &%Organism that can be seen only with
the aid of a microscope."))

(tell (sumodocumentation Bacterium "A small, typically one-celled, prokaryotic
&%Microorganism."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?BACTERIUM Bacterium)
;;    (exists (?CELL1)
;;       (and
;;          (component ?CELL1 ?BACTERIUM)
;;          (instance ?CELL1 Cell)
;;          (forall (?CELL2)
;;             (=>
;;                (and
;;                   (component ?CELL2 ?BACTERIUM)
;;                   (instance ?CELL2 Cell))
;;                (equal ?CELL1 ?CELL2))))))


(tell (sumodocumentation Virus "An &%Organism consisting of a core of a single
nucleic acid enclosed in a protective coat of protein. A virus may replicate
only inside a host living cell. A virus exhibits some but not all of the
usual characteristics of living things."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?VIRUS Virus)
;;    (exists (?MOL1)
;;       (and
;;          (component ?MOL1 ?VIRUS)
;;          (instance ?MOL1 Molecule)
;;          (forall (?MOL2)
;;             (=>
;;                (and
;;                   (component ?MOL2 ?VIRUS)
;;                   (instance ?MOL2 Molecule))
;;                (equal ?MOL1 ?MOL2))))))


;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?VIRUS Virus)
;; 		(instance ?PROC Replication)
;; 		(agent ?PROC ?VIRUS))
;; 	(exists (?CELL)
;; 		(and
;; 			(located ?PROC ?CELL)
;; 			(instance ?CELL Cell))))

(tell (sumodocumentation Vertebrate "An &%Animal which has a spinal column."))

(tell (sumodocumentation Invertebrate "An &%Animal which has no spinal column."))

(tell (sumodocumentation Worm "Long, narrow, soft-bodied &%Invertebrates."))

(tell (sumodocumentation Mollusk "Soft-bodied &%Invertebrate that is usually
contained in a shell.  Includes oysters, clams, mussels, snails, slugs,
octopi, and squid."))

(tell (sumodocumentation Arthropod "A &%Sumoclass of &%Invertebrate that includes
&%Arachnids and &%Insects."))

(tell (sumodocumentation Arachnid "A &%Sumoclass of &%Arthropods that includes
ticks and spiders."))

(tell (sumodocumentation Myriapod "A &%Sumoclass of &%Arthropods that includes
centipedes and millipedes."))

(tell (sumodocumentation Insect "A &%Sumoclass of small &%Arthropods that are
air-breathing and that are distinguished by appearance."))

(tell (sumodocumentation Crustacean "A &%Sumoclass of &%Arthropods that mainly dwells
in water and has a segmented body and a chitinous exoskeleton.  Includes
lobsters, crabs, shrimp, and barnacles."))

(tell (sumodocumentation ColdBloodedVertebrate "&%Vertebrates whose body temperature
is not internally regulated."))

(tell (sumodocumentation WarmBloodedVertebrate "&%Vertebrates whose body temperature
is internally regulated."))

(tell (sumodocumentation Amphibian "A cold-blooded, smooth-skinned &%Vertebrate
which characteristically hatches as an aquatic larva, breathing by
gills.  When mature, the &%Amphibian breathes with &%Lungs."))

(tell (sumodocumentation Bird "A &%Vertebrate having a constant body temperature
and characterized by the presence of feathers."))

(tell (sumodocumentation Fish "A cold-blooded aquatic &%Vertebrate characterized by
fins and breathing by gills. Included here are &%Fish having either a bony
skeleton, such as a perch, or a cartilaginous skeleton, such as a shark.
Also included are those &%Fish lacking a jaw, such as a lamprey or
hagfish."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?FISH Fish)
;; 	(exists (?WATER)
;; 		(and
;; 			(inhabits ?FISH ?WATER)
;; 			(instance ?WATER Water))))

(tell (sumodocumentation Mammal "A &%Vertebrate having a constant body temperature
and characterized by the presence of hair, mammary glands, and sweat
glands."))

(tell (sumodocumentation AquaticMammal "The &%Sumoclass of &%Mammals that dwell chiefly
in the water.  Includes whales, dolphins, manatees, seals, and walruses."))

(tell (sumodocumentation HoofedMammal "The &%Sumoclass of &%Mammals with hooves.
Includes horses, cows, sheep, pigs, antelope, etc."))

(tell (sumodocumentation Marsupial "The &%Sumoclass of &%Mammals which have a pouch for
their young."))

(tell (sumodocumentation Carnivore "The &%Sumoclass of flesh-eating &%Mammals.  Members
of this &%Sumoclass typically have four or five claws on each paw.  Includes
cats, dogs, bears, racoons, and skunks."))

(tell (sumodocumentation Canine "The &%Sumoclass of &%Carnivores with completely
separable toes, nonretractable claws, and long muzzles."))

(tell (sumodocumentation Feline "The &%Sumoclass of &%Carnivores with completely
separable toes, nonretractable claws, slim bodies, and rounded heads."))

(tell (sumodocumentation Rodent "The &%Sumoclass of &%Mammals with one or two pairs
of incisors for gnawing.  Includes rats, mice, guinea pigs, and
rabbits."))

(tell (sumodocumentation Primate "The &%Sumoclass of &%Mammals which are
&%Primates."))

(tell (sumodocumentation Ape "Various &%Primates with no tails or only short
tails."))

(tell (sumodocumentation Monkey "Various &%Primates with relatively long
tails."))

(tell (sumodocumentation Hominid "Includes &%Humans and relatively recent
ancestors of &%Humans."))

(tell (sumodocumentation Human "Modern man, the only remaining species of the Homo
genus."))

(tell (sumodocumentation Reptile "A &%ColdBloodedVertebrate having an external
covering of scales or horny plates.  &%Reptiles breathe by means of
&%Lungs and generally lay eggs."))

;; The following formulas cover biologically related &%Classes under
;; &%Substance.

(tell (sumodocumentation BiologicallyActiveSubstance "A &%Substance that is
capable of inducing a change in the structure or functioning of an
&%Organism.  This &%Sumoclass includes &%Substances used in the treatment,
diagnosis, prevention or analysis of normal and abnormal body function.
This &%Sumoclass also includes &%Substances that occur naturally in the body
and are administered therapeutically.  Finally, &%BiologicallyActiveSubstance
includes &%Nutrients, most drugs of abuse, and agent-rels that require special
handling because of their toxicity."))

(tell (sumodocumentation Nutrient "A &%BiologicallyActiveSubstance produced or
required by an &%Organism, of primary interest because of its role in the
biologic functioning of the &%Organism."))

(tell (sumodocumentation Protein "A &%Nutrient made up of amino acids joined by
peptide bonds."))

(tell (sumodocumentation Enzyme "A complex &%Protein that is produced by living
cells and which catalyzes specific biochemical reactions. There are six
main types of enzymes:  oxidoreductases, transferases, hydrolases,
lyases, isomerases, and ligases."))

(tell (sumodocumentation Carbohydrate "An element of living cells and a source of
energy for &%Animals.  This class includes both simple &%Carbohydrates,
i.e. sugars, and complex &%Carbohydrates, i.e. starches."))

(tell (sumodocumentation Vitamin "A &%Nutrient present in natural products or made
synthetically, which is essential in the diet of &%Humans and other higher
&%Animals.  Included here are &%Vitamin precursors and provitamins."))

(tell (sumodocumentation BodySubstance "Extracellular material and mixtures of
cells and extracellular material that are produced, excreted or accreted
by an &%Organism.  Included here are &%Substances such as saliva, dental
enamel, sweat, and gastric acid."))

(tell (sumodocumentation Hormone "In &%Animals, a chemical secreted by an
endocrine gland whose products are released into the circulating fluid.
&%Plant hormones or synthetic hormones which are used only to alter or
control various physiologic processes, e.g., reproductive control agent-rels,
are assigned to the &%Sumoclass &%BiologicallyActiveSubstance. &%Hormones act as
chemical messengers and regulate various physiologic processes such as
growth, reproduction, metabolism, etc.  They usually fall into two broad
categories, viz. steroid hormones and peptide hormones."))

(tell (sumodocumentation Blood "A fluid present in &%Animals that transports
&%Nutrients to and waste products away from various &%BodyParts."))

(tell (sumodocumentation ToxicOrganism "The &%Sumoclass of &%Organisms which are
poisonous to other &%Organisms."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?ORGANISM ToxicOrganism)
;;    (exists (?SUBSTANCE)
;;       (and
;;          (instance ?SUBSTANCE BiologicallyActiveSubstance)
;;          (part ?SUBSTANCE ?ORGANISM))))

(tell (sumodocumentation Food "Any &%SelfConnectedObject containing &%Nutrients,
such as carbohydrates, proteins, and fats, that can be ingested by a
living &%Animal and metabolized into energy and body tissue."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;     (instance ?FOOD Food)
;;     (exists (?NUTRIENT)
;;         (and
;;             (instance ?NUTRIENT Nutrient)
;;             (part ?NUTRIENT ?FOOD))))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?FOOD Food)
;;    (forall (?PART1)
;;       (=>
;;          (part ?PART1 ?FOOD)
;;          (exists (?PART2 ?ANIMAL)
;;             (and
;;                (part ?PART1 ?PART2)
;;                (part ?PART2 ?ANIMAL)
;;                (instance ?ANIMAL Animal))))))

(tell (sumodocumentation Meat "Any &%Food which was originally part of an
&%Animal and is not ingested by drinking, including eggs and animal
blood that is eaten as food.  Note that this class covers both raw
meat and meat that has been prepared in some way, e.g. by cooking.
Note too that preparations involving &%Meat and &%FruitOrVegetable
are classed directly under &%Food."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?MEAT Meat)
;;    (forall (?PART)
;;       (=>
;;          (part ?PART ?MEAT)
;;          (exists (?SUBPART ?TIME ?ANIMAL)
;;             (and
;;                (part ?SUBPART ?PART)
;;                (holdsDuring ?TIME (and (instance ?ANIMAL Animal) (part ?SUBPART ?ANIMAL))))))))

(tell (sumodocumentation FruitOrVegetable "Any fruit or vegetable, i.e. a
&%Food that was originally part of a &%Plant and is not ingested
by drinking, including nuts, grains, beans, etc.  Note that
preparations involving more than one &%FruitOrVegetable or
something that is not a &%FruitOrVegetable are not classed under
&%FruitOrVegetable.  For example, a salad is not considered to be
a &%FruitOrVegetable because most salads contain more than one kind
of vegetable, and zucchini cooked in lard would not be a &%FruitOrVegetable
because it contains an &%Animal product."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?VEG FruitOrVegetable)
;;    (forall (?PART)
;;       (=>
;;          (part ?PART ?VEG)
;;          (exists (?SUBPART ?TIME ?PLANT)
;;             (and
;;                (part ?SUBPART ?PART)
;;                (holdsDuring ?TIME (and (instance ?PLANT Plant) (part ?SUBPART ?PLANT))))))))

(tell (sumodocumentation Beverage "Any &%Food that is ingested by &%Drinking.
Note that this class is sumodisjoint with the other subclasses of &%Food,
i.e. &%Meat and &%FruitOrVegetable."))



(tell (sumodocumentation AnatomicalStructure "A normal or pathological part
of the anatomy or structural organization of an &%Organism.  This
class covers &%BodyParts, as well as structures that are given off
by &%Organisms, e.g. &%ReproductiveBodies."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;     (instance ?ANAT AnatomicalStructure)
;;     (exists (?ORGANISM)
;;         (and
;;             (instance ?ORGANISM Organism)
;;             (part ?ANAT ?ORGANISM))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;     (instance ?PART AnatomicalStructure)
;;     (exists (?CELL)
;;         (and
;;             (instance ?CELL Cell)
;;             (part ?CELL ?PART))))

(tell (sumodocumentation ReproductiveBody "Reproductive structure of &%Organisms.
Consists of an &%Embryonic &%Object and a nutritive/protective envelope.
Note that this class includes seeds, spores, and &%FruitOrVegetables, as
well as the eggs produced by &%Animals."))

(tell (sumodocumentation BodyPart "A collection of &%Cells and &%Tissues which
are localized to a specific area of an &%Organism and which are not
pathological. The instances of this &%Sumoclass sumorange from gross structures
to small components of complex &%Organs."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?PART BodyPart)
;;    (not
;;       (exists (?PROC)
;;          (and
;;             (instance ?PROC PathologicProcess)
;;             (result ?PROC ?PART)))))

(tell (sumodocumentation BodyCovering "Any &%BodyPart which is a covering of another
&%BodyPart or of an entire &%Organism.  This would include the rinds of
&%FruitOrVegetables and the skins of &%Animals."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?COVER BodyCovering)
;;    (exists (?BODY)
;;       (and
;;          (superficialPart ?COVER ?BODY)
;;          (or
;;             (instance ?BODY Organism)
;;             (instance ?BODY BodyPart)))))

(tell (sumodocumentation BodyJunction "The place where two &%BodyParts
meet or connect."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;     (instance ?JUNCT BodyJunction)
;;     (exists (?STRUCT)
;;         (and
;;             (instance ?STRUCT BodyPart)
;;             (component ?JUNCT ?STRUCT))))

;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (=>
;;     (instance ?JUNCT BodyJunction)
;;     (exists (?STRUCT1 ?STRUCT2)
;;         (and
;;             (connected ?JUNCT ?STRUCT1)
;; 	      (connected ?JUNCT ?STRUCT2)
;;             (instance ?STRUCT1 BodyPart)
;;             (instance ?STRUCT2 BodyPart)
;;             (not
;;                 (equal ?STRUCT1 ?STRUCT2)))))

(tell (sumodocumentation BodyVessel "Any tube-like structure which occurs naturally in
an &%Organism and through which a &%BodySubstance can circulate."))

(tell (sumodocumentation Cell "The fundamental structural and functional unit of
living &%Organisms."))

(tell (sumodocumentation Organ "A somewhat independent &%BodyPart that performs a
specialized function."))

;; sumo2loom is dropping the following statement because it uses
;; hasPurpose, which has Formula in its domain:
;; (=>
;;    (instance ?ORGAN Organ)
;;    (exists (?PURP)
;;       (hasPurpose ?ORGAN ?PURP)))

(tell (sumodocumentation Gland "An &%Organ that removes &%Substances from the &%Blood,
alters them in some way, and then releases them."))

(tell (sumodocumentation Tissue "An aggregation of similarly specialized &%Cells
and the associated intercellular substance. &%Tissues are relatively
non-localized in comparison to &%BodyParts, &%Organs or &%Organ components.
The main features of &%Tissues are self-connectivity (see
&%SelfConnectedObject) and being a homogeneous mass (all parts in the
same granularity are instances of &%Tissue as well)."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;     (instance ?STUFF Tissue)
;;     (exists (?PART)
;;         (and
;;             (instance ?PART Cell)
;;             (part ?PART ?STUFF))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;     (instance ?STUFF Tissue)
;;     (exists (?ORGANISM)
;;         (and
;;             (instance ?ORGANISM Organism)
;;             (part ?STUFF ?ORGANISM))))

(tell (sumodocumentation Bone "Rigid &%Tissue composed largely of calcium that makes up
the skeleton of &%Vertebrates.  Note that this &%Sumoclass also includes teeth."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?BONE Bone)
;;    (exists (?VERT)
;;       (and
;;          (instance ?VERT Vertebrate)
;;          (part ?BONE ?VERT))))

(tell (sumodocumentation Muscle "Nonrigid &%Tissue appearing only in &%Animals and
composed largely of contractile cells."))

(tell (sumodocumentation FatTissue "Nonrigid &%Tissue that is composed largely of
fat cells."))

(tell (sumodocumentation Noun "One of the parts of speech.  The &%Sumoclass of &%Words
that conventionally denote &%Objects."))

(tell (sumodocumentation Verb "One of the parts of speech.  The &%Sumoclass of &%Words
that conventionally denote &%Processes."))

(tell (sumodocumentation Adjective "One of the parts of speech.  The &%Sumoclass of
&%Words that conventionally denote &%Attributes of &%Objects."))

(tell (sumodocumentation Adverb "One of the parts of speech.  The &%Sumoclass of &%Words
that conventionally denote &%Attributes of &%Processes."))

(tell (sumodocumentation Particle "An umbrella &%Sumoclass for any &%Word that does not
fit into the other subclasses of &%Word.  A &%Particle is generally a small
term that serves a grammatical or logical function, e.g. 'and', 'of',
'since', etc.  At some point, this class might be broken up into the
subclasses 'Connective', 'Preposition', etc."))

(tell (sumodocumentation Morpheme "Part of a &%Word which cannot be subdivided
and which expresses a meaning."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?MORPH Morpheme)
;;    (not
;;       (exists (?OTHERMORPH)
;;          (and
;;             (instance ?OTHERMORPH Morpheme)
;;             (part ?OTHERMORPH ?MORPH)
;;             (not (equal ?OTHERMORPH ?MORPH))))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?MORPH Morpheme)
;;    (exists (?WORD)
;;          (and
;;             (instance ?WORD Word)
;;             (part ?MORPH ?WORD))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;     (instance ?WORD Word)
;;     (exists (?PART)
;;         (and
;;             (part ?PART ?WORD)
;;             (instance ?PART Morpheme))))

(tell (sumodocumentation Phrase "A set of &%Words in a &%Language which form a unit,
i.e. express a meaning in the &%Language."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;     (instance ?PHRASE Phrase)
;;     (exists (?PART1 ?PART2)
;;         (and
;;             (part ?PART1 ?PHRASE)
;; 	      (part ?PART2 ?PHRASE)
;;             (instance ?PART1 Word)
;; 	      (instance ?PART2 Word)
;;             (not (equal ?PART1 ?PART2)))))

(tell (sumodocumentation VerbPhrase "A &%Phrase that has the same function as a
&%Verb."))

(tell (sumodocumentation NounPhrase "A &%Phrase that has the same function as a
&%Noun."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;     (instance ?SENTENCE Sentence)
;;     (exists (?PHRASE1 ?PHRASE2)
;;         (and
;;            (instance ?PHRASE1 NounPhrase)
;;            (instance ?PHRASE2 VerbPhrase)
;;            (part ?PHRASE1 ?SENTENCE)
;;            (part ?PHRASE2 ?SENTENCE))))

(tell (sumodocumentation PrepositionalPhrase "A &%Phrase that begins with a
preposition and that functions as an &%Adjective or an &%Adverb."))

(tell (sumodocumentation Text "A &%Sentence or set of &%Sentences that perform
a specific function related to &%Communication, e.g. express a discourse
about a particular topic."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;     (instance ?TEXT Text)
;;     (exists (?PROP)
;;         (and
;;             (instance ?PROP Proposition)
;;             (containsInformation ?TEXT ?PROP))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;     (instance ?TEXT Text)
;;     (exists (?PART)
;;         (and
;;             (part ?PART ?TEXT)
;;             (instance ?PART Sentence))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?TEXT Text)
;;    (exists (?WRITE)
;;       (and
;;          (instance ?WRITE Writing)
;;          (result ?WRITE ?TEXT))))

(tell (sumodocumentation Sentence "A syntactically well-formed formula of a
&%Language.  It includes, at minimum, a predicate and a subject (which
may be explicit or implicit), and it expresses a &%Sumoproposition."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?SENT Sentence)
;;    (exists (?NOUN ?VERB)
;;       (and
;;          (instance ?NOUN NounPhrase)
;;          (instance ?VERB VerbPhrase)
;;          (part ?NOUN ?SENT)
;;          (part ?VERB ?SENT))))

(tell (BinaryPredicate authors))
(tell (AsymmetricSumorelation authors))
(tell (sumodocumentation authors "(&%authors ?AGENT ?TEXT) means that ?AGENT is
creatively responsible for ?TEXT.  For example, Agatha Christie is
author of Murder_on_the_Orient_Express."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;      (authors ?AGENT ?TEXT)
;;      (exists (?PROCESS ?INSTANCE)
;;           (and
;;                (agent ?PROCESS ?AGENT)
;;                (instance ?INSTANCE ?TEXT)
;;                (result ?PROCESS ?TEXT))))

(tell (BinaryPredicate editor))
(tell (AsymmetricSumorelation editor))
(tell (sumodocumentation editor "(&%editor ?AGENT ?TEXT) means that ?AGENT is
an editor of ?TEXT."))

(tell (BinaryPredicate publishes))
(tell (AsymmetricSumorelation publishes))
(tell (sumodocumentation publishes "(&%publishes ?ORG ?TEXT) means that ?ORG
publishes ?TEXT.  For example, Bantam Books publishes Agatha Christie's
Murder_on_the_Orient_Express."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (publishes ?ORG ?TEXT)
;;    (exists (?PUB)
;;       (and
;;          (instance ?PUB Publication)
;;          (agent ?PUB ?ORG)
;;          (patient ?PUB ?TEXT))))

(tell (BinarySumofunction EditionFn))
(tell (sumodocumentation EditionFn "A &%BinarySumofunction that maps a type of text
(e.g. Agatha Christie's Murder_on_the_Orient_Express) and a number
to the edition of the text type corresponding to the number."))



(tell (BinarySumofunction SeriesVolumeFn))
(tell (sumodocumentation SeriesVolumeFn "A &%BinarySumofunction that maps a type of &%Series
(e.g. the Encyclopedia_Britannica or the Popular_Mechanics periodical) and a
number to the volumes of the text type designated by the number."))



(tell (BinarySumofunction PeriodicalIssueFn))
(tell (sumodocumentation PeriodicalIssueFn "A &%BinarySumofunction that maps a subclass of
&%Periodical and a number to all of the issues of the &%Periodical corresponding
to the number."))


(tell (sumodocumentation Book "A &%Text that has pages and is bound."))

(tell (sumodocumentation Summary "A short &%Text that is a summary of another,
longer &%Text."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?TEXT Summary)
;;    (exists (?TEXT2)
;;       (and
;;          (instance ?TEXT2 Text)
;;          (subsumesContentInstance ?TEXT2 ?TEXT))))

(tell (sumodocumentation Series "A &%ContentBearingObject consisting of multiple
self-contained units.  Some examples are an encyclopedia containing a couple
dozen volumes, a television series made up of many dozens of episodes, a
film serial, etc."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?SERIES Series)
;;    (exists (?BOOK1 ?BOOK2)
;;       (and
;;          (instance ?BOOK1 Book)
;;          (instance ?BOOK2 Book)
;;          (subsumesContentInstance ?SERIES ?BOOK1)
;;          (subsumesContentInstance ?SERIES ?BOOK2)
;;          (not (equal ?BOOK1 ?BOOK2)))))

(tell (sumodocumentation Periodical "A &%Series whose elements are published separately
and on a periodic basis."))

(tell (sumodocumentation Article "An article in a &%Book or &%Series."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?ARTICLE Article)
;;    (exists (?BOOK)
;;       (and
;;          (instance ?BOOK Book)
;;          (subsumesContentInstance ?BOOK ?ARTICLE))))

(tell (sumodocumentation Certificate "A &%Text that confers a right or obligation
on the holder of the &%Certificate.  Note that the right or obligation
need not be a legal one, as in the case of an academic diploma that grants
certain privileges in the professional world."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?DOC Certificate)
;;       (possesses ?AGENT ?DOC))
;;    (exists (?PROC)
;;       (or
;;          (confersRight ?PROC ?DOC ?AGENT)
;;          (confersObligation ?PROC ?DOC ?AGENT))))

(tell (sumodocumentation Patent "A &%Certificate that expresses the content of an
invention that has been accorded legal protection by a governemental
entity."))

(tell (sumodocumentation Molecule "A molecule is the smallest unit of matter of a
&%CompoundSubstance that retains all the physical and chemical properties
of that substance, e.g., Ne, H2, H2O.  A molecule is two or more &%Atoms
linked by a chemical bond."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?MOLE Molecule)
;;    (exists (?ATOM1 ?ATOM2)
;;       (and
;;          (instance ?ATOM1 Atom)
;;          (instance ?ATOM2 Atom)
;;          (part ?ATOM1 ?MOLE)
;;          (part ?ATOM2 ?MOLE)
;;          (not
;;             (equal ?ATOM1 ?ATOM2)))))

(tell (sumodocumentation Artifact "A &%CorpuscularObject that is the product of an
&%IntentionalProcess."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?ARTIFACT Artifact)
;;    (exists (?MAKING)
;;       (and
;;          (instance ?PROCESS Making)
;;          (result ?MAKING ?ARTIFACT))))

(tell (sumodocumentation Product "An &%Artifact that is produced by &%Manufacture and
that is intended to be sold."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?PRODUCT Product)
;;    (exists (?MANUFACTURE)
;;       (and
;;          (instance ?MANUFACTURE Manufacture)
;;          (result ?MANUFACTURE ?PRODUCT))))

(tell (BinaryPredicate version))
(tell (AsymmetricSumorelation version))
(tell (TransitiveSumorelation version))
(tell (sumodocumentation version "Some &%Artifacts have a life cycle with discrete
stages or versions.  (&%version ARTIFACT1 ARTIFACT2) means that ARTIFACT1
is a version of ARTIFACT2.  Note that this &%Predicate relates subclasses of
&%Artifact and not instances."))


;; The following part of the ontology will eventually encompass all
;; artifacts.  For the time being, it is mostly restricted to the content
;; of the Ontolingua ontology component-assemblies, which covers the types
;; of elements used to construct engineering systems.

(tell (sumodocumentation StationaryArtifact "A &%StationaryArtifact is an &%Artifact
that has a fixed spatial location.  Most instances of this &%Sumoclass are
architectural works, e.g. the Eiffel Tower, the Great Pyramids, office towers,
single-family houses, etc."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;     (instance ?ARTIFACT StationaryArtifact)
;;     (exists (?PLACE)
;;        (forall (?TIME)
;;           (=>
;;              (and
;;                 (beforeOrEqual ?TIME (EndFn (WhenFn ?ARTIFACT)))
;;                 (beforeOrEqual (BeginFn (WhenFn ?ARTIFACT)) ?TIME))
;;              (equal (WhereFn ?ARTIFACT ?TIME) ?PLACE)))))

(tell (sumodocumentation Building "The Sumoclass of &%StationaryArtifacts which are
intended to house &%Humans and their activities."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?BUILDING Building)
;;    (exists (?HUMAN)
;;       (and
;;          (instance ?HUMAN Human)
;;          (or
;;             (inhabits ?HUMAN ?BUILDING)
;;             (exists (?ACT)
;;                (and
;;                   (agent ?ACT ?HUMAN)
;;                   (located ?ACT ?BUILDING)))))))

(tell (sumodocumentation Room "A &%properPart of a &%Building which is separated from
the exterior of the &%Building and/or other &%Rooms of the &%Building by walls.
Some &%Rooms may have a specific purpose, e.g. sleeping, bathing, cooking,
entertainment, etc."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?ROOM Room)
;;    (exists (?BUILD)
;;       (and
;;          (instance ?BUILD Building)
;;          (properPart ?ROOM ?BUILD))))

(tell (sumodocumentation ArtWork "&%Artifacts that are created primarily for
aesthetic appreciation.  Note that this &%Sumoclass does not include
most examples of architecture, which belong under &%StationaryArtifact."))

(tell (sumodocumentation Fabric "&%Artifacts that are created by weaving together
natural or synthetic fibers or by treating the skins of certain sorts of
&%Animals.  Note that this &%Sumoclass includes articles that are created by
stitching together various types of fabrics, e.g. bedspreads.  On the other
hand, &%Clothing is not a &%subclass of &%Fabric, because many clothing items
contain elements that are not fabrics."))

(tell (sumodocumentation Clothing "&%Artifact made out of fabrics and possibly other
materials that are used to cover the bodies of &%Humans."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?CLOTHING Clothing)
;;    (exists (?FABRIC)
;;       (and
;;          (instance ?FABRIC Fabric)
;;          (part ?FABRIC ?CLOTHING))))

(tell (sumodocumentation Device "A &%Device is an &%Artifact whose purpose is to
serve as an &%instrument in a specific type of task."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?DEVICE Device)
;;    (exists (?PROC)
;;       (and
;;          (subclass ?PROC Process)
;;          (capability ?PROC instrument ?DEVICE))))

;; sumo2loom is dropping the following statement because it uses
;; hasPurpose, which has Formula in its domain:
;; (=>
;;    (instance ?DEVICE Device)
;;    (exists (?PROC)
;;       (and
;;          (subclass ?PROC Process)
;;          (hasPurpose ?DEVICE (capability ?PROC instrument ?DEVICE)))))

(tell (sumodocumentation MusicalInstrument "A &%Device which is manipulated by a &%Human
and whose purpose is to produce &%Music."))


(tell (sumodocumentation TransportationDevice "A &%TransportationDevice is a &%Device
which serves as the &%instrument in a &%Transportation &%Process which carries
the &%patient of the &%Process from one point to another."))


(tell (sumodocumentation Weapon "The &%Sumoclass of &%Devices that are designed
primarily to damage or destroy &%Humans/&%Animals, &%StationaryArtifacts or
the places inhabited by &%Humans/&%Animals."))


;; sumo2loom is dropping the following statement because it uses
;; hasPurpose, which has Formula in its domain:
;; (=>
;;    (instance ?WEAPON Weapon)
;;    (hasPurpose ?WEAPON (exists (?DEST ?PATIENT)
;;                           (and
;; 	 			     (instance ?DEST Damaging)
;;                              (patient ?DEST ?PATIENT)
;;                              (or
;;                                 (instance ?PATIENT StationaryArtifact)
;;                                 (instance ?PATIENT Animal)
;;                                 (exists (?ANIMAL)
;;                                    (and
;;                                       (instance ?ANIMAL Animal)
;;                                       (inhabits ?ANIMAL ?PATIENT))))))))

(tell (sumodocumentation Machine "&%Machines are &%Devices that that have a
well-defined &%resource and &%result and that automatically convert
the &%resource into the &%result."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?MACHINE Machine)
;;    (forall (?PROC)
;;       (=>
;;          (instrument ?PROC ?MACHINE)
;;          (exists (?RESOURCE ?RESULT)
;;             (and
;;                (resource ?PROC ?RESOURCE)
;;                (result ?PROC ?RESULT))))))

(tell (sumodocumentation EngineeringComponent "A fundamental concept that applies
in many engineering sumodomains.  An &%EngineeringComponent is an element of
a &%Device that is a physically whole object, such as one might
see listed as standard parts in a catalog.  The main difference betweeen
&%EngineeringComponents and arbitrary globs of matter is that
&%EngineeringComponents are object-like in a modeling sense.  Thus, an
&%EngineeringComponent is not an arbtrary subregion, but a part of a
system with a stable identity."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?COMP EngineeringComponent)
;;    (exists (?DEVICE)
;;       (and
;;          (instance ?DEVICE Device)
;;          (component ?COMP ?DEVICE))))

(tell (sumodocumentation engineeringSubcomponent "(&%engineeringSubcomponent ?SUB
?SUPER) means that the &%EngineeringComponent ?SUB is structurally a
&%properPart ?SUPER.  This relation is an &%AsymmetricSumorelation, since
two &%EngineeringComponents cannot be subcomponents of each other."))

(tell (SymmetricSumorelation connectedEngineeringComponents))
(tell (IrreflexiveSumorelation connectedEngineeringComponents))
;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (subrelation connectedEngineeringComponents connected)
(tell (sumodocumentation connectedEngineeringComponents "This is the most general
connection relation between &%EngineeringComponents.  If
(&%connectedEngineeringComponents ?COMP1 ?COMP2), then neither ?COMP1 nor
?COMP2 can be an &%engineeringSubcomponent of the other.  The relation
&%connectedEngineeringComponents is a &%SymmetricSumorelation; there is no
information in the direction of connection between two components.  It is
also an &%IrreflexiveSumorelation; no &%EngineeringComponent bears this relation
to itself.  Note that this relation does not associate a name or type
with the connection."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (connectedEngineeringComponents ?COMP1 ?COMP2)
;;    (and
;;       (not
;;          (engineeringSubcomponent ?COMP1 ?COMP2))
;;       (not
;;          (engineeringSubcomponent ?COMP2 ?COMP1))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (connectedEngineeringComponents ?COMP1 ?COMP2)
;;    (not
;;       (or
;;          (instance ?COMP1 EngineeringConnection)
;;          (instance ?COMP2 EngineeringConnection))))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (connectedEngineeringComponents ?COMP1 ?COMP2)
;;    (exists (?CONNECTION)
;;       (connectsEngineeringComponents ?CONNECTION ?COMP1 ?COMP2)))

(tell (sumodocumentation EngineeringConnection "An &%EngineeringConnection is an
&%EngineeringComponent that represents a connection relationship between
two other &%EngineeringComponents.  It is a reification of the
&%Predicate &%connectedEngineeringComponents.  That means that whenever
this &%Predicate holds between two &%EngineeringComponents, there exists an
&%EngineeringConnection.  The practical reason for reifying a relationship
is to be able to attach other information about it. For example, one
might want to say that a particular connection is associated with some
shared parameters, or that it is of a particular type.
&%EngineeringConnections are &%EngineeringComponents and can therefore be
an &%engineeringSubcomponent of other &%EngineeringComponents.  However,
to provide for modular regularity in component systems,
&%EngineeringConnections cannot be connected.  For each pair of
&%EngineeringComponents related by &%connectedEngineeringComponents, there
exists at least one &%EngineeringConnection.  However, that object may not
be unique, and the same &%EngineeringConnection may be associated with
several pairs of &%EngineeringComponents."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?CONNECTION EngineeringConnection)
;;    (exists (?COMP1 ?COMP2)
;;       (connectsEngineeringComponents ?CONNECTION ?COMP1 ?COMP2)))

(tell (sumodocumentation connectsEngineeringComponents "&%connectsEngineeringComponents
is a &%TernaryPredicate that maps from an &%EngineeringConnection to the
&%EngineeringComponents it connects.  Since &%EngineeringComponents cannot
be connected to themselves and there cannot be an &%EngineeringConnection
without a &%connectedEngineeringComponents &%Predicate, the second and third
arguments of any &%connectsEngineeringComponents relationship will always be
distinct for any given first argument."))

;; This following part contains definitions and axioms relating to social
;; groups and the relations between them.

(tell (sumodocumentation Group "A &%Sumocollection of &%Agents, e.g. a flock
of sheep, a herd of goats, or the local Boy Scout troop."))


(tell (sumodocumentation AgeGroup "A &%Group whose &%members all have the same &%age."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?GROUP AgeGroup)
;;    (forall (?MEMB1 ?MEMB2 ?AGE1 ?AGE2)
;;       (=>
;;          (and
;;             (member ?MEMB1 ?GROUP)
;;             (member ?MEMB2 ?GROUP)
;;             (age ?MEMB1 ?AGE1)
;;             (age ?MEMB2 ?AGE2))
;;          (equal ?AGE1 ?AGE2))))

(tell (sumodocumentation FamilyGroup "A &%Group whose &%members bear
&%familySumorelations to one another."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (instance ?GROUP FamilyGroup)
;;    (forall (?MEMB1 ?MEMB2)
;;       (=>
;;          (and
;;             (member ?MEMB1 ?GROUP)
;;             (member ?MEMB2 ?GROUP))
;;          (familyRelation ?MEMB1 ?MEMB2))))

(tell (BinaryPredicate familySumorelation))
(tell (EquivalenceSumorelation familySumorelation))
(tell (sumodocumentation familySumorelation "A very general &%Predicate for biological
relationships. (&%familySumorelation ?ORGANISM1 ?ORGANISM2) means that
?ORGANISM1 and ?ORGANISM2 are biologically derived from a common ancestor."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (familyRelation ?ORGANISM1 ?ORGANISM2)
;;    (exists (?ORGANISM3)
;;       (and
;;          (familyRelation ?ORGANISM3 ?ORGANISM1)
;;          (familyRelation ?ORGANISM3 ?ORGANISM2))))

(tell (sumodocumentation EthnicGroup "A &%Group whose &%members originate from
the same &%GeographicArea or share the same &%Language and/or cultural
practices."))

(tell (sumodocumentation OrganizationUnit "An organization, division or department
within an organization. For example, the Shell Corporation, the accounting
department at Shell, etc. would all be instances of &%OrganizationUnit.
The continued existence of an &%OrganizationUnit is not dependent on any of
its members, locations, or facilities. Note that, unlike &%Organization, an
&%OrganizationUnit may have no members."))

(tell (sumodocumentation Organization "An &%Organization is a corporate or similar
institution, distinguished from other &%Agents. The &%members of an
&%Organization typically have a common purpose or function. Note that
parts of &%Organizations should not be included here, unless they are
&%subOrganizations of an &%Organization."))

(tell (UnarySumofunction OrganizationFn))
(tell (sumodocumentation OrganizationFn "A &%UnarySumofunction that maps an &%OrganizationUnit,
the notion of an organization which is independent of its members, locations,
and facilities, to the corresponding &%Organization, i.e. the &%Group of &%Humans
who are &%members of the &%Organization.  Note that this is a partial function,
since there are many cases of organizations which are legal entities but which
lack any members."))

;; sumo2loom is dropping the following statement because it uses
;; modalAttribute, which has Formula in its domain:
;; (=>
;;    (and
;;       (equal (OrganizationFn ?UNIT) ?ORG)
;;       (instance ?ATTR NormativeAttribute))
;;    (<=>
;;       (modalAttribute ?UNIT ?ATTR)
;;       (modalAttribute ?ORG ?ATTR)))

(tell (BinaryPredicate employs))
(tell (sumodocumentation employs "(&%employs ?ORG ?PERSON) means that ?ORG has
hired ?PERSON and currently retains ?PERSON, on a salaried or
contractual basis, to provide services in exchange for monetary
compensation."))


(tell (sumodocumentation Corporation "An &%Organization that provides products and/or
services for a fee with the aim of making a profit."))

(tell (sumodocumentation PoliticalOrganization "An &%Organization that is a &%Government,
a &%subOrganizations of a &%Government, or an &%Organization that is attempting
to bring about some sort of political change."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?POL PoliticalOrganization)
;;    (exists (?PROC)
;;       (and
;;          (instance ?PROC PoliticalProcess)
;;          (agent ?PROC ?POL))))

(tell (sumodocumentation Government "The ruling body of a &%Nation or one of the
&%subOrganizations of the ruling body of a &%Nation."))

(tell (sumodocumentation EducationalOrganization "A &%EducationalOrganization is
an institution of learning. Some examples are public and private K-12
schools, and colleges and universities."))

(tell (sumodocumentation ReligiousOrganization "An &%Organization whose members
share a set of religious beliefs."))

(tell (IrreflexiveSumorelation subOrganizations))
(tell (TransitiveSumorelation subOrganizations))
(tell (sumodocumentation subOrganizations "(&%subOrganizations ?ORG1 ?ORG2) means
that ?ORG1 is an &%Organization which is a proper part of the
&%Organization ?ORG2."))

(tell (BinaryPredicate citizen))
(tell (AsymmetricSumorelation citizen))
(tell (sumodocumentation citizen "(&%citizen ?PERSON ?NATION) means that the
&%Human ?PERSON is a citizen of &%Nation ?NATION."))

;; END FILE

;; BEGIN FILE


;;;;;;;;;;;;;;;;;;;
;;   QUALITIES   ;;
;;;;;;;;;;;;;;;;;;;

;; INCLUDES 'MEREOTOPOLOGY'
;; INCLUDES 'PROCESSES'
;; INCLUDES 'OBJECTS'

(tell (sumodocumentation FieldOfStudy "An academic or applied discipline with
recognized experts and with a core of accepted theory or practice.  Note
that &%FieldOfStudy is a &%subclass of &%Sumoproposition, because a
&%FieldOfStudy is understood to be a body of abstract, informational
content, with varying degrees of certainty attached to each element of
this content."))

(tell (sumodocumentation Procedure "A sequence-dependent specification.  Some
examples are &%ComputerPrograms, finite-state machines, cooking recipes,
musical scores, conference schedules, driving directions, and the scripts
of plays and movies."))

(tell (sumodocumentation ComputerProgram "A set of instructions in a computer
programming language that can be executed by a computer."))

(tell (sumodocumentation Plan "A specification of a sequence of &%Processes which
is intended to satisfy a specified purpose at some future time."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;     (and
;;        (instance ?PLAN Plan)
;;        (instance ?OBJ ContentBearingObject)
;;        (containsInformation ?OBJ ?PLAN))
;;     (exists (?PLANNING)
;;        (and
;;           (instance ?PLANNING Planning)
;;           (result ?PLANNING ?OBJ))))

;; sumo2loom is dropping the following statement because it uses
;; hasPurpose, which has Formula in its domain:
;; (=>
;;     (instance ?PLAN Plan)
;;     (exists (?PURP)
;;         (hasPurpose ?PLAN ?PURP)))

(tell (SpatialSumorelation orientation))
(tell (TernaryPredicate orientation))
(tell (sumodocumentation orientation "A general &%Predicate for indicating how two
&%Objects are oriented with respect to one another.  For example,
(orientation ?OBJ1 ?OBJ2 North) means that ?OBJ1 is north of ?OBJ2, and
(orientation ?OBJ1 ?OBJ2 Vertical) means that ?OBJ1 is positioned
vertically with respect to ?OBJ2."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;   (between ?OBJ1 ?OBJ2 ?OBJ3)
;;   (and
;;     (orientation ?OBJ2 ?OBJ1 Left)
;;     (orientation ?OBJ1 ?OBJ3 Left)))

;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (=>
;;    (and
;;       (orientation ?OBJ1 ?OBJ2 ?ATTR1)
;;       (contraryAttribute @ROW)
;;       (inList ?ATTR1 (ListFn @ROW))
;;       (inList ?ATTR2 (ListFn @ROW))
;;       (not (equal ?ATTR1 ?ATTR2)))
;;    (not
;;       (orientation ?OBJ1 ?OBJ2 ?ATTR2)))

(tell (CaseRole direction))
(tell (sumodocumentation direction "(&%direction ?PROC ?ATTR) means that the
&%Process ?PROC is moving in the direction ?ATTR.  For example, one
would use this &%Predicate to represent the fact that Max is moving
&%North."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (holdsDuring ?TIME (direction ?PROC ?ATTR1))
;;    (forall (?ATTR2)
;;       (=>
;;          (holdsDuring ?TIME (direction ?PROC ?ATTR2))
;;          (equal ?ATTR2 ?ATTR1))))

(tell (BinaryPredicate faces))
(tell (sumodocumentation faces "(&%faces ?OBJ ?DIRECTION) means that the front of
?OBJ (see &%FrontFn) is positioned towards the compass direction ?DIRECTION.
More precisely, it means that if a line were extended from the center of
?DIRECTION, the line would intersect with the front of ?OBJ before it
intersected with its back (see &%BackFn)."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (holdsDuring ?TIME (faces ?PROC ?ATTR1))
;;    (forall (?ATTR2)
;;       (=>
;;          (holdsDuring ?TIME (faces ?PROC ?ATTR2))
;;          (equal ?ATTR2 ?ATTR1))))

(tell (sumodocumentation TruthValue "The &%Sumoclass of truth values, e.g. &%True and
&%False.  These are &%Attributes of &%Sentences and &%Sumopropositions."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (property ?ITEM ?VALUE)
;;       (instance ?VALUE TruthValue))
;;    (or
;;       (instance ?ITEM Sentence)
;;       (instance ?ITEM Proposition)))

(tell (TruthValue True))
(tell (sumodocumentation True "The &%TruthValue of being true."))

(tell (TruthValue False))
;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute False True)
(tell (sumodocumentation False "The &%TruthValue of being false."))

(tell (TruthValue Likely))
;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute Likely Unlikely)
(tell (sumodocumentation Likely "The &%TruthValue of being probable, i.e. more likely than
not to be &%True."))

;; sumo2loom is dropping the following statement because it uses
;; ProbabilityFn, which has Formula in its domain:
;; (=>
;;    (property ?FORMULA Likely)
;;    (greaterThan (ProbabilityFn (true ?FORMULA True)) (ProbabilityFn (true ?FORMULA False))))

(tell (TruthValue Unlikely))
(tell (sumodocumentation Unlikely "The &%TruthValue of being improbable, i.e. more likely
than not to be &%False."))

;; sumo2loom is dropping the following statement because it uses
;; ProbabilityFn, which has Formula in its domain:
;; (=>
;;    (property ?FORMULA Unlikely)
;;    (greaterThan (ProbabilityFn (true ?FORMULA False)) (ProbabilityFn (true ?FORMULA True))))

(tell (sumodocumentation true "The &%BinaryPredicate that relates a &%Sentence
to its &%TruthValue."))

(tell (sumodocumentation PositionalAttribute "&%Attributes characterizing the
orientation of an &%Object, e.g. &%Vertical versus &%Horizontal, &%Left
versus &%Right etc."))

(tell (sumodocumentation DirectionalAttribute "The subclass of &%PositionalAttributes
that concern compass directions."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (orientation ?OBJ1 ?OBJ2 ?ATTR1)
;;       (instance ?ATTR1 DirectionalAttribute)
;;       (instance ?ATTR2 DirectionalAttribute)
;;       (not
;;          (equal ?ATTR1 ?ATTR2)))
;;    (not
;;       (orientation ?OBJ1 ?OBJ2 ?ATTR2)))

(tell (DirectionalAttribute North))
;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute North South East West)
(tell (sumodocumentation North "The compass direction of &%North."))

(tell (DirectionalAttribute South))
(tell (sumodocumentation South "The compass direction of &%South."))


(tell (DirectionalAttribute East))
(tell (sumodocumentation East "The compass direction of &%East."))

(tell (DirectionalAttribute West))
(tell (sumodocumentation West "The compass direction of &%West."))


(tell (PositionalAttribute Vertical))
(tell (sumodocumentation Vertical "Attribute used to indicate that an &%Object
is positioned height-wise with respect to another &%Object."))

(tell (PositionalAttribute Horizontal))
;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute Horizontal Vertical)
(tell (sumodocumentation Horizontal "Attribute used to indicate that an &%Object
is positioned width-wise with respect to another &%Object."))


(tell (PositionalAttribute Above))
;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute Above Below)
(tell (sumodocumentation Above "This is a &%PositionalAttribute derived from the
up/down schema and not involving contact.  Note that this means directly
above, i.e., if one object is &%Above another object, then the projections
of the two objects overlap."))


;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (=>
;;    (orientation ?OBJ1 ?OBJ2 Above)
;;    (not
;;       (connected ?OBJ1 ?OBJ2)))

(tell (PositionalAttribute Below))
(tell (sumodocumentation Below "This &%PositionalAttribute is derived from the
up/down schema and may or may not involve contact.  Note that this means
directly below, i.e., if one object is &%Below another object, then the
projections of the two objects overlap."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (orientation ?OBJ1 ?OBJ2 Below)
;;    (or
;;       (orientation ?OBJ2 ?OBJ1 On)
;;       (orientation ?OBJ2 ?OBJ1 Above)))

(tell (PositionalAttribute Adjacent))
(tell (sumodocumentation Adjacent "Used to assert that an object ?OBJ1 is close
to, near or abutting ?OBJ2.  This &%PositionalAttribute covers the
following common sense notions:  adjoins, abuts, is contiguous to,
is juxtaposed, and is close to."))

;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (=>
;;    (orientation ?OBJ1 ?OBJ2 Adjacent)
;;    (or
;;       (orientation ?OBJ1 ?OBJ2 Near)
;;       (connected ?OBJ1 ?OBJ2)))

(tell (PositionalAttribute Left))
(tell (sumodocumentation Left "This &%PositionalAttribute is derived from the
left/right schema.  Note that this means directly to the left, so that,
if one object is to the left of another, then the projections of the
two objects overlap."))

(tell (PositionalAttribute Right))
;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute Right Left)
(tell (sumodocumentation Right "This &%PositionalAttribute is derived from the
left/right schema.  Note that this means directly to the right, so that,
if one object is to the right of another, then the projections of the
two objects overlap."))


(tell (PositionalAttribute Near))
(tell (sumodocumentation Near "The relation of common sense adjacency.  Note that, if
an object is &%Near another object, then the objects are not &%connected."))

;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (=>
;;    (orientation ?OBJ1 ?OBJ2 Near)
;;    (not
;;       (connected ?OBJ1 ?OBJ2)))


(tell (PositionalAttribute On))
(tell (sumodocumentation On "This is used to assert that an object is on top of
another object, and it is derived from the up/down schema and involves
contact."))

;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (=>
;;    (orientation ?OBJ1 ?OBJ2 On)
;;    (connected ?OBJ1 ?OBJ2))


;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (orientation ?OBJ1 ?OBJ2 On)
;;    (not
;;       (orientation ?OBJ2 ?OBJ1 On)))

(tell (sumodocumentation TimeZone "An &%Attribute which is used to specify coordinates
in which time measures are uniform, i.e. all time devices are synchronized to
the same &%TimePositions."))

(tell (TimeZone CoordinatedUniversalTimeZone))
(tell (sumodocumentation CoordinatedUniversalTimeZone "A &%TimeZone which functions
as the standard time zone.  It is also known as Zulu time (in the military),
Greenwich Mean Time, and the Western European time zone.  Note that whenever
a &%TimeZone is not specified, the &%TimePosition is understood to be with
respect to the &%CoordinatedUniversalTimeZone."))

(tell (TimeZone PacificTimeZone))
(tell (sumodocumentation PacificTimeZone "A &%TimeZone that covers much of the
western part of the United States."))


(tell (TimeZone MountainTimeZone))
(tell (sumodocumentation MountainTimeZone "A &%TimeZone that covers much of the
Rocky Mountain region of the United States."))


(tell (TimeZone CentralTimeZone))
(tell (sumodocumentation CentralTimeZone "A &%TimeZone that covers much of the
midwestern United States."))


(tell (TimeZone EasternTimeZone))
(tell (sumodocumentation EasternTimeZone "A &%TimeZone that covers much of the
eastern United States."))


(tell (BinarySumofunction RelativeTimeFn))
(tell (TemporalSumorelation RelativeTimeFn))
(tell (sumodocumentation RelativeTimeFn "A means of converting &%TimePositions
between different &%TimeZones.  (&%RelativeTimeFn ?TIME ?ZONE)
denotes the &%TimePosition in &%CoordinatedUniversalTime that is
contemporaneous with the &%TimePosition ?TIME in &%TimeZone ?ZONE.
For example, (&%RelativeTimeFn (&%MeasureFn 14 &%Hour) &%EasternTimeZone)
would return the value (&%MeasureFn 19 &%Hour)."))

(tell (sumodocumentation SocialRole "The &%Sumoclass of all &%Attributes that
specify the position or status of a &%CognitiveAgent within an
&%Organization or other &%Group."))


(tell (sumodocumentation OccupationalRole "The &%Sumoclass of all &%Attributes that
specify an occupational role of a &%CognitiveAgent."))

(tell (OccupationalRole Unemployed))
(tell (sumodocumentation Unemployed "The &%Attribute of a &%CognitiveAgent when
he/she is unemployed."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (<=>
;;    (forall (?ORG)
;;       (and
;;          (not (employs ?ORG ?PERSON))
;;          (instance ?PERSON Human)))
;;    (attribute ?PERSON Unemployed))

(tell (sumodocumentation Position "A formal position of reponsibility within an
&%Organization. Examples of &%Positions include president, laboratory
director, senior researcher, sales representative, etc."))

(tell (TernaryPredicate occupiesPosition))
(tell (sumodocumentation occupiesPosition "(&%occupiesPosition ?PERSON ?POSITION ?ORG)
means that ?PERSON holds the &%Position ?POSITION at &%Organization ?ORG.
For example, (&%occupiesPosition &%TomSmith &%ResearchDirector
&%AcmeLaboratory) means that &%TomSmith is a research director at Acme Labs."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (employs ?ORG ?PERSON)
;;    (exists (?POSITION)
;;       (occupiesPosition ?PERSON ?POSITION ?ORG)))

(tell (sumodocumentation NormativeAttribute "A &%Sumoclass containing all of the
&%Attributes that are specific to judgements about morality, legality,
aesthetics, etiquette, etc.  In general, these judgements express that
something ought to be the case."))

(tell (BinaryPredicate modalAttribute))
(tell (AsymmetricSumorelation modalAttribute))
(tell (IrreflexiveSumorelation modalAttribute))
(tell (sumodocumentation modalAttribute "A &%BinarySumorelation that is used to state the
normative force of a &%Sumoproposition.  (&%modalAttribute ?FORMULA ?PROP) means
that the &%Sumoproposition expressed by ?FORMULA has the &%NormativeAttribute
?PROP.  For example, (&%modalAttribute (&%exists (?ACT ?OBJ) (&%and
(&%instance ?ACT &%Giving) (&%agent-rel ?ACT John) (&%patient ?ACT ?OBJ)
(&%destination ?ACT Tom))) &%Obligation) means that John is obligated to give
Tom something."))

;; sumo2loom is dropping the following statement because it uses
;; modalAttribute, which has Formula in its domain:
;; (=>
;;    (and
;;       (modalAttribute ?FORMULA1 ?PROP)
;;       (entails ?FORMULA1 ?FORMULA2))
;;    (modalAttribute ?FORMULA2 ?PROP))

;; sumo2loom is dropping the following statement because it uses
;; modalAttribute, which has Formula in its domain:
;; (=>
;;    (holdsObligation ?PROCESS ?AGENT)
;;    (modalAttribute (exists (?INSTANCE)
;;                      (and
;;                         (instance ?INSTANCE ?PROCESS)
;;                         (agent ?INSTANCE ?AGENT))) Obligation))

;; sumo2loom is dropping the following statement because it uses
;; modalAttribute, which has Formula in its domain:
;; (=>
;;    (holdsRight ?PROCESS ?AGENT)
;;    (modalAttribute (exists (?INSTANCE)
;;                      (and
;;                         (instance ?INSTANCE ?PROCESS)
;;                         (agent ?INSTANCE ?AGENT))) Permission))

(tell (sumodocumentation SubjectiveAssessmentAttribute "The &%Sumoclass of &%NormativeAttributes
which lack an objective criterion for their attribution, i.e. the attribution of
these &%Attributes varies from subject to subject and even with respect to the
same subject over time.  This &%Sumoclass is, generally speaking, only used when
mapping external knowledge sources to the SUMO.  If a term from such a knowledge
source seems to lack objective criteria for its attribution, it is assigned to
this &%Sumoclass."))

(tell (sumodocumentation ObjectiveNorm "The &%Sumoclass of &%NormativeAttributes that are
associated with an objective criterion for their attribution, i.e. there is
broad consensus about the cases where these attribute-rels are applicable."))

(tell (sumodocumentation ContestAttribute "A &%Sumoclass containing all of the
&%Attributes that are specific to participants in a &%Contest.  Some
of these &%Attributes are winning, losing, won, lost, etc."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (attribute ?OBJ ?ATTR)
;;       (instance ?ATTR ContestAttribute))
;;    (exists (?CONTEST)
;;       (and
;;          (instance ?CONTEST Contest)
;;          (or
;;             (agent ?CONTEST ?OBJ)
;;             (patient ?CONTEST ?OBJ)))))

(tell (sumodocumentation AlethicAttribute "A &%Sumoclass containing all of the &%Attributes
relating to the notions of possibility and necessity."))

(tell (AlethicAttribute Possibility))
(tell (sumodocumentation Possibility "Attribute that applies to &%Sumopropositions that are
possible, i.e. true in at least one possible world."))

(tell (AlethicAttribute Necessity))
(tell (sumodocumentation Necessity "Attribute that applies to &%Sumopropositions that are
necessary, i.e. true in every possible world."))

;; sumo2loom is dropping the following statement because it uses
;; modalAttribute, which has Formula in its domain:
;; (<=>
;;    (modalAttribute ?FORMULA Necessity)
;;    (not (modalAttribute (not ?FORMULA) Possibility)))

;; sumo2loom is dropping the following statement because it uses
;; modalAttribute, which has Formula in its domain:
;; (=>
;;    (modalAttribute ?FORMULA Necessity)
;;    (modalAttribute ?FORMULA Possibility))

(tell (sumodocumentation DeonticAttribute "A &%Sumoclass containing all of the &%Attributes
relating to the notions of permission, obligation, and prohibition."))

(tell (DeonticAttribute Permission))
(tell (sumodocumentation Permission "&%Attribute that applies to &%Sumopropositions that an
&%Agent is permitted, by some authority, to make true."))

(tell (DeonticAttribute Obligation))
(tell (sumodocumentation Obligation "&%Attribute that applies to &%Sumopropositions that an
&%Agent is required, by some authority, to make true."))

;; sumo2loom is dropping the following statement because it uses
;; modalAttribute, which has Formula in its domain:
;; (<=>
;;    (modalAttribute ?FORMULA Obligation)
;;    (not (modalAttribute (not ?FORMULA) Permission)))

;; sumo2loom is dropping the following statement because it uses
;; modalAttribute, which has Formula in its domain:
;; (=>
;;    (modalAttribute ?FORMULA Obligation)
;;    (modalAttribute ?FORMULA Permission))

(tell (subAttribute Law Obligation))
(tell (sumodocumentation Law "&%Attribute that applies to &%Sumopropositions that are
required by a government or a branch of the government and that are enforced
with penalties for noncompliance.  These &%Sumopropositions may be codified as
legislation or they may be more informal, as in the case of government policy."))

(tell (subAttribute Promise Obligation))
(tell (sumodocumentation Promise "&%Attribute that applies to &%Sumopropositions that
an &%Agent promises to make true.  &%Promises may be implicit or explicit.
They may be expressed in a written or verbal or gestural manner."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (property ?ENTITY Promise)
;;       (or
;;          (property ?ENTITY Contract)
;;          (property ?ENTITY NakedPromise)))

(tell (subAttribute Contract Promise))
(tell (sumodocumentation Contract "&%Attribute that applies to &%Sumopropositions where
something is promised in return, i.e. a reciprocal promise."))

(tell (subAttribute PurchaseContract Contract))
(tell (sumodocumentation PurchaseContract "A &%Contract between two &%Agents in
which one &%Agent agrees to render the other some good or service in
exchange for currency."))

(tell (subAttribute ServiceContract Contract))
(tell (sumodocumentation ServiceContract "A &%Contract where an &%Agent agrees to
perform a service for another &%Agent (usually for a price)."))

(tell (subAttribute Warranty ServiceContract))
(tell (sumodocumentation Warranty "A &%Contract that states the cirumstances
under which defects in the product will be corrected for no charge.
A &%Warranty is usually limited to a length of time that is specified
in the &%Warranty itself.  A &%Warranty also includes information about
what is not covered and actions that invalidate the &%Warranty."))

(tell (subAttribute NakedPromise Promise))
;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute NakedPromise Contract)
(tell (sumodocumentation NakedPromise "A &%Promise where nothing is promised in return,
i.e. a nudum pactum."))

;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute Solid Liquid Gas)
;; sumo2loom is dropping the following statement because it uses
;; exhaustiveAttribute, which is a VariableArityRelation:
;; (exhaustiveAttribute PhysicalState Solid Liquid Gas)
(tell (sumodocumentation PhysicalState "The physical state of an &%Object.  There
are three instances of this &%Sumoclass:  &%Solid, &%Liquid, and &%Gas.
Physical changes are not characterized by the transformation of one
substance into another, but rather by the change of the form (physical
states) of a given substance. The bending of a piece of copper wire fails
to change the copper into another substance; crushing a block of ice leaves
only crushed ice; melting an iron nail yields a substance still called
iron: these are all accepted as physical changes."))

(tell (PhysicalState Solid))
(tell (sumodocumentation Solid "An &%Object has the &%Attribute of &%Solid if it
has a fixed shape and a fixed volume."))

(tell (PhysicalState Liquid))
(tell (sumodocumentation Liquid "An &%Object has the &%Attribute of &%Liquid if
it has a fixed volume but not a fixed shape."))


(tell (PhysicalState Gas))
(tell (sumodocumentation Gas "An &%Object has the &%Attribute of &%Gas if it has
neither a fixed volume nor a fixed shape."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;    (instance ?OBJ Substance)
;;    (exists (?ATTR)
;;       (and
;;          (instance ?ATTR PhysicalState)
;;          (attribute ?OBJ ?ATTR))))

(tell (sumodocumentation PerceptualAttribute "Any &%Attribute whose presence is detected
by an act of &%Perception."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (and
;;       (instance ?PERCEPTION Perception)
;;       (patient ?PERCEPTION ?OBJ))
;;    (exists (?PROP)
;;       (and
;;          (instance ?PROP PerceptualAttribute)
;;          (attribute ?OBJ ?PROP))))

(tell (sumodocumentation TasteAttribute "The &%Sumoclass of &%Attributes relating to
the taste of &%Objects."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?OBJ Food)
;;    (exists (?ATTR)
;;       (and
;;          (instance ?ATTR TasteAttribute)
;;          (attribute ?OBJ ?ATTR))))

(tell (sumodocumentation OlfactoryAttribute "The &%Sumoclass of properties that are
detectable by smell."))

(tell (sumodocumentation VisualAttribute "The &%Sumoclass of visually discernible
properties."))

(tell (VisualAttribute Illuminated))
(tell (sumodocumentation Illuminated "The &%Attribute of &%Regions that are
illuminated to some degree, i.e. in which some shapes are visually
discernable."))

(tell (VisualAttribute Unilluminated))
;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute Unilluminated Illuminated)
(tell (sumodocumentation Unilluminated "The &%Attribute of &%Regions that are
unilluminated, i.e in which no shapes are visually discernable."))

(tell (sumodocumentation ColorAttribute "The &%Sumoclass of &%VisualAttributes
relating to the color of &%Objects."))

(tell (sumodocumentation PrimaryColor "Colors which can be blended to form any
color and which cannot be derived from any other colors."))

(tell (PrimaryColor Red))
(tell (sumodocumentation Red "The &%Attribute of redness."))

(tell (PrimaryColor Blue))
(tell (sumodocumentation Blue "The &%Attribute of being blue in color."))

(tell (PrimaryColor Yellow))
(tell (sumodocumentation Yellow "The &%Attribute of being yellow in color."))

(tell (PrimaryColor White))
(tell (sumodocumentation White "The &%Attribute of being white in color."))

(tell (PrimaryColor Black))
(tell (sumodocumentation Black "The &%Attribute of being black in color."))

(tell (ColorAttribute Monochromatic))
(tell (sumodocumentation Monochromatic "An &%Object with this &%Attribute has
the same color on every part of its surface."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (and
;;       (attribute ?OBJ Monochromatic)
;;       (superficialPart ?PART ?OBJ)
;;       (attribute ?PART ?COLOR)
;;       (instance ?COLOR PrimaryColor))
;;    (forall (?ELEMENT)
;;       (=>
;;          (superficialPart ?ELEMENT ?OBJ)
;;          (attribute ?ELEMENT ?COLOR))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?OBJ Object)
;;    (or
;;       (attribute ?OBJ Monochromatic)
;;       (attribute ?OBJ Polychromatic)))

(tell (ColorAttribute Polychromatic))
;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute Polychromatic Monochromatic)
(tell (sumodocumentation Polychromatic "An &%Object with this &%Attribute has
different colors on different parts of its surface."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (attribute ?OBJ Polychromatic)
;;    (exists (?PART1 ?PART2 ?COLOR1 ?COLOR2)
;;       (and
;;          (superficialPart ?PART1 ?OBJ)
;;          (superficialPart ?PART2 ?OBJ)
;;          (attribute ?PART1 ?COLOR1)
;;          (attribute ?PART2 ?COLOR2)
;;          (instance ?COLOR1 ColorAttribute)
;;          (instance ?COLOR2 ColorAttribute)
;;          (not (equal ?COLOR1 ?COLOR2)))))

(tell (sumodocumentation ShapeAttribute "Any &%Attribute that relates to the
shape of an &%Object."))

(tell (ShapeAttribute Pliable))
(tell (sumodocumentation Pliable "The shape of an &%Object with this &%Attribute
can be altered."))


(tell (ShapeAttribute Rigid))
;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute Rigid Pliable)
(tell (sumodocumentation Rigid "The shape of an &%Object with this &%Attribute
cannot be altered."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?OBJ SelfConnectedObject)
;;    (or
;;       (attribute ?OBJ Pliable)
;;       (attribute ?OBJ Rigid)))

(tell (sumodocumentation TextureAttribute "Any &%Attribute that characterizes the
texture of an &%Object."))


(tell (sumodocumentation SoundAttribute "Any &%Attribute that characterizes the
sound made by an &%Object."))

(tell (sumodocumentation SaturationAttribute "A &%Sumoclass of &%Attributes that specify, in
a qualitative manner, the extent of the presence of one kind of &%Object in
another kind of &%Object."))

(tell (SaturationAttribute Dry))
;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute Dry Damp)
(tell (sumodocumentation Dry "An &%Attribute which indicates that the associated
&%Object contains no &%Liquid."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (attribute ?OBJ Dry)
;;    (not
;;       (exists (?SUBOBJ)
;;          (and
;;             (part ?SUBOBJ ?OBJ)
;;             (attribute ?SUBOBJ Liquid)))))

(tell (SaturationAttribute Damp))
(tell (sumodocumentation Damp "An &%Attribute which indicates that the associated
&%Object contains some &%Liquid."))

(tell (SaturationAttribute Wet))
(tell (subAttribute Wet Damp))
(tell (sumodocumentation Wet "An &%Attribute which indicates that the
associated &%Object is fully saturated with a &%Liquid, i.e.
every part of the &%Object has a subpart which is a &%Liquid."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;;    (attribute ?OBJ Wet)
;;    (forall (?PART)
;;       (=>
;;          (part ?PART ?OBJ)
;;          (exists (?SUBPART)
;;             (and
;;                (part ?SUBPART ?PART)
;;                (attribute ?SUBPART Liquid))))))

(tell (sumodocumentation BreakabilityAttribute "A &%subclass of &%Attributes for
characterizing the breakability of &%CorpuscularObjects."))

(tell (BreakabilityAttribute Fragile))
(tell (sumodocumentation Fragile "An &%Attribute which indicates that the
associated &%Object is very breakable."))

(tell (BreakabilityAttribute Unbreakable))
;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute Unbreakable Fragile)
(tell (sumodocumentation Unbreakable "An &%Attribute which indicates that the
associated &%Object cannot be broken."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (attribute ?OBJ Unbreakable)
;;    (not (exists (?DAMAGE)
;;       (and
;;          (instance ?DAMAGE Damaging)
;;          (patient ?DAMAGE ?OBJ)))))

(tell (sumodocumentation BiologicalAttribute "&%Attributes that apply specifically
to instances of &%Organism."))


;; sumo2loom is dropping the following statement because it uses
;; exhaustiveAttribute, which is a VariableArityRelation:
;; (exhaustiveAttribute AnimacyAttribute Living Dead)
(tell (sumodocumentation AnimacyAttribute "&%Attributes that indicate whether an
&%Organism is alive or not."))

(tell (AnimacyAttribute Living))
(tell (sumodocumentation Living "This &%Attribute applies to &%Organisms that are
alive."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (and
;;       (instance ?ORGANISM Organism)
;;       (agent ?PROCESS ?ORGANISM))
;;    (holdsDuring (WhenFn ?PROCESS) (attribute ?ORGANISM Living)))

(tell (AnimacyAttribute Dead))
;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute Dead Living)
(tell (sumodocumentation Dead "This &%Attribute applies to &%Organisms that are
not alive."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?ORG Organism)
;;    (exists (?ATTR)
;;       (and
;;          (instance ?ATTR AnimacyAttribute)
;;          (attribute ?ORG ?ATTR))))

;; sumo2loom is dropping the following statement because it uses
;; exhaustiveAttribute, which is a VariableArityRelation:
;; (exhaustiveAttribute SexAttribute Female Male)
(tell (sumodocumentation SexAttribute "&%Attributes that indicate the sex of an
&%Organism."))

(tell (SexAttribute Female))
(tell (sumodocumentation Female "An &%Attribute indicating that an &%Organism is
female in nature."))


(tell (SexAttribute Male))
;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute Male Female)
(tell (sumodocumentation Male "An &%Attribute indicating that an &%Organism is
male in nature."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?ANIMAL Animal)
;;    (exists (?ATTR)
;;       (and
;;          (instance ?ATTR SexAttribute)
;;          (attribute ?ANIMAL ?ATTR))))

;; sumo2loom is dropping the following statement because it uses
;; exhaustiveAttribute, which is a VariableArityRelation:
;; (exhaustiveAttribute DevelopmentalAttribute FullyFormed NonFullyFormed)
(tell (sumodocumentation DevelopmentalAttribute "&%Attributes that indicate the
stage of development of an &%Organism."))

(tell (DevelopmentalAttribute FullyFormed))
(tell (sumodocumentation FullyFormed "The stage of an &%Organism when it has reached
the end of its growth phase."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (attribute ?OBJ FullyFormed)
;;    (exists (?GROWTH)
;;       (and
;;          (instance ?GROWTH Growth)
;;          (experiencer ?GROWTH ?OBJ)
;;          (holdsDuring (BeginFn (WhenFn ?OBJ)) (attribute ?OBJ NonFullyFormed)))))

(tell (DevelopmentalAttribute NonFullyFormed))
;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute NonFullyFormed FullyFormed)
(tell (successorAttribute NonFullyFormed FullyFormed))
(tell (sumodocumentation NonFullyFormed "The stage of an &%Organism before it is
&%FullyFormed."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (instance ?ORG Organism)
;;    (exists (?ATTR)
;;       (and
;;          (instance ?ATTR DevelopmentalAttribute)
;;          (attribute ?ORG ?ATTR))))

(tell (DevelopmentalAttribute Larval))
(tell (subAttribute Larval NonFullyFormed))
(tell (sumodocumentation Larval "Form of most &%Invertebrates, &%Amphibians, and
&%Fish immediately after they hatch.  This form is fundamentally unlike
the adult form, and metamorphosis is required to reach the latter form."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (holdsDuring ?TIME (attribute ?ORG Larval))
;;    (holdsDuring (PastFn ?TIME) (exists (?BIRTH) (and (instance ?BIRTH Birth) (experiencer ?BIRTH ?ORG)))))

(tell (DevelopmentalAttribute Embryonic))
(tell (subAttribute Embryonic NonFullyFormed))
;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute Embryonic Larval)
(tell (sumodocumentation Embryonic "The stage of an &%Organism or an
&%AnatomicalStructure that exists only before the &%Organism is born.
&%Mammals, for example, have this &%Attribute only prior to
their birth."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;    (attribute ?ORG Embryonic)
;;    (exists (?BODY)
;;       (and
;;          (instance ?BODY ReproductiveBody)
;;          (located ?ORG ?BODY))))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (holdsDuring ?TIME (attribute ?ORG Embryonic))
;;    (holdsDuring ?TIME (not (exists (?BIRTH) (and (instance ?BIRTH Birth) (experiencer ?BIRTH ?ORG))))))

(tell (sumodocumentation DiseaseOrSyndrome "A &%BiologicalAttribute which qualifies
something that alters or interferes with a normal process, state or activity
of an &%Organism.  It is usually characterized by the abnormal functioning of
one or more of the host's systems, parts, or &%Organs."))

(tell (sumodocumentation PsychologicalAttribute "&%Attributes that characterize the mental
or behavioral life of an &%Organism."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;;    (instance ?ATTR PsychologicalAttribute)
;;    (=>
;;       (holdsDuring ?TIME (attribute ?ORGANISM ?ATTR))
;;       (holdsDuring ?TIME (attribute ?ORGANISM Living))))


(tell (sumodocumentation StateOfMind  "The class &%StateOfMind is distinguished from
its complement &%TraitAttribute by the fact that instances of the former are
transient while instances of the latter are persistent features of a creature's behavioral/psychological make-up."))

(tell (sumodocumentation EmotionalState "The &%Sumoclass of &%Attributes that denote emotional
states of &%Organisms."))

(tell (sumodocumentation ConsciousnessAttribute "&%Attributes that indicate whether
an &%Organism is conscious or the qualitative degree of consciousness of
an &%Organism."))

;; sumo2loom is skipping this implication because both sides are nontrivial:
;; (<=>
;;    (and
;;       (instance ?AGENT SentientAgent)
;;       (attribute ?AGENT Living))
;;    (exists (?ATTR)
;;       (and
;;          (instance ?ATTR ConsciousnessAttribute)
;;          (attribute ?AGENT ?ATTR))))

;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute Asleep Unconscious Awake)
(tell (sumodocumentation Asleep "This &%Attribute applies to &%Organisms that are
sleeping."))

;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute Unconscious Awake)
(tell (sumodocumentation Unconscious "This &%Attribute applies to &%Organisms that
are unconscious because of a non-natural process, e.g. a blow to the head,
a drug, etc.  Note that the &%Attribute &%Asleep is used to describe the
&%ConsciousnessAttribute of an &%Organism that is asleep."))

(tell (sumodocumentation Awake "This &%Attribute applies to &%Organisms that are
neither &%Unconscious nor &%Asleep."))

(tell (sumodocumentation TraitAttribute "&%Attributes that indicate the the
behavior/personality traits of an &%Organism."))

(tell (sumodocumentation PsychologicalDysfunction "A clinically significant
dysfunction whose major manifestation is behavioral or psychological.
These dysfunctions may have identified or presumed biological etiologies
or manifestations."))


;;  END FILE

;; ================================================
;; QoS DOMAIN ONTOLOGY rev. 2002-08-14
;; ================================================

;; definition of Product


(tell (sumodocumentation Product "Something produced by human or mechanical effort."))


;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Product Product)
;; 		(instance ?Product Proposition))
;; 	(exists (?Object ?Process)
;; 		(and
;; 			(instance ?Object ContentBearingObject)
;; 			(containsInformation ?Object ?Product)
;; 			(instance ?Process IntentionalProcess)
;; 			(result ?Process ?Object))))

;; definition of productModel

(tell (AsymmetricSumorelation productModel))
(tell (sumodocumentation productModel "(productModel ?Model ?Product) means that
?Model represents the type of the Product ?Product"))

;; definition of ComputationalSystem

(tell (sumodocumentation ComputationalSystem "Instances of &%ComputationalSystems
include instances of &%SoftwareSystems, &%HardwareSystems, and
&%ComputerNetworks."))

;; definition of Computer

(tell (sumodocumentation Computer "A general-purpose machine that processes
data according to a set of instructions that are stored internally
either temporarily or permanently."))

;; definition of ComputerNetwork

(tell (sumodocumentation ComputerNetwork "The network includes the network
operating system in the client and server machines, the cables
connecting them and all supporting hardware in between such as
bridges, routers and switches."))

;; definition of LAN

(tell (sumodocumentation LAN "A computer network that spans a relatively small
area. Most LANs are confined to a single building or group of buildings.
However, one LAN can be connected to other LANs over any distance via
telephone lines and radio waves."))

;; definition of BusNetwork

(tell (sumodocumentation BusNetwork "A network in which all nodes are connected
to a single wire (the bus) that has two endpoints. Ethernet 10Base-2
and 10Base-5 networks, for example, are bus networks. Other common
network types include &%StarNetworks and &%RingNetworks."))

;; definition of StarNetwork

(tell (sumodocumentation StarNetwork "A local-area network (LAN) that uses a star
topology in which all nodes are connected to a central computer."))

;; definition of RingNetwork

(tell (sumodocumentation LAN "A local-area network (LAN) whose topology is a ring.
That is, all of the nodes are connected in a closed loop.  Messages
travel around the ring, with each node reading those messages addressed
to it."))

;; definition of ComputerHardware

(tell (sumodocumentation ComputerHardware "The hardware is the physical part of
a computer system; the machinery and equipment."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(instance ?Hardware ComputerHardware)
;; 	(exists (?Computer)
;; 		(and
;; 			(instance ?Computer Computer)
;; 			(component ?Hardware ?Computer))))

;; definition of ComputerMemory

(tell (sumodocumentation ComputerMemory	"The computer's workspace (physically,
a collection of RAM chips). It is an important resource, since it
determines the size and number of programs that can be run at the
same time, as well as the amount of data that can be processed
instantly."))

;; definition of HardDiskDrive

(tell (sumodocumentation HardDiskDrive "The primary computer storage medium, which
is made of one or more aluminum or glass platters, coated with a
ferromagnetic material. Most hard disks are fixed disks, which are
permanently sealed in the drive."))

;; definition of CPU

(tell (sumodocumentation CPU "CPU (Central Processing Unit) is the computing part
of the computer."))

;; definition of DataTransfer

(tell (sumodocumentation DataTransfer "A subclass of &%ComputerProcesses which
send data over a computer channel or bus."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Transfer DataTransfer)
;; 	(exists (?Origin ?Destination ?System ?Data)
;; 		(and
;; 			(origin ?Transfer ?Origin)
;; 			(destination ?Transfer ?Destination)
;; 			(instrument ?Transfer ?System)
;; 			(patient ?Transfer ?Data)
;; 			(instance ?Data ComputerData)
;; 			(instance ?System HardwareSystem)
;; 			(instance ?Origin HardwareSystem)
;; 			(instance ?Destination ComputationalSystem))))

;;definition of ComputerProcess

(tell (sumodocumentation ComputerProcess "An instance of &%ComputerProcess is a
process which manipulates data in the computer."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;      (instance ?Process ComputerProcess)
;;      (exists (?Computer ?Program)
;; 	     (and
;; 	             (instance ?Computer Computer)
;; 		     (computerRunning ?Process ?Computer)
;; 		     (instance ?Program ComputerProgram)
;; 		     (programRunning ?Process ?Program))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(programRunning ?Process ?Program)
;; 	(exists (?Computer)
;; 		(runningOn ?Program ?Computer)))

;; definition of ComputerFile

(tell (sumodocumentation ComputerFile "A collection of bytes stored as an
individual entity. All data on disk is stored as a file with an
assigned file name that is unique within the folder (directory)
it resides in."))

;;  definition of ComputerDirectory

(tell (sumodocumentation ComputerDirectory "This is the class of catalogs that
identify and locate instances of &%ComputerFiles.  The catalog's entries
consist of at least &%ComputerFile names and a physical address on a memory
device of the &%ComputerFile or an index (e.g., file descriptor) into a
table of &%ComputerFile physical addresses.  &%ComputerDirectories are thus
collections of data elements and must be named and stored on memory devices;
hence, &%ComputerDirectory is a Sumosubset of &%ComputerFile."))

;; definition of runningOn

(tell (BinarySumorelation runningOn))
(tell (sumodocumentation runningOn "(runningOn ?Program ?Computer) holds if the
&%ComputerProgram ?Program is being executed on ?Computer."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(runningOn ?Program ?Computer)
;; 	(exists (?Process)
;; 		(and
;; 			(programRunning ?Process ?Program)
;; 			(computerRunning ?Process ?Computer))))

;; definition of computerRunning

(tell (sumodocumentation computerRunning "(&%computerRunning ?Process ?Computer)
means that the ComputerProcess ?Process is running on ?Computer."))

;; definition of programRunning

(tell (sumodocumentation programRunning "(&%programRunning ?Process ?Program)
means that the &%ComputerProcess ?Process is executing the
&%ComputerProgram ?Program."))

;;  definition of directoryOf

(tell (BinaryPredicate directoryOf))
(tell (sumodocumentation directoryOf "(&%directoryOf ?FILE ?DIRECTORY) means that
the &%ComputerFile ?FILE is in the &%ComputerDirectory ?DIRECTORY."))

;;  definition of PhysicalAddress.

(tell (sumodocumentation PhysicalAddress "The collection of all addresses which
identify a location of a &%ComputerFile."))

;;  definition of AddressFn .

(tell (UnarySumofunction AddressFn))
(tell (sumodocumentation AddressFn "(&%AddressFn ?FILE) returns as its value the
physical address of the &%ComputerFile ?FILE."))

; "ComputerDirectories contain information about the physical addresses
; of ComputerFiles which are listed in these directories" .


;; definition of BitsPerSecond

(tell (UnitOfMeasure BitsPerSecond))
(tell (sumodocumentation BitsPerSecond "The measurement of the speed of data
transfer in a communications system."))

;;  definition of PacketsPerSecond

(tell (UnitOfMeasure PacketsPerSecond))
(tell (sumodocumentation PacketsPerSecond "The rate or speed of &%Packet-Networks
transferred in a second."))

;;  definition of Packet

(tell (sumodocumentation Packet "A block of data used for transmission in packet
switched systems."))

;; The following constants are specific to the Quite project

;;  definition of SoftwareSystem

(tell (sumodocumentation SoftwareSystem "This is the class of mutually supportive
groups of instances of &%ComputerProgram for a single general purpose.
For example, a database management system is a collection of many instances
of &%ComputerProgram that work together to store, retrieve, modify, and
delete data."))

; "A software system is a group of computer programs for a single
; general purpose" .

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;; 	(instance ?System SoftwareSystem)
;; 	(forall (?Program ?Process)
;; 		(=>
;; 			(and
;; 				(part ?Program ?System)
;; 				(programRunning ?Process ?Program))
;; 			(exists (?Purpose)
;; 				(hasPurpose ?Process ?Purpose)))))

;;  definition of HardwareSystem

(tell (sumodocumentation HardwareSystem "The class of hardware systems is the
connection of three types of physical modules: instances of
&%ComputerProcessor(s), &%ComputerMemory, and &%ComputerNetwork.
&%ComputerProcessors execute instructions from &%ComputerPrograms,
which usually include instructions to read and write data from
memory, and send data via instances of &%ComputerNetworks."))

; "A software system requires a hardware system to execute" .

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Software SoftwareSystem)
;; 		(instance ?Process ComputerProcess)
;; 		(programRunning ?Process ?Software))
;; 	(exists (?Hardware)
;; 		(and
;; 			(instance ?Hardware HardwareSystem)
;; 			(computerRunning ?Process ?Hardware))))

; "A hardware system consists of three physical modules: processors,
; memory, and networks" .

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?System HardwareSystem)
;; 	(exists (?Processor ?Memory ?Network)
;; 		(and
;; 			(instance ?Processor ComputerProcessor)
;; 			(component ?System ?Processor)
;; 			(instance ?Memory ComputerMemory)
;; 			(component ?System ?Memory)
;; 			(instance ?Network ComputerNetwork)
;; 			(component ?System ?Network))))

; "When the data is sent from HardwareSystems, it is send via
; ComputerNetworks" .

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?System ?HardwareSystem)
;; 		(component ?Network ?System)
;; 		(instance ?Event DataTransfer)
;; 		(origin ?Event ?System))
;; 	(exists (?Network)
;; 		(and
;; 			(instance ?Network ComputerNetwork)
;; 			(instrument ?Event ?Network))))

;; definition of runsOn

(tell (BinaryPredicate runsOn))
(tell (AsymmetricSumorelation runsOn))
(tell (sumodocumentation runsOn "(runsOn ?Program ?Computer) means that ?Program
is capable of running on ?Computer."))


;;  definition of StartupBlock .

(tell (sumodocumentation StartupBlock "A typically small instance of &%ComputerProgram
(a sequence of instructions that will run on a computer) whose function is
to load and initialize a typically larger instance of &%ComputerProgram
and start it running."))

;;  definition of startupOf

(tell (BinaryPredicate startupOf))
(tell (sumodocumentation startupOf "(&%startupOf ?STARTUP ?PROGRAM) holds just in
case an instance of &%StartupBlock ?STARTUP specifies a set of instructions
to start the ?PROGRAM."))

; "Each StartupBlock is a startup of some program" .

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Startup StartupBlock)
;; 	(exists (?Application)
;; 		(startupOf ?Startup ?Application)))

; "The startupBlock of an application starts the application" .

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(startupOf ?Startup ?Application)
;; 		(instance ?Process1 ComputerProcess)
;; 		(programRunning ?Process1 ?Startup)
;; 		(equal (WhenFn ?Process1) ?Time1))
;; 	(exists (?Process2 ?Time2)
;; 		(and
;; 			(instance ?Process2 ComputerProcess)
;; 			(programRunning ?Process2 ?Application)
;; 			(equal (WhenFn ?Process2) ?Time2)
;; 			(meetsTemporally ?Time1 ?Time2))))

;;  definition of StartupFn

(tell (UnarySumofunction StartupFn))
(tell (sumodocumentation StartupFn "(&%StartupFn ?Program) returns an instance of
&%StartupBlock which contains the instructions to start the ?Program."))

;;  definition of ShutdownBlock .

(tell (sumodocumentation ShutdownBlock "A typically small instance of
&%ComputerProgram whose function is to end a typically larger
instance of &%ComputerProgram."))

;;  definition of shutdownOf .

(tell (BinaryPredicate shutdownOf))
(tell (sumodocumentation shutdownOf "(&%shutdownOf ?SHUTDOWN ?PROGRAM) holds just
in case an instance of &%ShutdownBlock ?SHUTDOWN specifies a set of
instructions to end ?PROGRAM."))

; "ShutdownBlock is a shutdown of an application"

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Shutdown ShutdownBlock)
;; 	(exists (?Application)
;; 		(shutdownOf ?Shutdown ?Application)))

; "ShutdownBlock of an application ends the running version of the application"

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(shutdownOf ?Shutdown ?Application)
;; 		(instance ?Process1 ComputerProcess)
;; 		(programRunning ?Process1 ?Shutdown)
;; 		(equal (WhenFn ?Process1) ?Time1))
;; 	(exists (?Process2 ?Time2)
;; 		(and
;; 			(instance ?Process2 ComputerProcess)
;; 			(programRunning ?Process2 ?Application)
;; 			(equal (WhenFn ?Process2) ?Time2)
;; 			(meetsTemporally ?Time2 ?Time1))))

;;  definition of ShutdownFn

(tell (UnarySumofunction ShutdownFn))
(tell (sumodocumentation ShutdownFn "(&%ShutdownFn ?Program) returns an instance of
&%ShutdownBlock which contains the instructions to end ?PROGRAM."))

;;  definition of EnvironmentSoftwareAttribute .

(tell (sumodocumentation EnvironmentSoftwareAttribute "The class of attribute-rels which
correspond to environment variables.  Environment variables are defined
outside of a &%ComputerProgram, unlike ordinary variables that are
defined in the source code of the &%ComputerProgram. Typically, the
environment variable stores some value that many if not all
&%ComputerProgams will need when they execute. An example is the
environment variable PATH under Unix-like operating systems that stores
the &%ComputerDirectories where executable &%ComputerPrograms can be found.
Another example is the environment variable CLASSPATH for Java programs,
which stores the directory where Java class files can be found that will be
needed by any &%ComputerProgram written in Java."))

;;  definition of environmentAttributes .

(tell (sumodocumentation environmentAttributes "(&%environmentAttributes ?Program
?Attribute) holds if ?Attribute is an &%EnvironmentSoftwareAttribute
which describes the &%ComputerProgram ?Program."))

;; definition of ComputerInputDevice

(tell (sumodocumentation ComputerInputDevice "A peripheral device that generates
input for the computer such as a keyboard, scanner, or mouse."))

;; definition of ComputerOutputDevice

(tell (sumodocumentation ComputerOutputDevice "Any peripheral that presents
output from the computer, such as a screen or printer."))

;; definition of standardInputDevice

(tell (sumodocumentation  standardInputDevice "(&%standardInputDevice ?PROCESS
?DEVICE) holds just in case the DEVICE is the predefined input channel
with which the running version of the program PROCESS is initialised."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(programRunning ?Process ?Program)
;; 	(exists (?Device)
;; 		(standardInputDevice ?Process ?Device)))

;;  definition of standardOutputDevice .

(tell (sumodocumentation standardOutputDevice "(&%standardOutputDevice ?PROGRAM
?DEVICE) holds just in case the DEVICE is the predefined output channel
with which the running version of this program is initialised."))

; "The program of the process contains information about the standard
; output device of the process"

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(programRunning ?Process ?Program)
;; 	(exists (?Device)
;; 		(standardOutputDevice ?Process ?Device)))

;;  definition of standardErrorDevice .

(tell (sumodocumentation standardErrorDevice "(&%standardErrorDevice ?PROGRAM
?DEVICE) holds just in case the DEVICE is the predefined error channel
with which the running version of this program is initialised."))

; "The program of the process contains information about the standard
; error device of the process"

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(programRunning ?Process ?Program)
;; 	(exists (?Device)
;; 		(standardErrorDevice ?Process ?Device)))

;;  definition of hostOf


(tell (BinaryPredicate hostOf))
(tell (sumodocumentation hostOf "(hostOf ?SYSTEM ?COMPUTER) means that ?COMPUTER
is the host of the computational system ?SYSTEM."))

;;  definition of ProcessState

(tell (sumodocumentation ProcessState "The class of all the information required
for a &%ComputerProgram to run on a processor. It is a vector that
contains a pointer to the next program instruction to be executed as well
as the values of all intermediate and defined variables, the state of the
processor executing the program, and the allocated address space among
other data."))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;; 	(instance ?State ProcessState)
;; 	(exists (?Program)
;; 		(and
;; 			(instance ?Program ComputerProgram)
;; 			(forall (?Process)
;; 				(=>
;; 					(programRunning ?Process ?Program)
;; 					(represents ?State ?Process))))))

;;  definition of stateOfProcess

(tell (BinarySumorelation stateOfProcess))
(tell (sumodocumentation  stateOfProcess "(&%stateOfProcess ?PROCESS ?STATE) says
that ?STATE is a state of the &%ComputerProcess ?PROCESS."))

;;  definition of AutomaticApplication .

(tell (sumodocumentation AutomaticApplication "A program which is started
automatically, as opposed to an application started in response to
some condition becoming true."))

; "If an application is an automatic application, it is started when
; the software system is started".


;;  definition of RM_StartApplication

(tell (sumodocumentation RM_StartApplication  "A program started by a Resource
Management program, which determines if and where to start the
application."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?RM RM_StartApplication)
;; 	(exists (?Application ?Process ?RMCopy)
;; 		(and
;; 			(instance ?Application ComputerProgram)
;; 			(programCopy ?RMCopy ?RM)
;; 			(programRunning ?Process (StartupFn ?Application))
;; 			(agent ?Process ?RMCopy))))

;;  definition of ConsoleApplication .

(tell (ComputerProgram ConsoleApplication))
(tell (sumodocumentation ConsoleApplication "A Program which is started inside
an Xterm or other console."))

;;  definition of RMProgram .

(tell (sumodocumentation ResourceManagementProgram "The class of resource
management programs."))

;;  definition of rMProgram-of .

(tell (BinaryPredicate rMProgram-of))
(tell (sumodocumentation rMProgram-of "(&%rMProgram-of ?RM ?SYSTEM) means that
?RM is the resource management program of &%the SoftwareSystem ?SYSTEM."))

; "The resource management program of a software system controls
; applications in this system" .

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(rMProgram-of ?RM ?System)
;; 	(exists (?Application ?Process ?RMCopy)
;; 		(and
;; 			(part ?Application ?System)
;; 			(programCopy ?RMCopy ?RM)
;; 			(programRunning ?Process ?Application)
;; 			(agent ?Process ?RMCopy))))

;; definition of programCopy

(tell (AsymmetricSumorelation programCopy))
(tell (sumodocumentation programCopy "(&%programCopy ?File ?Program) means that
the &%ComputerFile ?File is one of the copies of the &%ComputerProgram
?Program."))

;;  definition of criticalityLevel.

(tell (BinaryPredicate criticalityLevel))
(tell (sumodocumentation criticalityLevel "(&%criticalityLevel ?PROGRAM ?INTEGER)
holds just in case ?INTEGER indicates the relative priority of ?PROGRAM
with respect to other applications within the &%SoftwareSystem."))

;;  definition of startupTimeDelay

(tell (BinarySumorelation startupTimeDelay))
(tell (sumodocumentation startupTimeDelay "(&%startupTimeDelay ?PROGRAM ?TIME)
says that ?TIME is the time to delay after the previous application
was started before starting the application ?PROGRAM."))

; "If an application has a startupTimeDelay of n seconds, then
; any process which runs after this application has a starting point
; n seconds later than the startup of this application."


;;  definition of Feedback

(tell (sumodocumentation Feedback "The class of all messages to a resource
management program from one of its processes."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(instance ?Feedback Feedback)
;; 	(exists (?RM ?Process ?Program)
;; 		(and
;; 			(rMProgram-of ?RM ?Program)
;; 			(programRunning ?Process ?Program)
;; 			(instance ?Send DataTransfer)
;; 			(patient ?Send ?Feedback)
;; 			(destination ?Send ?RM))))

;;  definition of processList

(tell (Predicate processSumolist))
(tell (VariableAritySumorelation processSumolist))
(tell (sumodocumentation processSumolist "The arguments of this relation are data
structures, each of which contains the information necessary for the
process already loaded by the operating system to execute on a processor."))

; "The processes in the list are ordered by the start time" .

;; sumo2loom is dropping the following statement because it uses
;; processList, which is a VariableArityRelation:
;; (=>
;; 	(and
;; 		(processList @ROW)
;;                 (inList ?Process1 (ListFn @ROW))
;;                 (inList ?Process2 (ListFn @ROW))
;;                 (equal (ListOrderFn (ListFn @ROW) ?Number1) ?Process1)
;;                 (equal (ListOrderFn (ListFn @ROW) ?Number2) ?Process2)
;;                 (lessThan ?Number1 ?Number2))
;; 	(earlier (WhenFn ?Process1) (WhenFn ?Process2)))

;;  definition of settlingTime

(tell (BinaryPredicate settlingTime))
(tell (sumodocumentation settlingTime "(&%settlingTime ?PROGRAM ?TIME) says that
?TIME represents seconds to delay after an action was taken with respect
to QoS."))

;;  definition of minimumReplications

(tell (BinaryPredicate minimumReplications))
(tell (sumodocumentation minimumReplications "(&%minimumReplications ?PROGRAM
?INTEGER) means that ?INTEGER represents the minimum copies of the
application ?PROGRAM required to be survivable, where a program is
survivable if the failure of one or more resources does not result
in the failure of the program.  Either long MTTF for the system as a
whole or short MTTR when failure occurs would improve the survivability
of a program."))

; "MinimumReplications is the mininum number of copies of the application
; involved in a running process".

;; sumo2loom is dropping the following statement because it uses
;; KappaFn, which has Formula in its domain:
;; (=>
;; 	(minimumReplications ?Application ?MinCopies)
;; 	(greaterThanOrEqualTo
;; 		(CardinalityFn
;; 		        (KappaFn ?Copy
;; 			        (programRunning ?Copy ?Application))) ?MinCopies))

;;  definition of maximumReplications

(tell (BinaryPredicate maximumReplications))
(tell (sumodocumentation maximumReplications "(&%maximumReplications ?PROGRAM ?INTEGER) means that
?INTEGER represents the maximum number of copies of this application which can be run
during a process."))

; "MaximumReplications is the maximum number of copies of the application
; allowed to run during a process".

;; sumo2loom is dropping the following statement because it uses
;; KappaFn, which has Formula in its domain:
;; (=>
;; 	(maximumReplications ?Application ?MaxCopies)
;; 	(greaterThanOrEqualTo ?MaxCopies
;; 			      (CardinalityFn
;; 					     (KappaFn ?Copy
;; 						      (programRunning ?Copy ?Application)))))


;; definition of IPAddress

(tell (sumodocumentation IPAddress "The Internet Protocol address; a numeric address such as 123.231.32.2 that
the sumodomain name server translates into a sumodomain name."))

;;  definition of ipAddressOf

(tell (BinaryPredicate ipAddressOf))
(tell (sumodocumentation ipAddressOf "(&%ipAddressOf ?HOST ?ADDRESS) holds if ?ADDRESS is the &%IPAddress of
the computer ?HOST."))

;;  definition of portNumber

(tell (BinaryPredicate portSumonumber))
(tell (sumodocumentation portSumonumber "(&%portSumonumber ?PROGRAM ?NUMBER) holds if ?NUMBER identifies a protocol
port, i.e. a TCP-IP software abstraction used to distinguish different applications providing
services within a single destination computer. The different ports on a host are identified by a
positive 16-bit number."))

;;  definition of processID .

(tell (BinaryPredicate processID))
(tell (sumodocumentation processID "(&%processID ?PROCESS ?NUMBER) holds if ?NUMBER is a unique number
generated by the operating system and used to refer to the &%ComputerProcess ?PROCESS.  There
is usually no significance to the numbers as they are reused as old processes die and new processes
are created."))

;;  definition of ProcessStatus .

(tell (sumodocumentation ProcessStatus "A class of attribute-rels. Each instance of &%ProcessStatus describes a
status of a &%Process, such as &%ProcessFailure, &%ProcessSuccess, etc."))

;;  definition of ProcessFailure .

(tell (ProcessStatus ProcessFailure))
(tell (sumodocumentation ProcessFailure "An attribute-rel that denotes the failure of the &%Process to achieve
its goal."))

;;  definition of ProcessSuccess .

(tell (ProcessStatus ProcessSuccess))
;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute ProcessSuccess ProcessFailure)
(tell (sumodocumentation ProcessSuccess "An attribute-rel that denotes the success of the &%Process to achieve
its goal."))

;;  definition of status .

(tell (sumodocumentation status "(&%status ?PROCESS ?STATUS) holds if ?STATUS is the current status of ?PROCESS."))

;; sumo2loom is dropping the following statement because it uses
;; hasPurpose, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(status ?Process ProcessFailure)
;; 		(hasPurpose ?Process ?Purpose))
;; 	(not (holdsDuring (ImmediatePastFn (WhenFn ?Process)) ?Purpose)))

;;  definition of ComputerComponent

(tell (sumodocumentation ComputerComponent "An instance of &%ComputerComponent is a
piece of computer hardware that has measurable performance characteristics
in terms of different units. Components include hard drives, the performance
of which can be measured in terms of BitsPerSecond required to transfer data
to and from the drive, network adapters, the performance of which can be
measured by &%PacketsPerSecond units of data transfered to and from the adapter,
and other common components like &%ComputerMemory and &%CentralProcessingUnit."))




;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Component ComputerComponent)
;; 	(exists (?Unit)
;; 		(unitMeasuringPerformance ?Component ?Unit)))

;;  definition of NetworkAdapter

(tell (sumodocumentation NetworkAdapter "A network adapter, also known as a Network
Interface Card or NIC, is a physical device installed in a computer on its
system bus. Its purpose is to connect to a specific type of network,
usually an ethernet or a token ring network."))

;; sumo2loom is dropping the following statement because it mentions
;; connected, which is linked to enigmatic Loom errors:
;; (=>
;; 	(instance ?NA NetworkAdapter)
;; 	(exists (?Net)
;; 		(and
;; 			(instance ?Net ComputerNetwork)
;; 			(connected ?NA ?Net))))

;;  definition of unitMeasuringPerformance .

(tell (BinaryPredicate unitMeasuringPerformance))
(tell (sumodocumentation unitMeasuringPerformance "(&%unitMeasuringPerformance ?COMPONENT
?UNIT) holds in case ?UNIT is an instance of &%UnitOfMeasure which is used to
measure the performance of ?COMPONENT."))

; "The performance of Hard Drives is measured in BitsPerSecond" .


; "The performance of network adapters is measured by packets/second" .


;;  definition of MonitoringProgram .

(tell (sumodocumentation  MonitoringProgram "A program which monitors performance
of an application, a component, etc."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Monitor MonitoringProgram)
;; 	(exists (?System ?Event ?MonitorCopy)
;; 		(and
;; 			(systemMeasured ?Event ?System)
;; 			(programCopy ?MonitorCopy ?Monitor)
;; 			(agent ?Event ?MonitorCopy))))

;; definition of systemMeasured

(tell (BinaryPredicate systemMeasured))
(tell (AsymmetricSumorelation systemMeasured))
(tell (sumodocumentation systemMeasured "(&%systemMeasured ?Event ?System) means that
?Event is an event of measuring the performance of the &%ComputationalSystem
?System."))

;;  definition of dataID .

(tell (BinaryPredicate dataID))
(tell (sumodocumentation dataID "(&%dataID ?PROGRAM ?NUMBER) holds if ?NUMBER is a small
number associated with an instance of &%MonitoringProgram."))

;;  definition of MeasuringPerformance .

(tell (sumodocumentation MeasuringPerformance "Each element of &%MeasuringPerformance
is an event of measuring the performance of an instance of &%ComputerComponent,
performed by a &%MonitoringProgram."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Event MeasuringPerformance)
;; 	(exists (?Program ?Copy)
;; 		(and
;; 			(instance ?Program MonitoringProgram)
;; 			(programCopy ?Copy ?Program)
;; 			(agent ?Event ?Copy))))

;;  definition of componentDataID .

(tell (QuintaryPredicate componentDataID))
(tell (sumodocumentation componentDataID "(&%componentDataID ?TIME ?COMPONENT ?INSTANCE
?UNIT ?NUMBER) holds if ?INSTANCE is an instance of ?COMPONENT, identified by
&%IDSumonumber ?NUMBER, and whose performance is measured by a &%UnitOfMeasure-ComputerPerformance ?UNIT. The timestamp ?TIME identifies the time when this
information was created."))






;;  definition of heartBeatRate .

;; DWF: harmonized with parent to resolve conflict
;; (domain heartBeatRate 1 ComputerProgram)
(tell (sumodocumentation heartBeatRate "(&%heartBeatRate ?Program ?Period) holds if
?Period is the period at which the ComputerProgram ?Program sends its heartbeat
to a monitoring process."))

;;  definition of MonitorConnectivityCmd .

(tell (sumodocumentation  MonitorConnectivityCmd "This is the command to get a list
of applications periodically."))

;;  definition of MonitorApplicationCmd

(tell (sumodocumentation MonitorApplicationCmd "This command is to change the monitoring
for any component for which a &%componentDataID was sent on initial connection."))

;;  definition of MonitorComponentCmd

(tell (sumodocumentation MonitorComponentCmd "This is the command to monitor any of the
generic components - hard drive, network, cpu, memory, etc." ))

;;  definition of performanceResult.

(tell (TernaryPredicate performanceResult))
(tell (sumodocumentation  performanceResult "(&%performanceResult ?EVENT ?COMPONENT
?NUMBER) holds if the performance of ?COMPONENT has a value ?NUMBER,
measured by ?EVENT, an instance of &%MeasuringPerformance."))

;;  definition of monitorComponentData .

(tell (TernaryPredicate monitorComponentData))
(tell (sumodocumentation monitorComponentData "(&%monitorComponentData ?TIME ?ID
?NUMBER) holds if at time ?TIME, a component with the &%IDSumonumber ?ID
has a performance of a value ?NUMBER."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(monitorComponentData ?Time1 ?ID ?Number)
;; 		(componentDataID ?Time2 ?Component ?Instance ?Unit ?ID))
;; 	(exists (?Event)
;; 		(and
;; 			(instance ?Event MeasuringPerformance)
;; 			(unitMeasuringPerformance ?Instance ?Unit)
;; 			(time ?Event ?Time1)
;; 			(performanceResult ?Event ?Instance ?Number))))

;;  definition of monitorConnectivityData .

(tell (BinarySumorelation monitorConnectivityData))
(tell (sumodocumentation  monitorConnectivityData "(&%monitorConnectivityData ?TIME
?IPADDRESS) is a relation between a timestamp ?TIME and an ?IP address."))

;;  definition of monitorApplicationData .

(tell (BinaryPredicate monitorApplicationData))
(tell (sumodocumentation monitorApplicationData "(&%monitorApplicationData ?TIME
?APPLICATION) holds if the time stamp ?TIME specifies the time at which
?APPLICATION is running."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(monitorApplicationData ?Time ?Application)
;; 	(exists (?Process)
;; 		(and
;; 			(programRunning ?Process ?Application)
;; 			(time ?Process ?Time))))

;; definition of Executable

(tell (Attribute Executable))
(tell (sumodocumentation Executable "Able to be run in its current format."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(exists (?Process)
;; 		(programRunning ?Process ?Program))
;; 	(property ?Program Executable))

;; definition of OperatingSystem

(tell (sumodocumentation OperatingSystem "The master control program that runs the
computer. It is the first program loaded when the computer is turned on,
and its main part, called the kernel, resides in memory at all times. It
may be developed by the vendor of the computer it's running in or by a
third party."))

;;  definition of settlingTime

(tell (BinaryPredicate settlingTime))
(tell (sumodocumentation settlingTime "(&%settlingTime ?PROGRAM ?TIME) says that
?TIME represents seconds to delay after an action was taken with respect
to QoS."))

;; definition of defaultNetwork.

(tell (BinaryPredicate defaultNetwork))
(tell (sumodocumentation defaultNetwork "(&%defaultNetwork ?SYSTEM ?NET) holds if
?NET is the default network of the &%HardwareSystem ?SYSTEM."))

;; definition of Solaris.

(tell (sumodocumentation Solaris "The class of all instances of Solaris , a
unix-based operating system for Sun SPARC computers. It includes the
Open Look and Motif graphical user interfaces, OpenWindows (the Sun
version of X Windows), DOS and Windows Emulation, and ONC networking."))

;; definition of numberOfCPUs.

(tell (BinaryPredicate numberOfCPUs))
(tell (sumodocumentation numberOfCPUs "(&%numberOfCPUs ?COMPUTER ?INTEGER) means
that the number of CPUs for the host ?COMPUTER is equal to INTEGER."))

;; definition of hardwareType.

(tell (sumodocumentation hardwareType "(&%hardwareType ?TYPE ?COMPUTER) means that
TYPE represents the computer vendor model name, as well as the version
of the product."))


;; productVersion appears in this implication but is never defined.
;; (=>
;; 	(and
;; 		(hardwareType ?Type ?Computer)
;; 		(productVersion ?Version ?Computer))
;; 	(subsumesContentInstance ?Type ?Version))

;; definition of thresholdOf.

(tell (BinaryPredicate thresholdOf))

;; definition of benchmarkPerformance.

(tell (TernaryPredicate benchmarkPerformance))
(tell (sumodocumentation benchmarkPerformance "(&%benchmarkPerformance ?SYSTEM
?TEST ?NUMBER) holds if ?NUMBER is a benchmark for measuring the performance
of an instance of a &%ComputationalSystem."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(benchmarkPerformance ?System ?Test ?Number)
;; 	(exists (?Event)
;; 		(and
;; 			(instance ?Event MeasuringPerformance)
;; 			(performanceResult ?Event ?System ?Number))))

;; definition of bandwidthOf.

(tell (BinaryPredicate bandwidthOf))
(tell (sumodocumentation bandwidthOf "(&%bandwidthOf ?NET ?BANDWIDTH) holds if
?BANDWIDTH is the amount of data which can be sent through an instance
of a &%ComputerNetwork ?NET, measured in bits per second."))

;; definition of priority.

(tell (BinaryPredicate priority))
(tell (sumodocumentation priority "(&%priority ?SYSTEM ?QUANTITY) means that the
priority of the ?SYSTEM is characterized by a &%PriorityAttribute, such
as &%HighPriority or &%LowPriority."))

;; definition of PriorityAttribute

(tell (sumodocumentation PriorityAttribute "A class of attribute-rels which describe
priorities of &%ComputationalSystems."))

(tell (PriorityAttribute HighPriority))
(tell (sumodocumentation HighPriority "Used to indicate that a &%ComputationalSystem
has a high priority."))

(tell (PriorityAttribute LowPriority))
(tell (sumodocumentation LowPriority "Used to indicate that a &%ComputationalSystem
has a low priority."))

;; definition of ComputerPath.

(tell (sumodocumentation ComputerPath "An instance of &%ComputerPath is a series
of programs that connects input devices, typically sensors, to output
devices, typically actuators."))

;; definition of softwarePath.

(tell (BinaryPredicate softwarePath))
(tell (sumodocumentation softwarePath "(&%softwarePath ?SYSTEM ?PATH) means that
?PATH is a computer path for the instance of &%SoftwareSystem ?SYSTEM."))

;; definition of SoftwareAttribute

(tell (sumodocumentation SoftwareAttribute "The class of all attribute-rels that are
specific to &%SoftwareSystems."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Attribute ComputerPathAttribute)
;; 	(exists (?Path)
;; 		(and
;; 			(instance ?Path ComputerPath)
;; 			(property ?Path ?Attribute))))

;; definition of ComputerPathAttribute.

(tell (sumodocumentation ComputerPathAttribute "The class of all attribute-rels that are
specific to &%ComputerPaths."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Attribute ComputerPathAttribute)
;; 	(exists (?Path)
;; 		(and
;; 			(instance ?Path ComputerPath)
;; 			(property ?Path ?Attribute))))

;; definition of PathImportanceFunction.

(tell (ComputerPathAttribute PathImportanceSumofunction))
(tell (sumodocumentation PathImportanceSumofunction  "The attribute-rel which denotes that
the path importance is defined by the dynamic library procedure
&%pathImportanceSumofunction. This functions passes arguments for priority
and current time and returns an integer that represents importance."))

;; definition of Scalable.

(tell (sumodocumentation Scalable "The attribute-rel which denotes that the path is
scalable, i.e. the applications in the path can be replicated to meet
realtime QoS requirements."))

;; definition of DynamicDataStream.

(tell (sumodocumentation DynamicDataStream "The attribute-rel which denotes that the
path data stream type is dynamic, i.e. the time changes but the data
stream follows a pattern."))

;; definition of StochasticDataStream.

(tell (sumodocumentation  StochasticDataStream "The attribute-rel which denotes that
the time between data or groups of data changes according to no
discernible pattern."))

;; definition of DeterministicDataStream.

(tell (sumodocumentation DeterministicDataStream "The attribute-rel which denotes that
the data stream is conceived as a stream of one datum after another, and
each datum or identifiable group of data is separated by a constant of
time."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Path ComputerPath)
;; 		(property ?Path DynamicDataStream))
;; 	(not (property ?Path StochasticDataStream)))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Path ComputerPath)
;; 		(property ?Path DynamicDataStream))
;; 	(not (property ?Path DeterministicDataStream)))

;; definition of ContinuousPath

(tell (sumodocumentation  ContinuousPath "The attribute-rel which denotes that the
path type is continuous, as opposed to transient or quasiconstinuous
paths. A continuous path handles a stream of data arriving at a comment
of rate."))

;; definition of TransientPath.

(tell (sumodocumentation TransientPath "An attribute-rel which applies to computer
paths which handle random events."))

;; definition of QuasicontinuousPath.

(tell (sumodocumentation  QuasicontinuousPath "An attribute-rel which applies to
computer paths which handle random events, which initiate a bounded
stream of data arriving at a comment of rate, which the path must
process."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Path ComputerPath)
;; 		(property ?Path ContinuousPath))
;; 	(not (property ?Path TransientPath)))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Path ComputerPath)
;; 		(property ?Path ContinuousPath))
;; 	(not (property ?Path QuasicontinuousPath)))

;; definition of simpleDeadline.

(tell (BinaryPredicate simpleDeadline))
(tell (sumodocumentation  simpleDeadline "(&%simpleDeadline ?PATH ?TIME)holds if
?TIME is the maximum end-to-end path latency during a cycle of a
continuous or quasicontinuous path or during the activation of a transient
path."))

;; definition of batchLatency.

(tell (BinaryPredicate batchLatency))
(tell (sumodocumentation batchLatency "(&%batchLatency ?PATH ?TIME)holds if ?TIME
is the maximum allowed latency for all cycles of a quasicontinuous path."))

;; definition of batchInterArrival.

(tell (BinaryPredicate batchInterArrival))
(tell (sumodocumentation batchInterArrival "(&%batchInterArrival ?PATH ?TIME)
holds if ?TIME is the maximum allowable time between processing of a
particular element of a continuous or quasicontinuous path's data
stream in successive cycles."))

;; definition of qoSSlack.

(tell (TernarySumorelation qoSSlack))
(tell (sumodocumentation qoSSlack "(&%qoSSlack ?PATH ?MIN ?MAX) holds if ?PATH
has a realtime QoS maximum slack percentage of ?MAX and minimum of
?MIN."))

;; definition of slidingWindowSize.

(tell (BinaryPredicate slidingWindowSize))
(tell (sumodocumentation slidingWindowSize "(&%slidingWindowSize ?PATH ?N) holds
if PATH has a realtime QoS sliding window size of ?N measured samples."))

;; definition of dataStreamSlack.

(tell (BinaryPredicate dataStreamSlack))
(tell (sumodocumentation dataStreamSlack "(&%dataStreamSlack ?PATH ?N) means that
a continuous or quasicontinuous path ?PATH should be able to process ?N
additional data items at any time."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(dataStreamSlack ?Path ?Number)
;; 	(or
;; 		(property ?Path  ContinuousPath)
;; 		(property ?Path QuasicontinuousPath)))

;; definition of dependencyType.

(tell (BinaryPredicate dependencyType))
(tell (sumodocumentation dependencyType "(&%dependencyType ?PROGRAM ?TYPE) means
that ?PROGRAM has a dependency type ?TYPE, where ?TYPE can be either
&%StartupBlock or &%ShutdownBlock."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(dependencyType ?Program ?Type)
;; 	(or
;; 		(equal ?Type StartupBlock)
;; 		(equal ?Type ShutdownBlock)))

;; definition of Restartable.

(tell (SoftwareAttribute Restartable))
(tell (sumodocumentation Restartable "The attribute-rel which denotes that a program
can be restarted."))

;; definition of hasDependency.

(tell (BinaryPredicate hasDependency))
(tell (sumodocumentation hasDependency "(&%hasDependency ?PROGRAM1 ?PROGRAM2)
holds if ?PROGRAM1 is dependent on the application ?PROGRAM2."))

;; definition of dependencyDelay.

(tell (BinaryPredicate dependencyDelay))
(tell (sumodocumentation dependencyDelay "if the dependency type is &%StartupBlock,
then (&%dependencyDelay ?PROGRAM ?TIME) means that the application
?PROGRAM can only be started after a dependency delay of ?TIME after the
startup of the application. If the dependency type is &%ShutdownBlock, then
(&%dependencyDelay ?PROGRAM ?TIME) means that the application ?PROGRAM can
only be stopped after a dependency delay of ?TIME after the application
is stopped."))

;; Logic error -- ?Time variable roams free in consequent.
;;(=>
;;	(exists (?Time1 ?Time2 ?Time)
;;		(and
;;			(dependencyDelay ?Program1 ?Delay)
;;			(dependencyType ?Program1 StartupBlock)
;;			(hasDependency ?Program1 ?Program2)
;;			(instance ?Process1 ComputerProcess)
;;			(programRunning ?Process1 ?Program1)
;;			(instance ?Process2 ComputerProcess)
;;			(programRunning ?Process2 ?Program2)
;;			(equal (WhenFn ?Process2) ?Time2)
;;			(starts ?Time2 ?Time)
;;			(equal (WhenFn ?Process1) ?Time1)
;;			(equal (EndFn ?Time) (BeginFn ?Time1))))
;;	(duration ?Time ?Delay))
;;
;;(=>
;;	(exists (?Time1 ?Time2 ?Time)
;;		(and
;;			(dependencyDelay ?Program1 ?Delay)
;;			(dependencyType ?Program1 ShutdownBlock)
;;			(hasDependency ?Program1 ?Program2)
;;			(instance ?Process1 ComputerProcess)
;;			(programRunning ?Process1 ?Program1)
;;			(instance ?Process2 ComputerProcess)
;;			(programRunning ?Process2 ?Program2)
;;			(equal (WhenFn ?Process2) ?Time2)
;;			(finishes ?Time ?Time1)
;;			(equal (WhenFn ?Process2) ?Time2)
;;			(equal (BeginFn ?Time) (EndFn ?Time2))))
;;	(duration ?Time ?Delay))

;; definition of ReplicationsOnSameHostOK.

(tell (SoftwareAttribute ReplicationsOnSameHostOK))
(tell (sumodocumentation ReplicationsOnSameHostOK "The attribute-rel which denotes that
a program can be restarted on the same host."))


;; definition of commandLineArguments.

(tell (BinaryPredicate commandLineArguments))
(tell (sumodocumentation commandLineArguments "(&%commandLineArguments ?PROGRAM
?LIST) means that the application ?PROGRAM requires command line
arguments, as specified in ?LIST."))

;; definition of ScalabilityCombining.

(tell (SoftwareAttribute ScalabilityCombining))
(tell (sumodocumentation ScalabilityCombining "The attribute-rel which denotes that
an application can combine its input stream from different preceding
applications or devices for greater scalability."))

;; definition of ScalabilitySplitting.

(tell (SoftwareAttribute ScalabilitySplitting))
(tell (sumodocumentation ScalabilitySplitting "The attribute-rel which denotes that
a program can split its output stream to different succeeding
applications or devices for greater scalability."))

;; definition of InitialProfileFn.

(tell (UnarySumofunction InitialProfileFn))
(tell (sumodocumentation InitialProfileFn "The function which returns as its value
the initial profile of the program, i.e. a report of its execution
characteristics."))

;; definition of CPUUtilizationFn.

(tell (sumodocumentation  CPUUtilizationFn "(&%CPUUtilizationFn ?PROGRAM) refers to
the percentage of time the CPU is used by an application ?PROGRAM."))

; definition of RealtimeSystem

(tell (sumodocumentation RealtimeSystem "An  computer-controlled system, the
correct operation of which depends on meeting specified timing
constraints."))




; definition of RealtimeSystemAttribute

(tell (sumodocumentation RealtimeSystemAttribute "The class of &%Attributes which
describe instances of the class &%RealtimeSystem."))

; definition of SystemBehaviorAttribute

(tell (sumodocumentation SystemBehaviorAttribute "A subclass of
&%RealtimeSystemAttribute, which includes the following &%Attributes:
&%Periodic-SystemBehavior, &%Transient-SystemBehavior, and
&%Hybrid-SystemBehavior."))

; definition of systemBehavior

(tell (sumodocumentation systemBehavior "(&%systemBehavior ?System ?Attribute)
holds if ?Attribute is a SystemBehaviorAttribute which describes the
&%RealtimeSystem ?System."))

; definition of Periodic-SystemBehavior

(tell (sumodocumentation Periodic-SystemBehavior "An instance of the class
&%RealtimeSystem is described as a system with &%Periodic-SystemBehavior
when it is activated at regular intervals."))

; definition of Transient-SystemBehavior

(tell (sumodocumentation Transient-SystemBehavior "An instance of the class
&%RealtimeSystem shows &%Transient-SystemBehavior when it is
activated by sporadic events."))

; definition of Hybrid-SystemBehavior

(tell (subAttribute Hybrid-SystemBehavior Transient-SystemBehavior))
(tell (subAttribute Hybrid-SystemBehavior Periodic-SystemBehavior))
(tell (sumodocumentation Hybrid-SystemBehavior "An instance of the class
&%RealtimeSystem shows &%Hybrid-SystemBehavior if it is
activated by transient events, i.e. it is executed at regular
intervals when activated, and is deactivated by action completion."))

; definition of DesignPatternAttribute

(tell (sumodocumentation DesignPatternAttribute "This is a subclass of
&%RealtimeSystemAttribute, which includes &%Guidance-DesignPattern,
&%Initiation-DesignPattern, and &%Assessment-DesignPattern."))

; definition of designPattern

(tell (sumodocumentation designPattern "(&%designPattern ?System ?Attribute) holds
if ?Attribute is a &%DesignPatternAttribute which describes the
&%RealtimeSystem ?System."))

; definition of Guidance-DesignPattern

(tell (sumodocumentation Guidance-DesignPattern "Instances of &%RealtimeSystems
are described as systems with &%Guidance-DesignPattern if they consist
of sensors connected to a software module that filters data from the
sensors and sends the filtered data to a software module that evaluates
the filtered data and sends instructions to a software module that
commands actuators.  The design pattern is an event source that produces
events and a data source that produces data, both executing in parallel
and handled by a single event-driven periodic data handler.  The two
separate input streams have fundamentally different characteristics.
The event stream is necessarily asychronous, or transient.  Once an
event is sensed, the handler accepts data from the data stream, which
has an invariant cycle time.  There are two deadlines for a real-time
guidance system.  The period deadline is the time to process all elements
in the data stream once and generate an actuator command.  The action
completion deadline is the time to guide the actuator to completion of
the action."))


; definition of Initiation-DesignPattern

(tell (sumodocumentation Initiation-DesignPattern "An instance of the class
&%RealtimeSystem has &%Initiation-DesignPattern if it consists of
one software module and the actuators it commands.  The design pattern
is an event source which produces events for an event handler.  The
event source is typically an evaluate-and-decide software module.
The event stream is necessarily asychronous, or transient.  The arrival
rate of events may vary and is unbounded.  Events may be either
homogeneous or heterogeneous.  The workload per event for homogeneous
events is constant.  The workload per event for heterogeneous events
is a function of each event type.  There is one deadline for real-time
action initiation systems.  It is the upper bound on the time to
generate a command for the actuator."))


; definition of Assessment-DesignPattern

(tell (sumodocumentation Assessment-DesignPattern "An instance of the class
&%RealtimeSystem has &%Initiation-DesignPattern if it consists of
sensors connected to a software module that filters data from the
sensors and sends the filtered data to another software module that
evaluates the filtered data and sends decisions to a subsystem.
The design pattern is a data source that produces a data stream for
a data handler.  The data source is typically a periodically sampled
collection of sensors.  The data stream's size may vary and is
unbounded.  Data may be either homogeneous or heterogeneous.  The
workload per data element for homogeneous data is constant.  The
workload per data element for heterogeneous data is a function of
each element type.  There is one deadline for real-time situation
assessment systems.  It is the upper bound on the time to process
all elements in the data stream once."))

; definition of TaskRelationAttribute

(tell (sumodocumentation TaskSumorelationAttribute "This is a subclass of
&%RealtimeSystemAttribute, which includes &%Independent-TaskSumorelation
and &%Dependent-TaskSumorelation."))

; definition of taskRelation

(tell (sumodocumentation taskSumorelation "(&%taskSumorelation ?System ?Attribute) holds
if ?Attribute is a &%TaskSumorelationAttribute which describes the
&%RealtimeSystem ?System."))

; definition of Independent-TaskRelation

(tell (sumodocumentation Independent-TaskSumorelation "An instance of &%RealtimeSystem
is described as &%Independent-TaskSumorelation if its correct execution
does not depend on the inputs from any other function, the execution state
of any other function, or the acceptance of its outputs by any other
function."))

; definition of Dependent-TaskRelation

(tell (TaskSumorelationAttribute Dependent-TaskSumorelation))
(tell (sumodocumentation Dependent-TaskSumorelation "An instance of &%RealtimeSystem
is described as &%Dependent-TaskSumorelation if it depends on at least one
other function in the system; that is, its correct execution depends on
the input from another function, the execution state of another function,
or the acceptance of its outputs by another function."))

; definition of FormOfAdaptationAttribute

(tell (sumodocumentation FormOfAdaptationAttribute "A subclass of
&%RealtimeSystemAttribute, which includes &%Precision-FormOfAdaptation,
&%Slack-FormOfAdaptation, &%Concurrency-FormOfAdaptation, and
&%ResourceAllocation-FormOfAdaptation."))

; definition of formOfAdaptation

(tell (sumodocumentation formOfAdaptation "(&%formOfAdaptation ?System ?Attribute)
holds if ?Attribute is a &%FormOfAdaptationAttribute which describes the
&%RealtimeSystem ?System."))

; definition of Precision-FormOfAdaptation



; definition of Slack-FormOfAdaptation

(tell (sumodocumentation Slack-FormOfAdaptation "The attribute-rel &%Slack-FormOfAdaptation
applies to real-time systems that are designed and implemented with enough
resource overhead that the system can always adapt by utilizing the overhead
without complicated decision making."))

; definition of Concurrency-FormOfAdaptation

(tell (sumodocumentation Concurrency-FormOfAdaptation "This attribute-rel applies to
real-time systems that are designed and implemented so that the system
can adapt by replicating the system components and executing them
concurrently."))

; definition of ResourceAllocation-FormOfAdaptation

(tell (sumodocumentation ResourceAllocation-FormOfAdaptation "This attribute-rel applies
to real-time systems that are designed and implemented so that the system
can adapt under the control of a resource allocation manager like Desiderata."))

; definition of TimingRequirementAttribute

(tell (sumodocumentation TimingRequirementAttribute "A subclass of
&%RealtimeSystemAttribute which includes &%ComplexityAttribute,
&%StrictnessAttribute, and &%AbstractionLevelAttribute."))

; definition of granularity

(tell (BinaryPredicate granularity))
(tell (sumodocumentation granularity  "Granularity is a sub-sumoproperty of the
timing requirements sumoproperty of real-time systems.  Granularity is
defined by how a timing requirement is specified in units of time."))

; definition of ComplexityAttribute

(tell (sumodocumentation ComplexityAttribute "A subclass of
&%TimingRequirementAttribute, which includes
&%MultipleRequirement-Complexity and &%SingleRequirement-Complexity."))

; definition of complexity

(tell (sumodocumentation complexity "(&%complexity ?System ?Attribute) holds if
?Attribute is a &%TimingRequirementAttribute which describes the
&%RealtimeSystem ?System."))

; definition of SingleRequirement-Complexity

(tell (sumodocumentation SingleRequirement-Complexity  "An attribute-rel that  describes
instances of &%RealtimeSystems which require a single timing requirement,
either a bound for completion time for systems with
&%Transient-SystemBehavior or cycle deadline for systems with
&%Periodic-SystemBehavior."))



; definition of MultipleRequirement-Complexity

(tell (sumodocumentation MultipleRequirement-Complexity "An attribute-rel that describes
instances of &%RealtimeSystems which require multiple timing requirements,
both a bound for completion time for its transient behavior and a cycle
deadline for its periodic behavior."))


; definition of StrictnessAttribute

(tell (sumodocumentation StrictnessAttribute "This is a subclass of
&%TimingRequirementAttribute, which includes &%Hard-Strictness,
&%Firm-Strictness, &%Soft-Strictness, &%Importance-Strictness,
&%Utility-Strictness, and &%Hybrid-Strictness"))

; definition of strictness

(tell (sumodocumentation strictness "(&%strictness ?System ?Attribute) holds if
the &%StrictnessAttribute ?Attribute describes the &%RealtimeSystem
?System."))

; definition of Hard-Strictness

(tell (sumodocumentation Hard-Strictness "An attribute-rel that applies to a
&%RealtimeSystem just in case all deadlines are met."))

; definition of Firm-Strictness

(tell (sumodocumentation Firm-Strictness "An attribute-rel that applies to a
&%RealtimeSystem just in case a fixed percentage of requirements
is met."))

; definition of Soft-Strictness

(tell (sumodocumentation Soft-Strictness "An attribute-rel that applies to a
&%RealtimeSystem just in case it  maximizes the number of timing
requirements like deadlines that are met but does not guarantee that
all such requirements will be met or any fixed percentage of
requirements will be met."))

; definition of Importance-Strictness

(tell (sumodocumentation Importance-Strictness "An attribute-rel that applies to a
&%RealtimeSystem just in case it is designed and implemented to meet
the more important requirements first."))

; definition of Utility-Strictness

(tell (sumodocumentation Utility-Strictness "An attribute-rel that applies to a
&%RealtimeSystem just in case it is designed and implemented to use
a utility-computing function, which is applied to competing timing
requirements to determine which should be met because meeting the
requirement produces higher utility as defined by the function."))

; definition of Hybrid-Strictness

(tell (sumodocumentation Hybrid-Strictness "An attribute-rel that applies to a
&%RealtimeSystem just in case the strictness of the system is a
combination of &%Hard/Firm/Soft-Strictness with &%Importance-Strictness
or a combination of &%Utility-Strictness with &%Importance-Strictness."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(strictness ?System Hybrid-Strictness)
;; 	(or
;; 		(and
;; 			(strictness ?System Importance-Strictness)
;; 			(strictness ?System Utility-Strictness))
;; 		(and
;; 			(strictness ?System Importance-Strictness)
;; 			(strictness ?System Hard-Strictness))
;; 		(and
;; 			(strictness ?System Importance-Strictness)
;; 			(strictness ?System Firm-Strictness))
;; 		(and
;; 			(strictness ?System Importance-Strictness)
;; 			(strictness ?System Soft-Strictness))))

; definition of AbstractionLevelAttribute

(tell (sumodocumentation AbstractionLevelAttribute "This is a subclass of
&%TimingRequirementAttribute, which includes &%Instrument-AbstractionLevel,
&%Method-AbstractionLevel, &%Object-AbstractionLevel, &%Task-AbstractionLevel,
and &%TaskGroup-AbstractionLevel."))

; definition of abstractionLevel


; definition of Instrument-AbstractionLevel

(tell (sumodocumentation Instrument-AbstractionLevel "The attribute-rel
&%Instrument-AbstractionLevel is the lowest level of abstraction,
which can be used to describe a real-time system or subsystem."))

; definition of Method-AbstractionLevel

(tell (sumodocumentation Method-AbstractionLevel  "The attribute-rel
&%Method-AbstractionLevel is the next to the lowest level of
abstraction that can be used to describe a real-time system or
subsystem.  This is at the level of describing every callable
function (or method in an object-oriented language) implemented
in software."))

; definition of Object-AbstractionLevel

(tell (sumodocumentation Object-AbstractionLevel "The attribute-rel
&%Object-AbstractionLevel is immediately above the attribute-rel
&%Method-AbstractionLevel and can be used to describe a real-time
system or subsystem.  This is at the level of describing every software
object that can be created from a class together with its data structures
and methods (which define the interface for manipulating the object)."))

; definition of Task-AbstractionLevel

(tell (sumodocumentation Task-AbstractionLevel "The attribute-rel
&%Task-AbstractionLevel is immediately above the attribute-rel
&%Object-AbstractionLevel and can be used to describe a real-time
system or subsystem.  This is at the level of describing the major
tasks that are carried out by the real-time systems and are typically
executable as individual processes.  The description of a task would
consist of listing all the software objects used to perform the task."))

; definition of TaskGroup-AbstractionLevel

(tell (sumodocumentation TaskGroup-AbstractionLevel "The attribute-rel
&%TaskGroup-AbstractionLevel is immediately above the attribute-rel
&%Task-AbstractionLevel and can be used to describe a real-time
system or subsystem This is at the level of describing groups of
tasks which are related or connected by the real-time systems and
are typically part of a concurrently executing path."))

;; definition of memorySize

(tell (sumodocumentation memorySize "(&%memorySize ?System ?Size) holds if
?Size is the required memory size for the &%ComputationalSystem
?System."))

;; definition of Sensor

(tell (sumodocumentation Sensor "&%Sensors include software that measures any
attribute-rel of executing computer programs or collections of executing
programs, such as CPU utilization, aka load, memory utilization, I/O,
overall task performance, network load and latency, etc."))

;; definition of UniformResourceIdentifier

;; sumo2loom is dropping the following statement because it uses
;; exhaustiveDecomposition, which is a VariableArityRelation:
;; (exhaustiveDecomposition UniformResourceIdentifier UniformResourceLocator UniformResourceName)
(tell (sumodocumentation UniformResourceIdentifier  "A &%UniformResourceIdentifier
(URI) is a compact string of characters for identifying an abstract or
physical resource. A URI can be further classified as a locator, a name,
or both (source: http://www.ietf.org/rfc/rfc2396.txt)."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?URI UniformResourceIdentifier)
;; 	(exists (?Resource)
;; 		(and
;; 			(instance ?Resource Resource)
;; 			(refers ?URI ?Resource))))

;; definition of UniformResourceLocator

(tell (sumodocumentation UniformResourceLocator  "The term &%UniformResourceLocator
(URL) refers to the Sumosubset of URI that identify resources via a
representation of their primary access mechanism (e.g., their network
location), rather than identifying the resource by name or by some other
attribute-rel(s) of that resource (source: http://www.ietf.org/rfc/rfc2396.txt)."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?URL UniformResourceLocator)
;; 	(exists (?Address)
;; 		(and
;; 			(instance ?Address IPAddress)
;; 			(represents ?URL ?Address))))

;; definition of UniformResourceName

(tell (sumodocumentation UniformResourceName "The term UniformResourceName (URN)
refers to the Sumosubset of URI that are required to remain globally unique
and persistent even when the resource ceases to exist or becomes
unavailable (source: http://www.ietf.org/rfc/rfc2396.txt)."))

;; definition of DataSink

(tell (sumodocumentation ComputerHardware "A device or part of the computer that
receives data."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Sink DataSink)
;; 	(exists (?Transfer)
;; 		(and
;; 			(instance ?Transfer DataTransfer)
;; 			(destination ?Transfer ?Sink))))

;; definition of ComputerUser

(tell (sumodocumentation ComputerUser "Any individual who interacts with a
computer."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?User ComputerUser)
;; 	(exists (?Computer)
;; 		(and
;; 			(instance ?Computer Computer)
;; 			(uses ?User ?Computer))))

;; definition of UserRequest

(tell (sumodocumentation UserRequest "A request made by a &%ComputerUser, such as
looking up a customer record."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Request UserRequest)
;; 	(exists (?User)
;; 		(and
;; 			(instance ?User ComputerUser)
;; 			(agent ?Request ?User))))

;; definition of ComputerResponse

(tell (sumodocumentation ComputerResponse "A &%ComputerProcess which attempts to
comply with a user's request."))

;; definition of responseTo

(tell (BinaryPredicate responseTo))
(tell (sumodocumentation responseTo "(&%responseTo ?Response ?Request) means that
?Response is a &%ComputerResponse to the &%UserRequest ?Request."))

;;definition of responseTime

(tell (BinaryPredicate responseTime))
(tell (sumodocumentation responseTime "The time it takes for the computer to comply
with a user's request, such as looking up a customer record."))


;; definition of responseRate

(tell (sumodocumentation responseRate "(&%responseRate ?Response ?Period) means
that ?Period is the period at which the computer sends its ?Response."))

;; definition of requestRate

(tell (sumodocumentation requestRate "(&%requestRate ?Request ?Period) means that
?Period is the period at which the user sends its ?Request."))

;; definition of Multitasking

(tell (sumodocumentation Multitasking "The running of two or more programs in one
computer at the same time. The number of programs that can be effectively
multitasked depends on the type of multitasking performed (preemptive vs
cooperative), CPU speed and memory and disk capacity."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Process Multitasking)
;; 	(exists (?Program1 ?Program2)
;; 		(and
;; 			(programRunning ?Process ?Program1)
;; 			(programRunning ?Process ?Program2)
;; 			(not (equal ?Program1 ?Program2)))))

;; definition of ComputerTask

(tell (sumodocumentation ComputerTask "In a multitasking environment, an
independently running program or subprogram. Each task is assigned
a task number."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Task ComputerTask)
;; 	(exists (?Program ?Process)
;; 		(and
;; 			(part ?Task ?Process)
;; 			(instance ?Process Multitasking)
;; 			(programRunning ?Task ?Program))))

;; definition of ComputerResource

(tell (sumodocumentation ComputerResource "One element of hardware, software or data
that is part of a larger system.  For example, network resources are the
available servers and printers in the network. Software resources can be
programs, utilities or even smaller elements within a program. Data
resources are the files and databases that can be accessed."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 
;; 
;; 	(instance ?Resource ComputerResource)
;; 	(exists (?System)
;; 		(and
;; 			(instance ?System ComputationalSystem)
;; 			(part ?Resource ?System))))

;; definition of NetworkResource

(tell (sumodocumentation NetworkResource "Network resources are the available
servers and printers in the network."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Resource NetworkResource)
;; 	(or
;; 		(instance ?Resource Server)
;; 		(instance ?Resource Printer)))

;; definition of Printer

(tell (sumodocumentation Printer "A device that converts computer output into
printed images."))

;; definition of Server

(tell (sumodocumentation Server "A computer in a network shared by multiple users.
The term may refer to both the hardware and software or just the software
that performs the service."))

;; definition of load

(tell (sumodocumentation load "In performance measurement, the current use of a
system as a percentage of total capacity."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(load ?System ?Load)
;; 	(exists (?Event)
;; 		(performanceResult ?Event ?System ?Load)))

;; definition of ComputerData

(tell (sumodocumentation ComputerData "The term &%ComputerData refers to files
and databases, text documents, and images."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Data ComputerData)
;; 	(exists (?Hardware)
;; 		(and
;; 			(instance ?Hardware ComputerHardware)
;; 			(located ?Data ?Hardware))))

;; definition of Image

(tell (sumodocumentation Image "A picture (graphic)."))

;; definition of Database

(tell (sumodocumentation Database "A set of related files that is created and
managed by a database management system (DBMS)."))

;; definition of dataProcessed

(tell (sumodocumentation dataProcessed "The data being processed during a
&%ComputerProcess."))

;; definition of Abort

(tell (sumodocumentation Abort "To exit a function or application without saving
any data that has been changed."))

;; definition of processAborted

(tell (BinaryPredicate processAborted))
(tell (AsymmetricSumorelation processAborted))
(tell (sumodocumentation processAborted "(&%processAborted ?Abort ?Process) means
that the &%ComputerProcess ?Process is aborted as the result of ?Abort."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(processAborted ?Abort ?Process)
;; 		(dataProcessed ?Process ?Data))
;; 	(not (exists (?Save)
;; 	     (and
;; 		(instance ?Save DataSaving)
;; 		(dataProcessed ?Save ?Data)))))

;; definition of DataSaving

(tell (sumodocumentation DataSaving "A process of copying the document, record or
image being worked on onto a storage medium. Saving updates the file by
writing the data that currently resides in memory (RAM) onto disk or tape.
Most applications prompt the user to save data upon exiting."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Save DataSaving)
;; 	(exists (?Data)
;; 		(dataProcessed ?Save ?Data)))

;; definition of DataCompression

(tell (sumodocumentation DataCompression "Encoding data to take up less storage
space."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(instance ?Compression DataCompression)
;; 		(dataProcessed ?Compression ?Data)
;; 		(holdsDuring (ImmediatePastFn (WhenFn ?Compression))
;; 			     (memorySize ?Data (MeasureFn ?Memory ?Measure)))
;; 		(holdsDuring (ImmediateFutureFn (WhenFn ?Compression))
;; 			     (memorySize ?Data (MeasureFn ?NewMemory ?Measure))))
;; 
;; 	(lessThan ?NewMemory ?Memory))

;; definition of ProcessTask

(tell (sumodocumentation ProcessTask "A function to be performed."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Task ProcessTask)
;; 	(exists (?Process)
;; 		(task ?Process ?Task)))

;; definition of task

(tell (BinaryPredicate task))
(tell (AsymmetricSumorelation task))
(tell (sumodocumentation task "(&%task ?Process ?Task) means that ?Task is a function to
be performed by the &%ComputerProcess ?Process."))

;; definition of UsingAResource

(tell (sumodocumentation UsingAResource "A &%ComputerProcess which requires access to a
&%ComputerResource."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Using UsingAResource)
;; 	(exists (?Resource)
;; 		(resourceUsed ?Using ?Resource)))



;; definition of ReusingAResource

(tell (sumodocumentation ReusingAResource "To use the same resource again."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Using ReusingAResource)
;; 	(exists (?Resource)
;; 		(resourceUsed ?Using ?Resource)))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Reusing ReusingAResource)
;; 		(resourceUsed ?Reusing ?Resource))
;; 	(exists (?Using)
;; 		(and
;; 			(instance ?Using UsingAResource)
;; 			(resourceUsed ?Using ?Resource)
;; 			(earlier (WhenFn ?Using) (WhenFn ?Reusing)))))

;; definition of resourceUsed

(tell (sumodocumentation resourceUsed "(&%resourceUsed ?Process ?Resource) means that the
&%ComputerProcess ?Process has access to the &%ComputerResource ?Resource."))

;; definition of imageResolution

(tell (BinaryPredicate imagenResolution))
(tell (sumodocumentation imageResolution "The degree of sharpness of a displayed or printed
image."))

;; Optimization

(tell (sumodocumentation Optimization "Optimization means finding the best solution according
to a set of criteria. For a computer program, an optimal solution would be the
fastest program (according to some benchmark) or the smallest program."))

;; definition of  SatisfyingRequirements

(tell (sumodocumentation SatisfyingRequirements "&%SatisfyingRequirements covers cases of
finding a solution that satisfies necessary conditions."))

;; Utility

(tell (sumodocumentation Utility "A program that performs a specific task related to the
management of computer functions, resources, or files. Utility programs sumorange
from the simple to the sophisticated, and many programmers specialize in producing
and distributing them as shareware.  There are utilities that perform file and
directory management, data compression, disk defragmentation and repair, system
diagnostics, graphics viewing, and system security, for example. Many utilities
are written as memory-resident programs meant to serve as adjuncts to operating
systems. Many operating systems incorporate such popular utility functions as
undeleting, password protection, memory management, virus protection, and file
compression."))

;; UserAccount

(tell (sumodocumentation UserAccount "An established relationship between a user and a
computer, network or information service. User accounts require a username and
password, and new user accounts are given a default set of permissions."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Account UserAccount)
;; 	(exists (?User)
;; 		(hasAccount ?User ?Account)))

;; UserName

(tell (sumodocumentation UserName "The name a person uses to identify himself or herself
when logging onto a computer system or online service."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(hasAccount ?User ?Account)
;; 	(exists (?Name)
;; 		(userName ?User ?Name)))

;; userName

(tell (AsymmetricSumorelation userName))
(tell (sumodocumentation userName "(&%userName ?Name ?User) means that ?Name is the name
the &%ComputerUser uses to identify himself or herself when logging onto a
computer system."))

;; hasAccount

(tell (AsymmetricSumorelation hasAccount))
(tell (sumodocumentation hasAccount "(&%hasAccount ?User ?Account) holds if ?User is
assigned the &%UserAccount ?Account."))

;; ComputerPassword

(tell (sumodocumentation ComputerPassword "A word or code used to serve as a security
measure against unauthorized access to data. It is normally managed by the
operating system or DBMS."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(hasAccount ?User ?Account)
;; 	(exists (?Password)
;; 		(password ?Password ?User)))

;; password

(tell (AsymmetricSumorelation password))
(tell (sumodocumentation password "(&%password ?Password ?User) means that ?Password is
the password the &%ComputerUser uses while logging onto a computer system."))

;; definition of Report

(tell (sumodocumentation Report "A collection of data, presented in a preformatted
manner."))

;; definition of hostStatus

(tell (sumodocumentation hostStatus "(&%hostStatus ?Computer ?Status) means that ?Status
describes the status of the Computer, such as &%HostDown, &%HostReady."))

;; definition of ComputerStatus

(tell (sumodocumentation ComputerStatus "An attribute-rel which describes status of the
&%Computer, such as &%HostDown, &%HostReady."))

;; definition of HostDown

(tell (ComputerStatus HostDown))
(tell (sumodocumentation HostDown "An attribute-rel which applies to a computer that ceases to
operate due to hardware or software failure."))

;; definition of HostReady

(tell (ComputerStatus HostReady))
(tell (sumodocumentation HostReady "An attribute-rel which applies to a computer that is
functional, operating properly, and ready to receive work requests."))

;; definition of hostJitter

(tell (BinaryPredicate hostJitter))
(tell (sumodocumentation hostJitter "Interference on an analog line caused by a variation
of a signal from its reference timing slots. Jitter can cause problems in the receipt
of data and any subsequent processing of that data."))

;; definition of Epoch

(tell (sumodocumentation Epoch "An instant in time that is arbitrarily selected as a point
of reference."))


;; definition of UnixEpoch

(tell (Epoch UnixEpoch))
(tell (sumodocumentation UnixEpoch "The Unix epoch or point of reference is 00:00:00 UTC,
January 1, 1970."))

;; sumo2loom is dropping the following statement because it
;; wants to be an implication:
;; (equal UnixEpoch (SecondFn 0 (MinuteFn 0 (HourFn 0 (DayFn 1 (MonthFn 1 (YearFn 1970)))))))

;;  definition of collectRate

;; DWF: harmonized with parent to resolve conflict
;; (domain collectRate 1 ComputationalSystem)
(tell (sumodocumentation collectRate "(&%collectRate ?System ?Period) holds if ?Period is
the period at which &%ComputationalSystem ?System collects data."))

;;  definition of sendRate

;; DWF: harmonized with parent to resolve conflict
;; (domain sendRate 1 ComputationalSystem)
(tell (sumodocumentation sendRate "(&%sendRate ?Program ?Period) holds if ?Period is the
period at which the &%ComputationalSystem ?System sends data reports."))

;; definition of BerkeleySoftwareDistribution

(tell (sumodocumentation BerkeleySoftwareDistribution  "Berkeley Software Distribution (UNIX),
a version of Unix distributed by the University of California at Berkeley. Widely
used as a standard for early versions of Unix and Unix software libraries."))

;; ================================================
;; FINANCIAL DOMAIN ONTOLOGY rev. 2002-08-08
;; ================================================


;; =======================
;; Financial Organizations
;; =======================





;; definition of FinancialOrganization

(tell (sumodocumentation FinancialOrganization "The class &%FinancialOrganization includes,
as subclasses, &%Bank-FinancialOrganization, &%CreditUnion and &%SavingsAnLoans."))


;; definition of Bank-FinancialOrganization

(tell (sumodocumentation Bank-FinancialOrganization "An organization, chartered by a state or
federal government, which does most or all of the following: receives &%Deposits,
honors &%FinancialInstruments drawn on them, and pays &%Interest on them; discounts
&%Notes, makes &%Loans,  and invests in &%SecuredLoans; collects &%Checks, &%Drafts
and &%Notes, certifies depositor's checks; and issues drafts and Cashier's checks."))


;; definition of CreditUnion

(tell (sumodocumentation CreditUnion "Credit unions are non-profit, member-owned, financial
cooperatives. They are operated entirely by and for their members. When you deposit
money in a credit union, you become a member of the union because your deposit is
considered partial ownership in the credit union. Many large organizations have
established credit unions for their employees."))


;; definition of SavingsAndLoans

(tell (sumodocumentation SavingsAndLoans "A federally or state chartered &%FinancialOrganization
that takes &%Deposits from individuals, funds &%Mortgages, and pays &%Dividends."))


;;   Financial Accounts and instruments


;; definition of FinancialAsset

(tell (Physical FinancialAsset))
(tell (sumodocumentation FinancialAsset "Any item of economic value owned by an individual or
corporation, especially that which could be converted to cash.  Examples are cash,
securities, accounts receivable, inventory, office equipment, a house, a car, and
other sumoproperty."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Asset FinancialAsset)
;; 	(exists (?Value)
;; 		(monetaryValue ?Asset ?Value)))


;; definition of FinancialContract

(tell (subAttribute FinancialContract Contract))
(tell (sumodocumentation FinancialContract "A financial agreement between two or more parties"))


;; definition of FinancialAccount

(tell (sumodocumentation FinancialAccount "A formal banking, brokerage, or business relationship
established to provide for regular services, dealings, and other financial
transactions."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;     (instance ?Account FinancialAccount)
;;     (and
;;          (property ?Account FinancialContract)
;;          (property ?Account ServiceContract)))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;     (property ?Account FinancialAccount)
;;     (exists (?Organization)
;; 	    (and
;; 		(instance ?Organization FinancialOrganization)
;; 		(accountAt ?Account ?Organization))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(property ?Account FinancialAccount)
;; 		(accountAt ?Account ?Bank))
;; 	(exists (?Activity)
;; 		(and
;; 			(instance ?Activity ControllingAnAccount)
;; 			(patient ?Activity ?Account)
;; 			(agent ?Activity ?Bank))))


;; definition of FinancialInstrument

(tell (sumodocumentation FinancialInstrument "A document having monetary value or recording
a monetary transaction"))


;; definition of Note

(tell (sumodocumentation Note "A legal document that obligates a borrower to repay a loan
at a specified interestRate during a specified period of time or on demand"))


;; definition of Check

(tell (sumodocumentation Check "A &%FinancialInstrument drawn against deposited funds,
to pay a specified amount of money to a specific person upon demand."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Check Check)
;; 	(exists (?Value)
;; 		(monetaryValue ?Check ?Value)))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Check Check)
;; 	(exists (?Account)
;; 		(checkAccount ?Check ?Account)))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(monetaryValue ?Check ?Amount)
;; 		(checkAccount ?Check ?Account)
;; 		(instance ?Processing ProcessingACheck)
;; 		(patient ?Processing ?Check)
;; 		(equal (WhenFn ?Processing) ?ProcessingTime))
;; 	(exists (?Withdrawal)
;; 		(and
;; 			(instance ?Withdrawal Withdrawal)
;; 			(instrument ?Withdrawal ?Check)
;; 			(equal (WhenFn ?Withdrawal) ?WithdrawalTime)
;; 			(meetsTemporally ?ProcessingTime ?WithdrawalTime)
;; 			(transactionAmount ?Withdrawal ?Amount)
;; 			(origin ?Withdrawal ?Account))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(monetaryValue ?Check ?Amount)
;; 		(instance ?Processing ProcessingACheck)
;; 		(patient ?Processing ?Check)
;; 		(destination ?Processing (CurrencyFn ?Account))
;; 		(instance ?Account FinancialAccount)
;; 		(equal (WhenFn ?Processing) ?ProcessingTime))
;; 	(exists (?Deposit)
;; 		(and
;; 			(instance ?Deposit Deposit)
;; 			(instrument ?Deposit ?Check)
;; 			(equal (WhenFn ?Deposit) ?DepositTime)
;; 			(meetsTemporally ?ProcessingTime ?DepositTime)
;; 			(transactionAmount ?Deposit ?Amount)
;; 			(destination ?Deposit (CurrencyFn ?Account)))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Check Check)
;; 		(instance ?Processing ProcessingACheck)
;; 		(patient ?Processing ?Check))
;; 	(exists (?Depositing)
;; 		(and
;; 			(instance ?Depositing DepositingACheck)
;; 			(patient ?Depositing ?Check)
;; 			(time ?Depositing (ImmediatePastFn (WhenFn ?Processing))))))




;; Definition of PayCheck.

(tell (sumodocumentation PayCheck "A check issued to an employee in payment of salary or wages"))

;; Logic error -- ?Agent variable roams free in consequent.
;;(=>
;;	(and
;;		(instance ?Check Paycheck)
;;		(issuedBy ?Check ?Organization))
;;	(employs ?Agent ?Organization))


;; definition of BankCard

(tell (sumodocumentation BankCard "A &%CreditCard or a &%DebitCard issued by a
&%FinancialOrganization."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Card BankCard)
;; 	(exists (?Organization)
;; 		(issuedBy ?Card ?Organization)))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Card BankCard)
;; 		(issuedBy ?Card ?Bank))
;; 	(exists (?Account)
;; 		(and
;; 			(instance ?Account FinancialAccount)
;; 			(cardAccount ?Card ?Account)
;; 			(accountAt ?Account ?Bank))))


;; definition of DebitCard

(tell (sumodocumentation DebitCard "A card which allows customers to access their funds
immediately, electronically. Unlike a credit card, a debit card does not have
any float."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Card DebitCard)
;; 		(possesses ?Agent ?Card))
;; 	(exists (?Account)
;; 		(and
;; 			(instance ?Account DepositAccount)
;; 			(cardAccount ?Card ?Account)
;; 			(accountHolder ?Account ?Agent))))


;; definition of CreditCard

(tell (sumodocumentation CreditCard "Any card that may be used repeatedly to borrow money
or buy products and services on credit.  Issued by banks, savings and loans, retail
stores, and other businesses."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Card CreditCard)
;; 		(possesses ?Agent ?Card))
;; 	(exists (?Account)
;; 		(and
;; 			(instance ?Account CreditCardAccount)
;; 			(cardAccount ?Card ?Account)
;; 			(accountHolder ?Account ?Agent))))


;; definition of accountAt

(tell (sumodocumentation accountAt "(&%accountAt ?Account ?Bank) means that ?Account is a
&%FinancialAccount opened in the &%FinancialOrganization ?Bank."))


;; definition of cardAccount

(tell (BinaryPredicate cardAccount))
(tell (sumodocumentation cardAccount "(&%cardAccount ?Card ?Account) means that ?Account is
the &%FinancialAccount linked to a BankCard ?Card."))


;; definition of checkAccount

(tell (BinaryPredicate checkAccount))
(tell (sumodocumentation checkAccount "(&%checkAccount ?Check ?Account) means that ?Account
is the &%FinancialAccount from which the amount specifed on the check is paid."))


;; definition of accountHolder

(tell (sumodocumentation accountHolder "(&%accountHolder ?Account ?Agent) means that ?Agent
is the account holder of the &%FinancialAccount ?Account."))


;; definition of issuedBy

(tell (BinaryPredicate issuedBy))
(tell (sumodocumentation issuedBy "(&%issuedBy ?Instrument ?Agent) means that a
&%FinancialInstrument ?Instrument is produced and offered by ?Agent."))


;; definition of signedBy

(tell (BinaryPredicate signedBy))
(tell (sumodocumentation signedBy "(&%signedBy ?Instrument ?Agent) means that ?Instrument
has been signed by ?Agent."))


;; definition of agreementMember

(tell (BinaryPredicate agreementMember))
(tell (sumodocumentation agreementMember "(&%agreementMember ?Agreement ?Agent) means that
?Agent is one of the participants of the Agreement."))


;; definition of CurrencyFn

(tell (UnarySumofunction CurrencyFn))
(tell (sumodocumentation CurrencyFn "A unary function that maps a &%FinancialAccount to the
currency linked to the account."))


;;   Financial Activities


;; Definition of OpeningAnAccount.


(tell (sumodocumentation OpeningAnAccount "An activity of opening a financial account"))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Opening OpeningAnAccount)
;; 		(located ?Opening ?Bank)
;; 		(instance ?Bank FinancialOrganization)
;; 		(agent ?Opening ?Agent)
;; 		(equal (WhenFn ?Opening) ?OpeningTime))
;; 	(exists (?Account ?AccountPeriod)
;; 		(and
;; 			(agreementPeriod ?Account ?AccountPeriod)
;; 			(meetsTemporally ?OpeningTime ?AccountPeriod)
;; 			(instance ?Account FinancialAccount)
;; 			(accountAt ?Account ?Bank)
;; 			(accountHolder ?Account ?Agent))))


;; Definition of UsingAnAccount.


(tell (sumodocumentation UsingAnAccount "An activity of using a financial account"))




;; definition of DrawingACheck

(tell (sumodocumentation DrawingACheck "An activity of paying by a check."))



;; definition of DepositingACheck

(tell (sumodocumentation DepositingACheck "An activity of depositing a check into a
&%FinancialOrganization."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Depositing DepositingACheck)
;; 	(exists (?Check)
;; 		(and
;; 			(instance ?Check Check)
;; 			(patient ?Depositing ?Check))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Depositing DepositingACheck)
;; 		(patient ?Depositing ?Check)
;; 		(instance ?Check Check)
;; 		(checkAccount ?Check ?Account)
;; 		(monetaryValue ?Check ?Amount))
;; 	(exists (?Deposit)
;; 		(and
;; 			(instance ?Deposit Deposit)
;; 			(destination ?Deposit (CurrencyFn ?Account))
;; 			(transactionAmount ?Deposit ?Amount))))


;; definition of ControllingAnAccount

(tell (sumodocumentation ControllingAnAccount "An activity of controlling a financial account"))



;; definition of ProcessingACheck

(tell (sumodocumentation ProcessingACheck "An activity of paying the amount specified on the
check from funds on deposit."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Processing ProcessingACheck)
;; 	(exists (?Check)
;; 		(and
;; 			(instance ?Check Check)
;; 			(patient ?Procesing ?Check))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Processing ProcessingACheck)
;; 	(exists (?Authorization)
;; 		(and
;; 			(instance ?Authorization AuthorizationOfTransaction)
;; 			(subProcess ?Authorization ?Processing))))


;; definition of AuthorizationOfTransaction

(tell (sumodocumentation AuthorizationOfTransaction "An activity which approves or
disapproves a transaction."))


;; definition of ClosingAnAccount

(tell (sumodocumentation ClosingAnAccount "An activity of closing a financial account"))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(instance ?Closing ClosingAnAccount)
;; 		(patient ?Closing ?Account))
;;         (and
;;                 (holdsDuring (ImmediatePastFn (WhenFn ?Closing)) (instance ?Account FinancialAccount))
;; 		(holdsDuring (ImmediateFutureFn (WhenFn ?Closing)) (not (instance ?Account FinancialAccount)))))


;; definition of Payment

(tell (sumodocumentation Payment "The partial or complete discharge of an obligation by
its settlement in the form of the transfer of funds, assets, or services equal
to the monetary value of part or all of the debtor's obligation."))



;; definition of Deposit

(tell (sumodocumentation Deposit "An Activity of money being transferred into a customer's
account at a financial institution."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Deposit Deposit)
;; 	(exists (?Account)
;; 		(destination ?Deposit (CurrencyFn ?Account))))




;; definition of Withdrawal

(tell (sumodocumentation Withdrawal "An activity of money being transferred from a customer's
account at a financial institution."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Withdrawal Withdrawal)
;; 	(exists (?Account)
;; 		(and
;; 			(instance ?Account FinancialAccount)
;; 			(origin ?Withdrawal (CurrencyFn ?Account)))))


;; definition of Investing

(tell (sumodocumentation Investing "An activity of commiting money or capital in order to
gain a financial return."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(agent ?Purchase ?Buyer)
;; 		(origin ?Purchase ?Seller)
;; 		(patient ?Purchase ?Object)
;; 		(monetaryValue ?Object ?Money))
;; 	(exists (?Payment)
;; 		(and
;; 			(subProcess ?Payment ?Purchase)
;; 			(instance ?Payment Payment)
;; 			(transactionAmount ?Payment ?Money)
;; 			(destination ?Payment ?Seller))))


;; Definition of AutomaticTransaction.

(tell (sumodocumentation AutomaticTransaction "&%Transactions which occur through computer
networks and which do not require direct management."))


;; Interest and Interest Rates


;; Definition of Interest.

(tell (sumodocumentation Interest "Money paid for the use of money."))

;; definition of InterestRate

(tell (sumodocumentation InterestRate "The usual way of calculating Interest, as a
percentage of the sum borrowed."))

;; definition of interestEarned

(tell (TernaryPredicate interestEarned))
(tell (sumodocumentation interestEarned "(&%interestEarned ?Account ?Interest ?Period) means
that ?Interest is the amount earned on the &%FinancialAccount ?Account, for the
duration ?Period."))

;; Definition of simpleInterest.

(tell (TernaryPredicate simpleInterest))
(tell (sumodocumentation simpleInterest "(&%simpleInterest ?Account ?Amount ?Time) means
that ?Amount is the interest calculated on a principal sum, not compounded on
earned interest, for the duration ?Time."))


;; MultiplicationFn is a BinaryFunction, so this is invalid:
;; (equal ?Amount (MultiplicationFn (MagnitudeFn ?Period) ?Balance ?Rate-Decimal))

;; Definition of compoundInterest.

(tell (TernaryPredicate compoundInterest))
(tell (sumodocumentation compoundInterest "(&%compoundInterest ?Account ?Amount ?Time) means
that ?Amount is the interest which is calculated not only on the initial principal
but also the accumulated interest of prior periods. Compound interest can be
calculated annually, semi-annually, quartely, monthly, or daily."))


;; Definition of interestRatePerPeriod.

(tell (TernaryPredicate interestRatePerPeriod))
(tell (sumodocumentation interestRatePerPeriod
"(interestRatePerPeriod ?ACCOUNT ?RATE ?TIME) means that ?RATE is the interest
per the period TIME divided by principal amount, expressed as a percentage"))


;; Definition of primeInterestRate.

(tell (BinaryPredicate primeInterestRate))
(tell (sumodocumentation primeInterestRate "The interest rate that commercial banks charge
their most creditworthy borrowers, such as large corporations.  The prime rate is
a lagging indicator."))


;; Definition of currentInterestRate.

(tell (TernaryPredicate currentInterestRate))
(tell (sumodocumentation currentInterestRate "(&%currentInterestRate ?Account ?Day ?Rate)
means that ?Rate is the interest rate of the Account on a specific day ?Day."))

;; Definition of fixedInterestRate.

(tell (BinaryPredicate fixedInterestRate))
(tell (sumodocumentation fixedInterestRate "(&%fixedInterestRate ?Account ?Rate) holds if
?Rate is the interest rate that does not change during the entire term of the
account."))

;; dates

;; definition of agreementActive

(tell (BinaryPredicate agreementActive))
(tell (sumodocumentation agreementActive "(&%agreementActive ?Agreement ?Date) holds if
?Agreement is in force at the time specified by ?Date."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(and
;; 		(agreementPeriod ?Agreement ?Period)
;; 		(overlapsTemporally ?Date ?Period))
;; 	(agreementActive ?Agreement ?Date))

;; Definition of maturityDate.

(tell (BinaryPredicate maturityDate))
(tell (sumodocumentation maturityDate "The date on which the principal amount of the account
becomes due and payable."))


;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(and
;; 		(agreementPeriod ?Account ?Period)
;; 		(finishes ?End ?Period))
;; 	(maturityDate ?Account ?End))

;; Definition of amountDue.

(tell (TernaryPredicate amountDue))
(tell (sumodocumentation amountDue "(&%amountDue ?ACCOUNT ?AMOUNT ?DATE) means ?DATE is the
date on which the amount of Money ?AMOUNT of a particular ?ACCOUNT is due and payable"))

;; sumo2loom is dropping the following statement because it uses
;; KappaFn, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(amountDue ?Account ?Amount ?DueDate)
;; 		(accountHolder ?Account ?Agent))
;; 	(holdsObligation (KappaFn ?Payment
;; 				  (and
;; 					(instance ?Payment Payment)
;; 					(transactionAmount ?Payment ?Amount)
;; 					(or
;; 						(destination ?Payment (CurrencyFn ?Account))
;; 						(origin ?Payment (CurrencyFn ?Account)))
;; 					(date ?Payment ?Date)
;; 					(beforeEq (EndFn ?Date) (BeginFn ?DueDate)))) ?Agent))

;; definition of agreementPeriod

(tell (BinaryPredicate agreementPeriod))
(tell (sumodocumentation agreementPeriod "(&%agreementPeriod ?Agreement ?Period) holds if
?Period specifies a Time interval during which ?Agreement is in force."))


;; Balances and payments


;; definition of transactionAmount


(tell (BinaryPredicate transactionAmount))
(tell (sumodocumentation transactionAmount "(&%transactionAmount ?Transaction ?Amount) means
that ?Amount is an instance of &%CurrencyMeasure being exhanged in a
&%FinancialTransaction ?Transaction."))

;; definition of currentAccountBalance

(tell (TernaryPredicate currentAccountBalance))
(tell (sumodocumentation currentAccountBalance "(&%currentAccountBalance ?Account ?Date ?Amount) means that ?Amount is the balance of the FinancialAccount ?Account as of the date
?Date."))

;; Definition of minimumBalance.


(tell (TernaryPredicate minimumBalance))
(tell (sumodocumentation minimumBalance "(&%minimumBalance ?Account ?ActivityType ?Amount)
means that ?Amount is the mimimum amount required by the type of
&%FinancialTransaction ?ActivityType."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Account ?FinancialAccount)
;; 		(minimumBalance ?Account OpeningAnAccount ?Balance))
;; 	(exists (?Payment)
;; 		(and
;; 			(destination ?Payment (CurrencyFn ?Account))
;; 			(transactionAmount ?Payment ?Amount)
;; 			(greaterThanOrEqualTo ?Amount ?Balance)
;; 			(effectiveDate ?Account ?Date)
;; 			(date ?Payment ?Date))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(exists (?Date)
;; 		(and
;; 			(instance ?Account ?FinancialAccount)
;; 			(minimumBalance ?Account UsingAnAccount ?Balance)
;; 			(currentAccountBalance ?Account ?Date ?Amount)
;; 			(lessThan ?Amount ?Balance)))
;; 	(exists (?Penalty)
;; 		(and
;; 			(instance ?Penalty Penalty)
;; 			(date ?Penalty ?Date)
;; 			(destination ?Penalty (CurrencyFn ?Account)))))

;; Definition of originalBalance.

(tell (BinaryPredicate originalBalance))
(tell (sumodocumentation originalBalance "(&%originalBalance ?ACCOUNT ?BALANCE) means that
?BALANCE is the balance of the account at the time the account is opened."))


;; Definition of principalAmount.

(tell (BinaryPredicate principalAmount))
(tell (sumodocumentation principalAmount "(&%principalAmount ?ACCOUNT ?BALANCE) means
that ?BALANCE is the amount borrowed, or the part of the amount borrowed
which remains unpaid (excluding interest)."))

;; Definition of periodicPayment.

(tell (TernaryPredicate periodicPayment))
(tell (sumodocumentation periodicPayment "(&%periodicPayment ?Pay ?Amount ?Period) holds if
?Pay is one of the periodic payments for the amount ?Amount."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(periodicPayment ?Account ?Amount ?Period)
;; 	(exists (?Payment)
;; 		(and
;; 			(instance ?Payment Payment)
;; 			(origin ?Payment (CurrencyFn ?Account))
;; 			(transactionAmount ?Payment ?Amount)
;; 			(frequency ?Payment ?Period))))

;; Definition of minimumPayment.

(tell (TernaryPredicate minimumPayment))
(tell (sumodocumentation minimumPayment "The smallest amount which can be paid on a revolving
charge account to avoid a penalty."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Account LiabilityAccount)
;; 		(minimumPayment ?Account ?MinPayment MonthDuration)
;; 		(exists (?Payment ?Month)
;; 			(and
;; 				(instance ?Month Month)
;; 				(destination ?Payment (CurrencyFn ?Account))
;; 				(paymentsPerPeriod ?Account ?Amount ?Month)
;; 				(lessThan ?Amount ?MinPayment))))
;; 	(exists (?Penalty)
;; 		(and
;; 			(instance ?Penalty Penalty)
;; 			(destination ?Penalty (CurrencyFn ?Account)))))

;; definition of overdraft

(tell (TernaryPredicate overdraft))
(tell (sumodocumentation overdraft "The amount by which withdrawals exceed deposits."))


;; Definition of creditLimit.

(tell (BinaryPredicate creditLimit))
(tell (sumodocumentation creditLimit "(&%creditLimit ?ACCOUNT ?AMNT) holds if ?AMNT is the
maximum amount of credit that a bank or other lender will extend to a customer."))

;; definition of floorLoan

(tell (BinaryPredicate floorLoan))
(tell (sumodocumentation floorLoan "A minimum amount that a lender is willing to loan"))

;; Definition of downPayment.

(tell (BinaryPredicate downPayment))
(tell (sumodocumentation downPayment "The part of the purchase price paid in cash up front,
reducing the amount of the loan or mortgage."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(downPayment ?Loan ?Amount)
;; 		(effectiveDate ?Loan ?Date))
;; 	(exists (?Payment)
;; 		(and
;; 			(transactionAmount ?Payment ?Amount)
;; 			(date ?Payment ?Date)
;; 			(destination ?Payment (CurrencyFn ?Loan)))))


;; definition of Prepayment

(tell (sumodocumentation Prepayment "Prepayment is the payment of all or part of a debt
prior to its due date."))


;; definition of accountsBalance

;(instance accountsBalance TernaryPredicate)
;(domainSubclass accountsBalance 1 FinancialAccount)
;(domain accountsBalance 2 CurrencyMeasure)
;(domain accountsBalance 3 Day)

;; [Unbalanced commented-out expression deleted]

;; definition of netWorth


(tell (TernaryPredicate netWorth))
(tell (SingleValuedSumorelation netWorth))
(tell (sumodocumentation netWorth "Total assets minus total liabilities of an individual or company."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;; 	(netWorth ?Agent ?Amount ?Date)
;; 	(holdsDuring ?Date (equal ?Amount (WealthFn ?Agent))))

;; [Unbalanced commented-out expression deleted]


;;	fees


;; definition of ChargingAFee

(tell (sumodocumentation ChargingAFee "An activity of a fee being charged"))

;; Definition of serviceFee.

(tell (TernaryPredicate serviceFee))
(tell (sumodocumentation serviceFee "A charge to the customer levied by a &%FinancialOrganization
for a &%FinancialTransaction, such as &%OpeningAnAccount or &%UsingAnAccount."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(serviceFee ?Bank ?Action ?Amount)
;; 	(exists (?Fee)
;; 		(and
;; 			(instance ?Fee ChargingAFee)
;; 			(agent ?Fee ?Bank)
;; 			(causes ?Action ?fee)
;; 			(amountCharged ?Fee ?Amount))))

;; definition of amountCharged

(tell (sumodocumentation amountCharged "(&%amountCharged ?Fee ?Amount) means that ?Amount is the amount of
the fee charged."))

;; definition of Penalty

(tell (sumodocumentation Penalty "A fee charged as a penalty."))

;; definition of Tax

(tell (sumodocumentation Tax "A fee charged by a government on a product, income, or activity."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Tax Tax)
;; 	(exists (?Org)
;; 		(and
;; 			(instance ?Org Government)
;; 			(agent ?Tax ?Org))))


;;	Types of Accounts


;; Definition of InterestBearingAccount.

(tell (sumodocumentation InterestBearingAccount "FinancialAccounts that have a fixed or adjustable interest rate."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Account InterestBearingAccount)
;; 	(exists (?Rate ?Period)
;; 		(interestRate ?Account ?Rate ?Period)))

;; Definition of FixedRateAccount.

(tell (sumodocumentation FixedRateAccount "An &%InterestBearingAccount in which the interest rate does not
change during the entire term of the loan."))


;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;;        (exists (?Rate)
;; 	       (fixedInterestRate ?Account ?Rate))
;;        (instance ?Account FixedRateAccount))

;; Definition of AdjustableRateAccount.

(tell (sumodocumentation AdjustableRateAccount "An &%InterestBearingAccount in which
the interest rate is adjusted periodically, usually based on a standard
market rate outside the control of the bank or savings institution, such
as that prevailing on &%TreasuryBill or the &%primeInterestRate."))

;; Definition of PersonalAccount.

(tell (sumodocumentation PersonalAccount "This is the class of personal accounts, as opposed to
&%CorporateAccounts."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(and
;; 		(accountHolder ?Account ?Agent)
;; 		(instance ?Agent Human))
;; 	(instance ?Account PersonalAccount))

;; Definition of JointAccount.

(tell (sumodocumentation JointAccount "An account owned by two or more people, usually sharing a household
and expenses. Each co-owner has equal access to the account. Most types of accounts, whether it's
basic checking, savings or money market, allow for joint use"))

;; sumo2loom is dropping the following statement because it uses
;; KappaFn, which has Formula in its domain:
;; (<=>
;; 	(and
;; 		(instance ?Account PersonalAccount)
;; 		(greaterThan (CardinalityFn (KappaFn ?Agent (accountHolder ?Account ?Agent))) 1))
;; 	(instance ?Account JointAccount))

;; Definition of CorporateAccount.

(tell (sumodocumentation CorporateAccount "This is the class of accounts held by corporations.  This class
is sumodisjoint with &%PersonalAccounts."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(and
;; 		(accountHolder ?Account ?Agent)
;; 		(instance ?Agent Corporation))
;; 	(instance ?Account CorporateAccount))

;; definition of DepositAccount

(tell (sumodocumentation DepositAccount "An account where money is deposited for checking, savings or
brokerage use."))

;; Definition of SavingsAccount.


(tell (sumodocumentation SavingsAccount "An account in a bank on which interest is usually paid and from
which withdrawals can be made usually only by presentation of a passbook or by written authorization
on a prescribed form."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Account SavingsAccount)
;; 		(instance ?Transaction FinancialTransaction)
;; 		(origin ?Transaction (CurrencyFn ?Account)))
;; 	(exists (?Authorization)
;; 		(and
;; 			(instance ?Authorization AuthorizationOfTransaction)
;; 			(subProcess ?Authorization ?Transaction))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Account SavingsAccount)
;; 		(accountHolder ?Account ?Agent)
;; 		(interestEarned ?Account ?Interest ?Period))
;; 	(exists (?Payment)
;; 		(and
;; 			(destination ?Payment (CurrencyFn ?Account))
;; 			(transactionAmount ?Payment ?Interest)
;; 			(destination ?Payment ?Agent))))

;; Definition of MoneyMarket.

(tell (sumodocumentation MoneyMarket "&%MoneyMarket is for borrowing and lending money for three years
or less. The securities in a money market can be U.S. government bonds, TreasuryBills and commercial
paper from banks and companies."))



;; Definition of TreasuryBill.

(tell (sumodocumentation TreasuryBill "A negotiable debt obligation issued by the U.S. government and backed
by its full faith and credit, having a maturity of one year or less. Exempt from state and local taxes"))


;; Definition of  CertificateOfDeposit.

(tell (sumodocumentation CertificateOfDeposit "CDs (certificates of deposit) are bank, credit union or savings
and loan instruments that allow the depositor to lock in an interest rate for a specific period of
time (e.g. six months, one year, five years).  If the money is withdrawn from the CD before the CD
matures, there is likely to be an early-withdrawal penalty -- often three month's interest. Generally,
the longer the time period of the CD, the higher the interest paid."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?CD CertificateOfDeposit)
;; 	(exists (?Date)
;; 		(maturityDate ?CD ?Date)))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?CD CertificateOfDeposit)
;; 		(maturityDate ?CD ?MaturityDate)
;; 		(instance ?Withdrawal Withdrawal)
;; 		(origin ?Withdrawal (CurrencyFn ?CD))
;; 		(date ?Withdrawal ?DateOfWithdrawal)
;; 		(before (EndFn ?DateOfWithdrawal) (BeginFn ?MaturityDate)))
;; 	(exists (?Penalty)
;; 		(and
;; 			(instance ?Penalty Penalty)
;; 			(destination ?Penalty (CurrencyFn ?CD))
;; 			(causes ?Withdrawal ?Penalty))))

;; Definition of  TraditionalSavingsAccount.

(tell (sumodocumentation TraditionalSavingsAccount "Accounts that pay interest, usually at below-market
interest rates, that do not have a specific maturity, and that usually can be withdrawn upon demand"))


;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Account TraditionalSavingsAccount)
;; 	(not
;; 		(exists (?Date)
;; 			(maturityDate ?Account ?Date))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Account TraditionalSavingsAccount)
;; 		(instance ?Withdrawal Withdrawal)
;; 		(origin ?Withdrawal (CurrencyFn ?Account)))
;; 	(not (exists (?Penalty)
;; 	     (and
;; 		(instance ?Penalty Penalty)
;; 		(destination ?Penalty (CurrencyFn ?Account))
;; 		(causes ?Withdrawal ?Penalty)))))

;; Definition of CheckingAccount

(tell (sumodocumentation CheckingAccount "A bank account against which the depositor can draw checks"))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Account CheckingAccount)
;; 		(instance ?Transaction FinancialTransaction)
;; 		(origin ?Transaction (CurrencyFn ?Account)))
;; 	(or
;; 		(exists (?Check)
;; 			(and
;; 				(instance ?Check Check)
;; 				(instrument ?Transaction ?Check)))
;; 
;; 		(exists (?DebitCard)
;; 			(and
;; 				(instance ?DebitCard BankDebitCard)
;; 				(instrument ?Transaction ?DebitCard)))))

;; definition of InvestmentAccount

(tell (sumodocumentation InvestmentAccount "An account acquired for future financial return or benefit"))

;; definition of MutualFundAccount

(tell (sumodocumentation MutualFundAccount "An open-ended fund operated by an investment company which
raises money from shareholders and invests in a group of assets, in accordance with a stated
set of objectives. Benefits include diversification and professional money management. Shares
are issued and redeemed on demand, based on the fund's net asset value which is determined at
the end of each trading session."))

;; definition of Liability

(tell (sumodocumentation Liability "A financial obligation, debt, claim, or potential loss"))

;; definition of LiabilityAccount

(tell (sumodocumentation LiabilityAccount "An account for which a person is liable"))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Account LiabilityAccount)
;; 		(accountHolder ?Account ?Agent)
;; 		(accountAt ?Account ?Bank))
;; 	(exists (?Debt)
;; 		(and
;; 			(instance ?Debt Liability)
;; 			(agreementMember ?Debt ?Agent)
;; 			(agreementMember ?Debt ?Bank))))

;; Definition of CreditAccount.

(tell (sumodocumentation CreditAccount "Credit extended by a business to a customer"))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Account CreditAccount)
;; 		(accountAt ?Account ?Organization)
;; 		(accountHolder ?Account ?Agent)
;; 		(interestEarned ?Account ?Interest ?Period))
;; 	(exists (?Payment)
;; 		(and
;; 			(origin ?Payment ?Agent)
;; 			(transactionAmount ?Payment ?Interest)
;; 			(destination ?Payment ?Organization))))

;; sumo2loom is dropping the following statement because it uses
;; KappaFn, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(instance ?Account CreditAccount)
;; 		(accountHolder ?Account ?Agent)
;; 		(principalAmount ?Account ?Principal)
;; 		(agreementPeriod ?Account ?Period)
;; 		(interestEarned ?Account ?Interest ?Period)
;; 		(equal ?Total (AdditionFn ?Principal ?Interest)))
;; 	(holdsObligation (KappaFn  ?Payment
;; 				   (transactionAmount ?Payment ?Total)) ?Agent))

;; Definition of CreditCardAccount.

(tell (sumodocumentation CreditCardAccount "A type of &%CreditAccount which uses a &%CreditCard for
&%FinancialTransactions."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Account CreditCardAccount)
;; 		(instance ?Transaction FinancialTransaction)
;; 		(origin ?Transaction (CurrencyFn ?Account)))
;; 	(exists (?Card)
;; 		(and
;; 			(instance ?Card CreditCard)
;; 			(instrument ?Transaction ?Card))))

;; definition of Loan

(tell (sumodocumentation Loan "An arsumorangement in which a lender gives money or sumoproperty to a borrower,
and the borrower agrees to return the sumoproperty or repay the money, usually along with interest,
at some future point(s) in time."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(borrower ?Loan ?Borrower)
;; 		(lender ?Loan ?Agent)
;; 		(agreementPeriod ?Loan ?Period)
;; 		(interestEarned ?Loan ?Interest ?Period))
;; 	(exists (?Payment)
;; 		(and
;; 			(origin ?Payment ?Borrower)
;; 			(transactionAmount ?Payment ?Interest)
;; 			(destination ?Payment ?Lender))))

;; sumo2loom is dropping the following statement because it uses
;; KappaFn, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(instance ?Account Loan)
;; 		(borrower ?Account ?Agent)
;; 		(principalAmount ?Account ?Principal)
;; 		(agreementPeriod ?Account ?Period)
;; 		(interestEarned ?Account ?Interest ?Period)
;; 		(equal ?Total (AdditionFn ?Principal ?Interest)))
;; 	(holdsObligation (KappaFn ?Payment
;; 			 (transactionAmount ?Payment ?Total)) ?Agent))

;; definition of lender

(tell (sumodocumentation lender "(&%lender ?Loan ?Agent) means that ?Agent is a private, public or
institutional entity that put up the funds for the ?Loan."))

;; definition of borrower

(tell (sumodocumentation borrower "(&%borrower ?Loan ?Agent) means that ?Agent is a borrower of the ?Loan"))

;; Definition of loanForPurchase.

(tell (BinaryPredicate loanForPurchase))
(tell (sumodocumentation loanForPurchase "(&%loanForPurchase ?ACCOUNT ?PRODUCT) means that ?ACCOUNT is a
loan to finance the purchase of ?PRODUCT."))

;; definition of Collateral

(tell (sumodocumentation Collateral "Assets pledged by a borrower to secure a loan or other credit, and
subject to seizure in the event of &%FinancialDefault."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(instance ?Collateral Collateral)
;; 	(exists (?Loan)
;; 		(and
;; 			(instance ?Loan SecuredLoan)
;; 			(securedBy ?Loan ?Collateral))))

;; definition of securedBy

(tell (BinaryPredicate securedBy))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(instance ?Loan Loan)
;; 		(securedBy ?Loan ?Security)
;; 		(lender ?Loan ?Bank)
;; 		(exists (?Default)
;; 			(and
;; 				(instance ?Default FinancialDefault)
;; 				(patient ?Default ?Loan))))
;; 	(holdsDuring (ImmediateFutureFn (WhenFn ?Default)) (possesses ?Bank ?Security)))

;; definition of SecuredLoan


;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(instance ?Loan SecuredLoan)
;; 	(exists (?Security)
;; 		(securedBy ?Loan ?Security)))

;; definition of UnsecuredLoan


;; definition of RealEstate

(tell (sumodocumentation RealEstate "Land, including all the natural resources and permanent buildings on it."))

;; Definition of Mortgage.

(tell (sumodocumentation Mortgage "A loan to finance the purchase of real estate, usually with specified payment
periods and interest rates."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Loan Mortgage)
;; 	(exists (?Estate)
;; 		(and
;; 			(instance ?Estate RealEstate)
;; 			(loanForPurchase ?Loan ?Estate))))


;; definition of BalloonLoan

(tell (sumodocumentation BalloonLoan "A long-term loan, often a mortgage, that has
one large payment (the balloon payment) due upon maturity.  Often done
when refinancing or a major cash flow event is anticipated"))

;; sumo2loom is dropping the following statement because it uses
;; KappaFn, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(instance ?Loan BalloonLoan)
;; 		(maturityDate ?Loan ?Date)
;; 		(totalBalance ?Loan ?Amount)
;; 		(borrower ?Loan ?Agent))
;; 	(holdsObligation (KappaFn ?Payment
;; 			 (and
;; 				(date ?Payment ?Date)
;; 				(transactionAmount ?Payment ?Amount)
;; 				(destination ?Payment (CurrencyFn ?Loan)))) ?Agent))

;; definition of Call


;; definition of CallableLoan

(tell (sumodocumentation CallableLoan "A loan that must repaid upon the lender's demand"))

;; sumo2loom is dropping the following statement because it uses
;; KappaFn, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(instance ?Loan CallableLoan)
;; 		(lender ?Loan ?Lender)
;; 		(borrower ?Loan ?Borrower)
;; 		(totalBalance ?Loan ?Amount)
;; 		(exists (?Call)
;; 			(and
;; 				(instance ?Call Call)
;; 				(agent ?Call ?Lender)
;; 				(time ?Call ?Time)
;; 				(patient ?Call ?Loan))))
;; 	(holdsObligation (KappaFn ?Payment
;; 			 (and
;; 				(destination ?Payment ?Lender)
;; 				(time ?Payment (ImmediateFutureFn (WhenFn ?Call)))
;; 				(transactionAmount ?Payment ?Amount))) ?Borrower))

;; definition of Refinancing

(tell (sumodocumentation Refinancing "Paying off an existing loan with the proceeds from a new loan, using
the same sumoproperty as collateral."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Refinancing Refinancing)
;; 		(time ?Refinancing ?Time)
;; 		(instance ?Loan Loan)
;; 		(securedBy ?Loan ?Collateral)
;; 		(borrower ?Loan ?Borrower)
;; 		(currentAccountBalance ?Loan ?Date ?Amount)
;; 		(patient ?Refinancing ?Loan))
;; 	(exists (?NewLoan ?Payment)
;; 		(and
;; 			(instance ?NewLoan Loan)
;; 			(borrower ?NewLoan ?Borrower)
;; 			(securedBy ?Loan ?Collateral)
;; 			(destination ?Payment (CurrencyFn ?Loan))
;; 			(time ?Payment ?Time)
;; 			(origin ?Payment (CurrencyFn ?NewLoan))
;; 			(transactionAmount ?Payment ?Amount))))

;; definition of LoanCommitment

(tell (sumodocumentation LoanCommitment "A formal offer by a lender making explicit
the terms under which it agrees to lend money to a borrower over a certain
period of time."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Commitment LoanCommitment)
;; 	(exists (?Loan ?Lender ?Borrower)
;; 		(and
;; 			(instance ?Loan Loan)
;; 			(lender ?Loan ?Lender)
;; 			(borrower ?Loan ?Borrower)
;; 			(agreementMember ?Commitment ?Lender)
;; 			(agreementMember ?Commitment ?Borrower))))

;; definition of appraisedValue


;; definition of BankTermLoan

(tell (sumodocumentation BankTermLoan "A bank loan terminating in one year or more."))



;; definition of BridgeLoan

(tell (sumodocumentation BridgeLoan "Short-term financing which is expected to be paid back relatively
quickly, such as by a subsequent longer-term loan."))

;; definition of BrokerLoan

(tell (sumodocumentation BrokerLoan "Money lent to brokers by banks, for financing
the underwriting of new issues, financing customer margin accounts, and
other purposes."))


;; definition of ConsolidationLoan

(tell (sumodocumentation ConsolidationLoan "The replacement of multiple loans with a single loan, often
with a lower monthly payment and a longer repayment period."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Loan ConsolidationLoan)
;; 	(exists (?Loan1 ?Loan2 ?Payment1 ?Payment2)
;; 		(and
;; 			(instance ?Loan1 Loan)
;; 			(instance ?Loan2 Loan)
;; 			(destination ?Payment1 (CurrenyFn ?Loan1))
;; 			(destination ?Payment2 (CurrencyFn ?Loan2))
;; 			(origin ?Payment1 (CurrencyFn ?Loan))
;; 			(origin ?Payment2 (CurrencyFn ?Loan)))))

;; definition of FHALoan

(tell (sumodocumentation FHALoan  "A government mortgage that is insured by the Federal Housing
Administration (FHA)."))


;; definition of insured

(tell (BinaryPredicate insured))
(tell (AsymmetricSumorelation insured))
(tell (sumodocumentation insured "(insured ?Contract ?Org) means that ?Contract is insured
by the ?Organization."))

;; definition of FederalHousingAdministration


;; definition of ConventionalMortgage

(tell (sumodocumentation ConventionalMortgage "A mortgage that is not insured or guaranteed
by the government."))

;; definition of DayLoan

(tell (sumodocumentation DayLoan "A bank loan to a broker for the purchase of securities pending delivery
through clearing later the same day."))



;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Loan DayLoan)
;; 	(and
;; 		(agreementPeriod ?Loan ?Period)
;; 		(duration ?Period (MeasureFn 1 Day-Duration))))

;; definition of PiggybankLoan

(tell (sumodocumentation PiggybankLoan "Two lenders participating in the same loan."))

;; sumo2loom is dropping the following statement because it uses
;; KappaFn, which has Formula in its domain:
;; (=>
;; 	(instance ?Loan PiggybankLoan)
;; 	(equal (CardinalityFn (KappaFn ?Lender (lender ?Loan ?Lender))) 2))

;; definition of SinglePaymentLoan

(tell (sumodocumentation SinglePaymentLoan "A loan whose principal is due in total with a single
payment at maturity."))


;; definition EvergreenLoan

(tell (sumodocumentation EvergreenLoan "A short-term loan which is continually renewed rather than repaid."))

;; definition of IndexedLoan

(tell (sumodocumentation IndexedLoan "A loan in which payments change in response to
changes in an index such as the Consumer Price Index."))

;; definition of InterestOnlyLoan

(tell (sumodocumentation InterestOnlyLoan "A non-amortized loan in which interest is
due at regular intervals until maturity, when the full principal on the
loan is due."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Loan InterestOnlyLoan)
;; 		(agreementPeriod ?Loan ?Period)
;; 		(principalAmount ?Loan ?Principal)
;; 		(interestEarned ?Loan ?Interest ?Period))
;; 	(and
;; 		(amountDue ?Loan ?Principal (EndFn ?Period))
;; 		(amountDue ?Loan ?Interest ?Date)
;; 		(before (EndFn ?Date) (EndFn ?Period))))


;;   indexes


;; definition of Index

(tell (sumodocumentation Index "A benchmark against which financial or economic performance is measured,
such as the S&P 500 or the Consumer Price Index."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Index Index)
;; 	(exists (?Performance)
;; 		(and
;; 			(benchmark ?Performance ?Index)
;; 			(instance ?Performance EconomicIndicator))))

;; definition of EconomicIndicator

(tell (sumodocumentation EconomicIndicator "Data which provide information about or
predict the overall health of the economy or the financial markets;
examples are inflation, interest rates, employment, etc."))

;; definition of PerformanceMeasure


;; definition of benchmark

(tell (BinaryPredicate benchmark))
(tell (sumodocumentation benchmark "A standard by which something can be measured or judged."))

;; definition of Inflation

(tell (sumodocumentation Inflation "The overall general upward price movement of
goods and services in an economy, usually as measured by the Consumer
Price Index and the Producer Price Index."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Inflation Inflation)
;; 	(or
;; 		(and
;; 			(benchmark ?Inflation ?CPI)
;; 			(instance ?CPI ConsumerPriceIndex))
;; 		(and
;; 			(benchmark ?Inflation ?PPI)
;; 			(instance ?PPI ProducerPriceIndex))))

;; definition of InflationIndex


;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(instance ?Index InflationIndex)
;; 	(exists (?Inflation)
;; 		(and
;; 			(instance ?Inflation Inflation)
;; 			(benchmark ?Inflation ?Index))))

;; definition of inflationRate

(tell (BinaryPredicate inflationRate))
(tell (sumodocumentation inflationRate "The percentage increase in the price of goods and services,
usually annually."))

;; definition of ConsumerPriceIndex

(tell (sumodocumentation ConsumerPriceIndex "An inflationary indicator that measures
the change in the cost of a fixed basket of products and services,
including housing, electricity, food, and transportation.  The CPI is
published monthly."))

;; definition of ProducerPriceIndex
(tell (sumodocumentation ProducerPriceIndex "An inflationary indicator published by the U.S. Bureau
of Labor Statistics to evaluate wholesale price levels in the economy."))

;; definition of StockIndex


;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(instance ?Index StockIndex)
;; 	(exists (?Stock)
;; 		(and
;; 			(instance ?Stock Stock)
;; 			(benchmark ?Index ?Stock))))

;; definition of listedOn

(tell (AsymmetricSumorelation listedOn))

;; definition of NASDAQCompositeIndex

(tell (sumodocumentation NASDAQCompositeIndex "A market-value weighted index of all common stocks
listed on NASDAQ."))


;; definition of NASDAQ

(tell (Organization NASDAQ))
(tell (sumodocumentation NASDAQ "National Association of Securities Dealers Automated Quotations
system."))

;; definition of MarketShareWeightedIndex

(tell (sumodocumentation MarketShareWeightedIndex "A stock index in which each stock affects the
index in proportion to its number of shares outstanding."))

;; definition of MarketValueWeightedIndex

(tell (sumodocumentation MarketValueWeightedIndex "A stock index in which each stock
affects the index in proportion to its market value.  Examples include
NASDAQ Composite Index, S&P 500, Wilshire 5000 Equity Index, Hang Seng
Index, and EAFE Index."))

;; definition of StockMarket

(tell (sumodocumentation StockMarket "General term for the organized trading of stocks through
exchanges and over-the-counter."))

;; definition of PriceWeightedIndex

(tell (sumodocumentation PriceWeightedIndex "A stock index in which each stock affects the index
in proportion to its price per share."))

;; definition of NikkeiIndex

(tell (sumodocumentation NikkeiIndex "Index of 225 leading stocks traded on the Tokyo Stock
Exchange."))


;;	Investment management


;; definition of Investment

(tell (sumodocumentation Investment "An item of value purchased for income or capital appreciation."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Investment Investment)
;; 	(exists (?Investing ?Agent)
;; 		(and
;; 			(agent ?Investing ?Agent)
;; 			(possesses ?Agent ?Investment))))

;; definition of Investor

(tell (sumodocumentation Investor "A person who purchases income-producing assets."))

;; Commented out because too many free variables
;;(<=>
;;	(instance ?Agent Investor)
;;	(exists (?Investing)
;;		(agent ?Investing ?Investor)))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(instance ?Agent Investor)
;; 	(exists (?Investment)
;; 		(and
;; 			(instance ?Investment Investment)
;; 			(possesses ?Agent ?Investment))))

;; definition of profit

(tell (AsymmetricSumorelation profit))
(tell (sumodocumentation profit "The positive gain from an investment or business operation after
subtracting for all expenses."))

;; sumo2loom is dropping the following statement because it uses
;; hasPurpose, which has Formula in its domain:
;; (=>
;; 	(instance ?Investing Investing)
;; 	(hasPurpose ?Investing
;; 		    (exists (?Profit)
;; 			    (profit ?Investing ?Profit))))

;; definition of AsssetAllocation

(tell (sumodocumentation AssetAllocation "The process of dividing investments among different kinds of
assets, such as Stocks, Bonds, RealEstate and cash, to optimize the risk/reward tradeoff based
on an individual's or institution's specific situation and goals."))

;; instance InvestmentAttribute


;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Attribute InvestmentAttribute)
;; 	(exists (?Account)
;; 		(and
;; 			(attribute ?Account ?Attribute)
;; 			(instance ?Account InvestmentAccount))))

;; definition of liquidity

(tell (AsymmetricSumorelation liquidity))
(tell (sumodocumentation liquidity "Degree to which accounts can be easily converted to cash."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(and
;; 		(instance ?Withdrawal Withdrawal)
;; 		(instance ?Account FinancialAccount)
;; 		(origin ?Withdrawal (CurrencyFn ?Account))
;; 		(not (exists (?Penalty)
;; 		     (and
;; 			   (instance ?Penalty Penalty)
;; 			   (destination ?Penalty (CurrencyFn ?Account))
;; 			   (causes ?Withdrawal ?Penalty)))))
;; 	(liquidity ?Account HighLiquidity))

;; definition of LiquidityAttribute

(tell (sumodocumentation LiquidityAttribute "A class of attribute-rels which describe the degree to
which accounts can be easily converted to cash."))

(tell (LiquidityAttribute HighLiquidity))
;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute HighLiquidity LowLiquidity)

(tell (LiquidityAttribute LowLiquidity))

;; definition of riskLevel

(tell (AsymmetricSumorelation riskLevel))

;; definition of RiskAttribute

(tell (sumodocumentation RiskAttribute "A class of attribute-rels which describe the degree of risk
of a particular investment."))

(tell (RiskAttribute HighRisk))
;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute HighRisk LowRisk)

(tell (RiskAttribute LowRisk))

;; definition of yieldLevel

(tell (AsymmetricSumorelation yieldLevel))
(tell (sumodocumentation yieldLevel "A profit obtained from an investment."))

;; definition of YieldAttribute

(tell (sumodocumentation YieldAttribute "A class of attribute-rels which describe the degree to which
accounts are profitable."))

(tell (YieldAttribute HighYield))
;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute HighYield LowYield)

(tell (YieldAttribute LowYield))

;; definition of potentialLoss

(tell (TernaryPredicate potentialLoss))
(tell (sumodocumentation potentialLoss "The maximum amount of money the Agent can lose by choosing
this type of Investment."))

;; definition of price

(tell (TernaryPredicate price))

;; definition of bidPrice


;; definition of askPrice


;; definition of Order

(tell (sumodocumentation Order "A request from a client to a broker to buy (buy order) or sell
(sell order) a specified amount of a particular security or commodity at a specific
price or at the market price."))

;; definition of PlacingAnOrder


;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;;      (and
;; 		(instance ?Place PlacingAnOrder)
;; 		(equal (WhenFn ?Place) ?Time))
;;      (exists (?Order ?Period)
;; 	        (and
;; 			(equal (WhenFn ?Order) ?Period)
;; 			(meetsTemporally ?Time ?Period))))

;; definition of MarketOrder

(tell (sumodocumentation MarketOrder "An order to buy or sell security at the best prices available."))

;; definition of orderFor

(tell (TernaryPredicate orderFor))

;; sumo2loom is dropping the following statement because it uses
;; hasPurpose, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(instance ?Order PlacingAnOrder)
;; 		(orderFor ?Order ?TransactionType ?Shares))
;; 	(hasPurpose ?Order
;; 		    (exists (?Transaction)
;; 			    (and
;; 				(instance ?Transaction ?TransactionType)
;; 				(patient ?Transaction ?Shares)))))

;; sumo2loom is dropping the following statement because it uses
;; KappaFn, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(instance ?Order MarketOrder)
;; 		(instance ?Broker Broker)
;; 		(agreementMember ?Order ?Broker)
;; 		(orderFor ?Order ?TransactionType ?Shares))
;; 	(holdsObligation (KappaFn ?Transaction
;; 			 (and
;; 				(instance ?Transaction ?TransactionType)
;; 				(patient ?Transaction ?Shares))) ?Broker))

;; definition of LimitOrder

(tell (sumodocumentation LimitOrder "LimitOrder is an order to a Broker  to buy a specified quantity
of a Security at or below a specified price, or to sell it at or above a specified limitPrice."))

;; definition of limitPrice

(tell (BinaryPredicate limitPrice))
(tell (AsymmetricSumorelation limitPrice))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Order LimitOrder)
;; 	(exists (?Price)
;; 		(limitPrice ?Order ?Price)))

;; sumo2loom is dropping the following statement because it uses
;; KappaFn, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(instance ?Order LimitOrder)
;; 		(agreementMember ?Order ?Broker)
;; 		(instance ?Broker Broker)
;; 		(orderFor ?Order Buying ?Object)
;; 		(measure ?Object ?Quantity)
;; 		(limitPrice ?Order ?LimitPrice)
;; 		(exists (?Time)
;; 			(and
;; 				(askPrice ?Object ?Price ?Time)
;; 				(lessThanOrEqualTo ?Price ?LimitPrice))))
;; 		(holdsObligation (KappaFn ?Buy
;; 				 (and
;; 					(instance ?Buy Buying)
;; 					(patient ?Buy ?Object)
;; 					(measure ?Object ?Quantity)
;; 					(equal (WhenFn ?Buy) ?BuyingTime)
;; 					(overlapsTemporally ?Time ?BuyingTime))) ?Broker))

;; sumo2loom is dropping the following statement because it uses
;; KappaFn, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(instance ?Order LimitOrder)
;; 		(agreementMember ?Order ?Broker)
;; 		(instance ?Broker Broker)
;; 		(orderFor ?Order Selling ?Object)
;; 		(measure ?Object ?Quantity)
;; 		(limitPrice ?Order ?LimitPrice)
;; 		(exists (?Time)
;; 			(and
;; 				(bidPrice ?Object ?Price ?Time)
;; 				(greaterThanOrEqualTo ?Price ?LimitPrice))))
;; 	(holdsObligation (KappaFn ?Sell
;; 			 (and
;; 				(instance ?Sell Selling)
;; 				(patient ?Sell ?Object)
;; 				(measure ?Object ?Quantity)
;; 				(equal (WhenFn ?Sell) ?SellingTime)
;; 				(overlapsTemporally ?SellingTime ?Time))) ?Broker))

;; definition of Broker

(tell (sumodocumentation broker "An individual or firm which acts as an intermediary between
a buyer and seller, usually charging a commisssion."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Broker Broker)
;; 	(exists (?Contract)
;; 		(and
;; 			(instance ?Contract ServiceContract)
;; 			(agreementMember ?Contract ?Broker))))

;; definition of StopOrder

(tell (sumodocumentation StopOrder "A market order to buy or sell a certain quantity of
a certain security if a specified price (the stopPrice) is reached or passed."))

;; definition of Liquidation

(tell (sumodocumentation Liquidation "The class of events of selling all of a company's assets,
paying outstanding debts, and distribution of the remainder to shareholders, and them
going out of business."))

;; definition of Dividend

(tell (sumodocumentation Dividend "A taxable payment declared by a company's board of directors
and given to its &%shareHolders out of the company's current or retained earnings.
Usually quarterly. Usually given as cash, but it can also take the form of &%Stock or
other sumoproperty."))

;; definition of Security

(tell (sumodocumentation Security "An investment instrument, other than an insurance policy or
&%FixedAnnuity insurance policy or fixed annuity issued by a corporation, government,
or other organization which offers evidence of debt or equity."))

;; definition of Annuity

(tell (sumodocumentation Annuity "A contract sold by an insurance company designed to provide
payments to the holder at specified intervals, usually after retirement. &%FixedAnnuities
guarantee a certain payment amount, while &%VariableAnnuities do not, but do have the
potential for greater returns; but both are relatively safe, low-yielding investments."))

;; definition of FixedAnnuity

(tell (sumodocumentation FixedAnnuity "An investment vehicle offered by an insurance company, that
guarantees a stream of fixed payments over the life of the annuity. The insurer, not the
insured, takes the investment risk."))

;; definition of Share

(tell (sumodocumentation Share "Certificate, representing one unit of ownership in a corporation,
&%MutualFund, or limited partnership."))

;; definition of shareOf


;; definition of shareHolder

(tell (BinaryPredicate shareHolder))
(tell (sumodocumentation shareHolder "(&%shareHolder ?Stock ?Agent) means that ?Agent possesses
shares of &%Stock in a corporation or mutual fund."))

;; definition of TaxFreeInvestment


;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Investment TaxFreeInvestment)
;; 	(not
;; 		(exists (?Tax)
;; 			(and
;; 				(instance ?Tax Tax)
;; 				(origin ?Tax ?Investment)))))

;; definition of TaxableInvestment


;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Investment TaxableInvestment)
;; 	(exists (?Tax)
;; 		(and
;; 			(instance ?Tax Tax)
;; 			(origin ?Tax ?Investment))))

;; definition of FinancialDefault

(tell (sumodocumentation FinancialDefault "Failure to make required debt payments on a timely basis
or to comply with other conditions of an obligation or agreement."))


;;  Types of Stocks


;; definition of Stock

(tell (sumodocumentation Stock "An instrument that signifies an ownership position,
or equity, in a &%Corporation, and represents a claim on its proportionate
share in the corporation's assets and profits."))

;; definition of CommonStock

(tell (sumodocumentation CommonStock "Securities representing equity, ownership in a
Corporation, providing voting rights, and entitling the holder to a share
of the company's success through dividends and/or capital appreciation.
In the event of liquidation, common stock holders have rights to a
company's assets only after bondholders, other debt holders, and
&%PrefereedStock holders have been satisfied."))

;; definition of PreferredStock

(tell (sumodocumentation PreferredStock "&%CapitalStock which provides a specific &%Dividend
that is paid before any dividends are paid to common stock holders, and which takes
precedence over common stock in the event of a liquidation.  Usually does not carry
voting rights."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Stock PreferredStock)
;; 	(exists (?Dividend ?Amount)
;; 		(and
;; 			(instance ?Dividend Dividend)
;; 			(transactionAmount ?Dividend ?Amount))))

;; definition of BlueChipStock

(tell (sumodocumentation BlueChipStock "&%Stock with a solid and stable earnings record from a
company that either leads or dominates or is a major player in a specific industry."))

;; definition of GrowthStock

(tell (sumodocumentation GrowthStock "Investment term that is applied to a &%Stock that is expected
to appreciate in value at a high rate, pay big dividends or split."))

;; definition of ValueStock

(tell (sumodocumentation ValueStock "When the shares in a company are considered attractive because
the company is undervalue, usually because it has a low P/E ratio."))

;; definition of DefensiveStock

(tell (sumodocumentation DefensiveStock "&%DefensiveStocks are stocks of food companies, drug
manufacturers and utility companies."))

;; definition of RestrictedStock

(tell (sumodocumentation RestrictedStock "&%Securities, usually issued in private placements, that
have limited transferability."))

;; definition of PennyStock

(tell (sumodocumentation PennyStock "Extremely speculative, high-risk &%Stock, usually
with a price of less than 5 dollars per share.  In the U.S., nearly all
are traded on the over-the-counter bulletin board."))



;; definition of StockSplit

(tell (sumodocumentation StockSplit "Exchange of the number of shares of stock outstanding
for a larger number."))

;; definition of splitFor

(tell (TernaryPredicate splitFor))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(possesses ?Agent ?Stocks)
;; 		(measure ?Stocks (MeasureFn ?Number Shares))
;; 		(exists (?Event)
;; 			(splitFor ?Event ?N1 ?N2)))
;; 	(and
;; 		(holdsDuring (ImmediateFutureFn (WhenFn ?Event))
;; 			     (and
;; 				  (equal ?N3 (MultiplicationFn ?Number ?N2))
;; 				  (equal ?NewNumber (DivisionFn ?N3 ?N1))
;; 				  (measure ?Stocks (MeasureFn ?NewNumber Shares))))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(price ?Stocks (MeasureFn ?Number DollarUnitedStates) ?Time)
;; 		(exists (?Event)
;; 			(and
;; 				(splitFor ?Event ?N1 ?N2)
;; 				(equal (WhenFn ?Event) ?TimeOfSplit))))
;; 	(and
;; 		(equal ?N3 (MultiplicationFn ?Number ?N1))
;; 		(equal ?NewNumber (DivisionFn ?N3 ?N2))
;; 		(price ?Stocks (MeasureFn ?NewNumber DollarUnitedStates) ?TimeAfterSplit)
;; 		(meetsTemporally ?Time ?TimeOfSplit)
;; 		(meetsTemporally ?TimeOfSplit ?TimeAfterSplit)))


;;  Bonds


;; Definition of Bond.

(tell (sumodocumentation Bond "A debt instrument issued for a period of more than one year with
the purpose of raising capital by borrowing. The Federal government, states, cities,
corporations, and many other types of institutions sell bonds. A bond is generally a
promise to repay the principal along with interest on a specified &%maturityDate."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Bond Bond)
;; 	(exists (?Date)
;; 		(maturityDate ?Bond ?Date)))


;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Bond Bond)
;; 		(couponInterest ?Bond ?Interest)
;; 		(possesses ?BondHolder ?Bond))
;; 	(exists (?Period ?Payment)
;; 		(and
;; 			(periodicPayment (AccountFn ?Bond) ?Interest ?Period)
;; 			(destination ?Payment ?BondHolder))))

;; definition of yield

(tell (BinaryPredicate yield))
(tell (sumodocumentation yield "The annual rate of return on an investment, expressed as a
percentage. For bonds and notes, it is the coupon rate divided by the market price."))

;; Definition of couponInterest.

(tell (BinaryPredicate couponInterest))
(tell (sumodocumentation couponInterest "(&%couponInterest ?BOND ?INTEREST) means that ?INTEREST is
the periodic interest payment made to bondholders during the life of the ?BOND."))

;; Definition of accruedInterest.

(tell (BinaryPredicate accruedInterest))
(tell (sumodocumentation accruedInterest "The accumulated coupon interest, paid to the seller of a
bond by the buyer unless the bond is in default."))

;; definition of faceValue

(tell (BinaryPredicate faceValue))
(tell (sumodocumentation faceValue "The nominal dollar amount assigned to a security by the issuer.
For an equity security, par is usually a very small amount that bears no relationship to
its market price, except for preferred stock, in which case par is used to calculate dividend
payments. For a debt security, par is the amount repaid to the investor when the bond matures
(usually, corporate bonds have a par value of $1000, municipal bonds $5000, and federal bonds
$10,000)."))

;; Definition of CouponBond

(tell (sumodocumentation CouponBond "An unregistered, negotiable bond on which interest and principal
are payable to the holder, regardless of whom it was originally issued to. The coupons are
attached to the bond, and each coupon represents a single interest payment. The holder submits
a coupon, usually semi-annually, to the issuer or paying agent-rel to receive payment. Coupon bonds
are being phased out in favor of registered bonds."))

;; definition of AccountFn

(tell (UnarySumofunction AccountFn))
(tell (sumodocumentation AccountFn "A unary function that maps a &%FinancialAsset to the &%FinancialAccount
associated with the Asset."))

;; Logic error -- ?Account variable roams free in consequent.
;;(<=>
;;	(exists (?Account)
;;		(and
;;			(instance ?Account FinancialAccount)
;;			(possesses ?Agent ?Asset)
;;			(equal ?Account (AccountFn ?Asset))))
;;	(accountHolder ?Account ?Agent))

;; Definition of ZeroCouponBond.

(tell (sumodocumentation ZeroCouponBond "A bond in which no periodic coupon is paid over the
life of the contract. Instead, both the principal and the interest are paid at the
maturity date."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Bond ZeroCouponBond)
;; 		(maturityDate (AccountFn ?Bond) ?Date)
;; 		(possesses ?BondHolder ?Bond)
;; 		(principalAmount (AccountFn ?Bond) ?Principal)
;; 		(agreementPeriod (AccountFn ?Bond) ?Period)
;; 		(interestEarned (AccountFn ?Bond) ?Interest ?Period)
;; 		(equal ?Total (AdditionFn ?Principal ?Interest)))
;; 	(exists (?Payment)
;; 		(and
;; 			(instance ?Payment Payment)
;; 			(destination ?Payment ?BondHolder)
;; 			(origin ?Payment (CurrencyFn ?BondAccount))
;; 			(transactionAmount ?Payment ?Total))))

;; Definition of RegisteredBond

(tell (sumodocumentation RegisteredBond "A bond issued with the name of the owner printed on the
face of the certificate. It can be transferred to another individual only with the
owner's endorsement."))

;; definition of MunicipalBond

(tell (sumodocumentation MunicipalBond "Bond issued by a state, city, or local government to
finance operations or special projects; interest on it is often tax-free."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Bond MunicipalBond)
;; 	(exists (?Agent)
;; 		(and
;; 			(instance ?Agent Government)
;; 			(issuedBy ?Bond ?Agent))))

;; definition of CorporateBond

(tell (sumodocumentation CorporateBond "A bond issued by a corporation. Such bonds usually have
a par value of $1,000, are taxable, have a term maturity, are paid for out of a sinking
fund accumulated for that purpose, and are traded on major exchanges."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Bond CorporateBond)
;; 	(exists (?Agent)
;; 		(and
;; 			(instance ?Agent Corporation)
;; 			(issuedBy ?Bond ?Agent))))

;; definition of SecuredBond

(tell (sumodocumentation SecuredBond "Bond backed by collateral, such as a mortgage
or lien, the title to which would be transferred to the bondholders in the
event of default."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Bond SecuredBond)
;; 	(exists (?Security)
;; 		(securedBy ?Bond ?Security)))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(instance ?Bond SecuredBond)
;; 		(securedBy ?Bond ?Security)
;; 		(possesses ?Agent ?Bond)
;; 		(exists (?Default)
;; 			(and
;; 				(instance ?Default FinancialDefault)
;; 				(patient ?Default ?Bond))))
;; 	(holdsDuring (ImmediateFutureFn (WhenFn ?Default))  (possesses ?Agent ?Security)))

;; definition of MortgageBond

(tell (sumodocumentation MortgageBond "These are bonds generally bought through a
government agency that deals in the real estate market.  They are bonds
issued by mortgage lenders."))

;; definition of JunkBond

(tell (sumodocumentation JunkBond "A high-risk, non-investment-grade bond with a low
credit rating, usually BB or lower; as a consequence, it usually has a high
yield."))




;; definition of GovernmentBond

(tell (sumodocumentation GovernmentBond "A bond sold by the U.S. government."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Bond GovernmentBond)
;; 	(exists (?Agent)
;; 		(and
;; 			(issuedBy ?Bond ?Agent)
;; 			(instance ?Agent Government))))




;; definition of IndexBond

(tell (sumodocumentation IndexBond "A bond whose cash flow is inflation-adjusted, by
being linked to the purchasing power of a particular currency."))

;; definition of PerformanceBond

(tell (sumodocumentation PerformanceBond "A bond issued by an insurance company to
guarantee satisfactory completion of a project by a contractor."))

;; definition of TreasuryBond

(tell (sumodocumentation TreasuryBond "A negotiable, coupon-bearing debt obligation
issued by the U.S. government and backed by its full faith and credit, having
a maturity of more than 7 years. Interest is paid semi-annually. Exempt from
state and local taxes."))

;; definition of CallableBond

(tell (sumodocumentation CallableBond "A bond which the issuer has the right to redeem
prior to its maturity date, under certain conditions."))

;; definition of callDate

(tell (BinaryPredicate callDate))
(tell (sumodocumentation callDate "Date, prior to maturity, on which a callable bond
may be redeemed."))


;; definition of FinancialRating

(tell (sumodocumentation FinancialRating "The highest rating is usually AAA-Rating,
and the lowest is D-Rating."))

;; definition of creditRating

(tell (BinaryPredicate creditRanking))
(tell (sumodocumentation creditRanking "(&%creditRanking ?Agent ?Rating) holds if
?Rating is a &%FinancialRating based on financial analysis by a credit
bureau, of one's financial history, specifically as it relates to one's
ability to meet debt obligations. Lenders use this information to decide
whether to approve a loan."))

;; definition of bondRating

(tell (sumodocumentation bondRating "A measure of the quality and safety of a bond,
based on the issuer's financial condition.  More specifically, an
evaluation from a rating service indicating the likelihood that a debt
issuer will be able to meet scheduled interest and principal repayments.
Typically, AAA is highest (best), and D is lowest (worst)."))

;; definition of AAA-Rating

(tell (FinancialRating AAA-Rating))
(tell (sumodocumentation AAA-Rating "The highest rating given by bond rating agencies"))

(tell (FinancialRating B-Rating))

(tell (FinancialRating C-Rating))

(tell (FinancialRating D-Rating))


;;  Options


;; Definition of Option.

(tell (sumodocumentation Option "An option is a contract to buy or sell 100 shares
of a stock at a fixed price (the strike price) on or before a fixed date."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Option Option)
;; 	(exists (?Type ?Date ?Stocks ?Price)
;; 		(and
;; 			(or
;; 				(equal ?Type CallOption)
;; 				(equal ?Type PutOption))
;; 			(instance ?Option ?Type)
;; 			(expirationDate ?Option ?Date)
;; 			(strikePrice ?Option ?Price)
;; 			(underlier ?Option ?Stocks)
;; 			(measure ?Stocks (MeasureFn 100 Shares)))))

;; definition of ConventionalOption

(tell (sumodocumentation ConventionalOption "Short-term option contracts."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Option ConventionalOption)
;; 	(exists (?Number)
;; 		(and
;; 			(agreementPeriod ?Option ?Period)
;; 			(duration ?Period (MeasureFn ?Number MonthDuration))
;; 			(lessThan ?Number 9))))

;; definition of LEAPS

(tell (sumodocumentation LEAPS "Calls and puts with an expiration as long as
thirty-nine months. Currently, equity LEAPS have two series at any
time with a January expiration. For example, in October 2000, LEAPS
are available with expirations of January 2002 and January 2003."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Option ConventionalOption)
;; 	(exists (?Number)
;; 		(and
;; 			(agreementPeriod ?Option ?Period)
;; 			(duration ?Period (MeasureFn ?Number MonthDuration))
;; 			(lessThan ?Number 39))))

;; optionHolder

(tell (sumodocumentation optionHolder "(&%optionHolder ?Option ?Agent) means that
?Agent is the holder of the option."))

;; optionSeller

(tell (sumodocumentation optionSeller "(&%optionSeller ?Option ?Agent) means that
?Agent is the writer of the option."))

;; Definition of strikePrice

(tell (BinaryPredicate strikePrice))
(tell (sumodocumentation strikePrice "The specified price on an option contract at
which the contract may be exercised, whereby a call option buyer can buy
the underlier or a put option buyer can sell the underlier."))

;; definition of expirationDate

(tell (sumodocumentation expirationDate "(&%expirationDate ?Contract ?Date) means that
?Date is the date on which ?Contract expires."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(expirationDate ?Contract ?Date)
;; 	(exists (?Period)
;; 		(and
;; 			(agreementPeriod ?Contract ?Period)
;; 			(finishes ?Date ?Period))))

;; Definition of  CallOption

(tell (sumodocumentation CallOption "An option contract that gives the holder the
right to buy a certain quantity (usually 100 shares) of an underlying
security from the writer of the option, at a specified price (the strike
price) up to a specified date (the expiration date)."))

;; sumo2loom is dropping the following statement because it uses
;; KappaFn, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(instance ?Option Option)
;; 		(optionHolder ?Option ?Agent)
;; 		(strikePrice ?Option ?Price)
;; 		(expirationDate ?Option ?ExpDate)
;; 		(underlier ?Option ?Stocks)
;; 		(price ?Stocks ?Price ?Time)
;; 		(instance ?Time TimeInterval)
;; 		(before (EndFn ?Time) (BeginFn ?ExpDate)))
;; 	(holdsAuthority (KappaFn ?Buy
;; 		(and
;; 			(instance ?Buy Buying)
;; 			(patient ?Buy ?Stocks)
;; 			(time ?Buy ?Time)
;; 			(measure ?Stocks (MeasureFn 100 Shares))
;; 			(agent ?Buy ?Agent))) ?Agent))

;; sumo2loom is dropping the following statement because it uses
;; KappaFn, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(instance ?Option Option)
;; 		(optionSeller ?Option ?Seller)
;; 		(strikePrice ?Option ?Price)
;; 		(expirationDate ?Option ?ExpDate)
;; 		(underlier ?Option ?Stocks)
;; 		(price ?Stocks ?Price ?Time)
;; 		(instance ?Time TimeInterval)
;; 		(before (EndFn ?Time) (BeginFn ?ExpDate)))
;; 	(holdsObligation (KappaFn ?Sell
;; 		(and
;; 			(instance ?Sell Selling)
;; 			(patient ?Sell ?Stocks)
;; 			(time ?Sell ?Time)
;; 			(measure ?Stocks (MeasureFn 100 Shares))
;; 			(agent ?Sell ?Agent))) ?Seller))

;; Definition of PutOption

(tell (sumodocumentation PutOption "An option contract that gives the holder the
right to sell a certain quantity of an underlying security to the writer
of the option, at a specified price (strike price) up to a specified date
(expiration date)."))

;; sumo2loom is dropping the following statement because it uses
;; KappaFn, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(instance ?Option Option)
;; 		(optionHolder ?Option ?Agent)
;; 		(strikePrice ?Option ?Price)
;; 		(expirationDate ?Option ?ExpDate)
;; 		(price ?Stocks ?Price ?Time)
;; 		(instance ?Time TimeInterval)
;; 		(before (EndFn ?Time) (BeginFn ?ExpDate))
;; 		(underlier ?Option ?Stocks))
;; 	(holdsAuthority (KappaFn ?Sell
;; 		(and
;; 			(instance ?Sell Selling)
;; 			(patient ?Sell ?Stocks)
;; 			(time ?Sell ?Time)
;; 			(measure ?Stocks (MeasureFn 100 Shares))
;; 			(agent ?Sell ?Agent))) ?Agent))

;; sumo2loom is dropping the following statement because it uses
;; KappaFn, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(instance ?Option Option)
;; 		(optionSeller ?Option ?Agent)
;; 		(strikePrice ?Option ?Price)
;; 		(expirationDate ?Option ?ExpDate)
;; 		(price ?Stocks ?Price ?Time)
;; 		(instance ?Time TimeInterval)
;; 		(before (EndFn ?Time) (BeginFn ?ExpDate))
;; 		(underlier ?Option ?Stocks))
;; 	(holdsObligation (KappaFn ?Buy
;; 		(and
;; 			(instance ?Buy Buying)
;; 			(patient ?Buy ?Stocks)
;; 			(time ?Buy ?Time)
;; 			(measure ?Stocks (MeasureFn 100 Shares))
;; 			(agent ?Buy ?Agent))) ?Agent))

;; definition of StockOption

(tell (sumodocumentation StockOption "An option in which the underlier is the
common stock of a corporation, giving the holder the right to buy or
sell its stock, at a specified price, by a specific date."))

;; definition of premium

(tell (BinaryPredicate premium))
(tell (sumodocumentation premium "Total price of an option."))


;; definition of underlier

(tell (BinaryPredicate underlier))
(tell (sumodocumentation underlier "(&%underlier ?Option ?Instrument) means that
?Instrument is a security which is subject to delivery upon exercise of
?Option."))

;; definition of ExerciseAnOption

(tell (FinancialTransaction ExerciseAnOption))
(tell (sumodocumentation ExerciseAnOption "An activity when the owner of the the &%Option
contract invokes his rights.  In the case of a call, the option owner buys the
underlying stock. In the case of a put, the option owner sells the underlying stock."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Exercise ExerciseAnOption)
;; 		(patient ?Exercise ?Option)
;; 		(instance ?Option CallOption)
;; 		(time ?Exercise ?Time)
;; 		(underlier ?Option ?Stocks))
;; 	(exists (?Buy)
;; 		(and
;; 			(instance ?Buy Buying)
;; 			(patient ?Buy ?Stocks)
;; 			(time ?Buy ?Time)
;; 			(measure ?Stocks (MeasureFn 100 Shares)))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Exercise ExerciseAnOption)
;; 		(patient ?Exercise ?Option)
;; 		(instance ?Option PutOption)
;; 		(time ?Exercise ?Time)
;; 		(underlier ?Option ?Stocks))
;; 	(exists (?Sell)
;; 		(and
;; 			(instance ?Sell Selling)
;; 			(patient ?Sell ?Stocks)
;; 			(time ?Sell ?Time)
;; 			(measure ?Stocks (MeasureFn 100 Shares)))))

;; definition of AmericanStyleOption

(tell (Option AmericanStyleOption))
(tell (sumodocumentation AmericanStyleOption "An option that can be exercised at any time
prior to its expiration date"))

;; definition of EuropeanStyleOption

(tell (Option EuropeanStyleOption))
(tell (sumodocumentation EuropeanStyleOption "An option that can be exercised only during
a specified period of time just prior to its expiration."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Option EuropeanStyleOption)
;; 		(expirationDate ?Option ?Date))
;; 	(exists (?Period)
;; 		(and
;; 			(instance ?Period TimeInterval)
;; 			(finishes ?Period ?Date)
;; 			(=>
;; 				(exists (?Time)
;; 					(and
;; 						(instance ?Exercise ExerciseAnOption)
;; 						(equal (WhenFn ?Exercise) ?Time)))
;; 				(temporalPart ?Time ?Period)))))

;; definition of EquityOption

(tell (sumodocumentation EquityOption "An option on shares of an individual common stock."))

;;    Types of Orders


;; definition of FillingAnOrder

(tell (sumodocumentation FillingAnOrder "Execute an order or buy or sell a security
or commodity."))

;; definition of CancellingAnOrder


;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Kill CancellingAnOrder)
;; 		(patient ?Kill ?Order))
;; 	(not (agreementActive ?Order (ImmediateFutureFn (WhenFn ?Kill)))))

;; definition of IOCOrder

(tell (sumodocumentation IOCOrder "Immediate or cancel Order is a type of option order
which gives the trading crowd one opportunity to take the other side of the
trade. After being announced, the order will be either partially or totally
filled with any remaining balance immediately cancelled. An IOC order, which
can be considered a type of day order, cannot be used as part of a GTC order
since it will be cancelled shortly after being entered. The difference between
fill-or-kill (FOK) orders and IOC orders is that a IOC order may be partially
executed."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Order IOCOrder)
;; 		(agreementPeriod ?Order ?Period))
;; 	(or
;; 		(exists (?Fill ?Time1)
;; 			(and
;; 				(instance ?Fill FillingAnOrder)
;; 				(patient ?Fill ?Order)
;; 				(equal (WhenFn ?Fill) ?Time1)
;; 				(starts ?Time1 ?Period)))
;; 		(exists (?Kill ?Time2)
;; 			(and
;; 				(instance ?Kill CancellingAnOrder)
;; 				(patient ?Kill ?Order)
;; 				(equal (WhenFn ?Kill) ?Time2)
;; 				(starts ?Time2 ?Period)))))

;; definition of FOKOrder

(tell (sumodocumentation FOKOrder "Fill-or-kill order is a type of option order
which requires that the order be executed completely or not at all.  A
fill-or-kill order is similar to an all-or-none (AON) order.  The
difference is that if the order cannot be completely executed (i.e.,
filled in its entirety) as soon as it is announced in the trading crowd,
it is to be 'killed' (i.e., cancelled) immediately.  Unlike an AON order,
a FOK order cannot be used as part of a GTC order."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Order FOKOrder)
;; 		(agreementPeriod ?Order ?Period))
;; 	(or
;; 		(exists (?Fill ?Time1)
;; 			(and
;; 				(instance ?Fill FillingAnOrder)
;; 				(patient ?Fill ?Order)
;; 				(equal (WhenFn ?Fill) ?Time1)
;; 				(starts ?Time1 ?Period)))
;; 		(exists (?Kill ?Time2)
;; 			(and
;; 				(instance ?Kill CancellingAnOrder)
;; 				(patient ?Kill ?Order)
;; 				(equal (WhenFn ?Kill) ?Time2)
;; 				(starts ?Time2 ?Period)))))

;; definition of AONOrder

(tell (sumodocumentation AONOrder "All-or-none order (AON) is a type of option order
which requires that the order be executed completely or not at all. An AON
order may be either a day order or a GTC order."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Order AONOrder)
;; 	(or
;; 		(instance ?Order DayOrder)
;; 		(instance ?Order GTCOrder)))

;; definition of GTCOrder

(tell (sumodocumentation GTCOrder "Good-'til-cancelled (GTC) order is a type of limit order
that remains in effect until it is either executed (filled) or cancelled, as opposed
to a day order, which expires if not executed by the end of the trading day. A GTC
option order is an order which if not executed will be automatically cancelled at the
option's expiration"))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Order GTCOrder)
;; 		(agreementPeriod ?Order ?Period))
;; 	(or
;; 		(exists (?Execute)
;; 			(and
;; 				(instance ?Execute ExecuteAnOrder)
;; 				(patient ?Execute ?Order)
;; 				(equal (WhenFn ?Execute) ?Time)
;; 				(overlapsTemporally ?Time ?Period)))
;; 		(exists (?Cancel)
;; 			(and
;; 				(instance ?Cancel CancellingAnOrder)
;; 				(patient ?Cancel ?Order)
;; 				(equal (WhenFn ?Cancel) ?End)
;; 				(finishes ?End ?Period)))))

;; definition of DayOrder

(tell (sumodocumentation DayOrder "A type of option order which instructs the broker
to cancel any unfilled portion of the order at the close of trading on the
day the order is first entered."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Order DayOrder)
;; 	(and
;; 		(agreementPeriod ?Order ?Period)
;; 		(duration ?Period (MeasureFn 1 DayDuration))))

;; definition of MNHOrder

(tell (sumodocumentation MNHOrder "A Market-not-held order is a type of market order
which allows the investor to give discretion to the floor broker regarding
the price and/or time at which a trade is executed."))

;; definition of MOCOrder

(tell (sumodocumentation MOCOrder "A Market-on-close order is a type of option order
which requires that an order be executed at or near the close of trading on
the day the order is entered. A MOC order, which can be considered a type of
day order, cannot be used as part of a GTC order"))


;; definition of NHOrder

(tell (sumodocumentation NHOrder "A not-held order is a type of order which releases
normal obligations implied by the other terms of the order. For example, a
limit order designated as not-held allows discretion to the floor trader in
filling the order when the market trades at the limit price of the order. In
this case, there is no obligation to provide the customer with an execution if
the market trades through the limit price on the order."))

;; definition of OCOOrder

(tell (sumodocumentation OCOOrder "One-cancels-other order (OCO) is a type of option
order which treats two or more option orders as a package, whereby the execution
of any one of the orders causes all the orders to be reduced by the same amount.
For example, the investor would enter an OCO order if he/she wished to buy
10 May 60 calls or 10 June 60 calls or any combination of the two which when
summed equaled 10 contracts. An OCO order may be either a day order or a GTC order"))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Order OCOOrder)
;; 	(or
;; 		(instance ?Order DayOrder)
;; 		(instance ?Order GTCOrder)))

;; definition of Bullish

(tell (sumodocumentation Bullish "An attribute-rel describing the opinion that a stock, or the
market in general, will rise in price -- a positive or optimistic outlook."))

;; definition of Bearish

(tell (sumodocumentation Bearish "An adjective describing the opinion that a stock, or
a market in general, will decline in price -- a negative or pessimistic outlook."))

;; definition of IndexOption

(tell (sumodocumentation IndexOption "An option whose underlying interest is an index.
Generally, index options are cash-settled."))

;; definition of inTheMoney

(tell (BinaryPredicate inTheMoney))
(tell (sumodocumentation inTheMoney "A call option is in the money if the stock
price is above the strike price.  A put option is in the money if the
stock price is below the strike price."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(exists (?Stock ?StockPrice ?StrikePrice)
;; 		(and
;; 			(instance ?Option CallOption)
;; 			(underlier ?Option ?Stock)
;; 			(price ?Stock ?StockPrice ?Time)
;; 			(strikePrice ?Option ?StrikePrice)
;; 			(lessThan ?StrikePrice ?StockPrice)))
;; 	(inTheMoney ?Option ?Time))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(exists (?Stock ?StockPrice ?StrikePrice)
;; 		(and
;; 			(instance ?Option PutOption)
;; 			(underlier ?Option ?Stock)
;; 			(price ?Stock ?StockPrice ?Time)
;; 			(strikePrice ?Option ?StrikePrice)
;; 			(lessThan ?StockPrice ?StrikePrice)))
;; 	(inTheMoney ?Option ?Time))

;; definition of atTheMoney

(tell (BinaryPredicate atTheMoney))
(tell (sumodocumentation atTheMoney "A term that describes an option with a strike
price that is equal to the current market price of the underlying stock."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(exists (?Stock ?StockPrice ?StrikePrice)
;; 		(and
;; 			(instance ?Option Option)
;; 			(underlier ?Option ?Stock)
;; 			(price ?Stock ?StockPrice ?Time)
;; 			(strikePrice ?Option ?StrikePrice)
;; 			(equal ?StockPrice ?StrikePrice)))
;; 	(atTheMoney ?Option ?Time))

;; definition of outOfTheMoney

(tell (BinaryPredicate outOfTheMoney))
(tell (sumodocumentation outOfTheMoney "A call option is out of the money if the
stock price is below its strike price. A put option is out of the money
if the stock price is above its strike price."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(exists (?Stock ?StockPrice ?StrikePrice)
;; 		(and
;; 			(instance ?Option CallOption)
;; 			(underlier ?Option ?Stock)
;; 			(price ?Stock ?StockPrice ?Time)
;; 			(strikePrice ?Option ?StrikePrice)
;; 			(lessThan ?StockPrice ?StrikePrice)))
;; 	(outOfTheMoney ?Option ?Time))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(exists (?Stock ?StockPrice ?StrikePrice)
;; 		(and
;; 			(instance ?Option PutOption)
;; 			(underlier ?Option ?Stock)
;; 			(price ?Stock ?StockPrice ?Time)
;; 			(strikePrice ?Option ?StrikePrice)
;; 			(lessThan ?StrikePrice ?StockPrice)))
;; 	(outOfTheMoney ?Option ?Time))


;; strategies


;; definition of OptionStrategy


;; definition of SingleOption


(tell (sumodocumentation SingleOption "A put or call option by itself, as opposed to
multiple options as used in a spread or straddle."))

;; sumo2loom is dropping the following statement because it uses
;; KappaFn, which has Formula in its domain:
;; (=>
;; 	(instance ?Strategy SingleOption)
;; 	(equal (CardinalityFn (KappaFn ?Option (patient ?Strategy ?Option))) 1))

;; definition of SpreadOption

(tell (sumodocumentation SpreadOption "The purchase of one option and the
simultaneous sale of a related option, such as two options of the same
class but different strike prices and/or expiration dates."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Spread SpreadOption)
;; 	(exists (?Option1 ?Option2 ?Buy ?Sell ?Time)
;; 		(and
;; 			(instance ?Option1 Option)
;; 			(instance ?Option2 Option)
;; 			(instance ?Buy Buying)
;; 			(instance ?Sell Selling)
;; 			(patient ?Buy ?Option1)
;; 			(patient ?Sell ?Option2)
;; 			(time ?Buy ?Time)
;; 			(time ?Sell ?Time))))

;; definition of ButterflySpread

(tell (sumodocumentation ButterflyOption "A complex option strategy that involves
selling two calls and buying two calls on the same or different markets,
with several maturity dates.  One of the options has a higher exercise
price and the other has a lower exercise price than the other two options.
The payoff diagram resembles the shape of a butterfly."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Spread ButterflySpread)
;; 	(exists (?Call1 ?Call2 ?Call3 ?Call4 ?Price1 ?Price2 ?Price3 ?Price4)
;; 		(and
;; 			(instance ?Call1 CallOption)
;; 			(instance ?Call2 CallOption)
;; 			(instance ?Call3 CallOption)
;; 			(instance ?Call4 CallOption)
;; 			(strikePrice ?Call1 ?Price1)
;; 			(strikePrice ?Call2 ?Price2)
;; 			(strikePrice ?Call3 ?Price3)
;; 			(strikePrice ?Call4 ?Price4)
;; 			(lessThan ?Price1 ?Price2)
;; 			(lessThan ?Price1 ?Price3)
;; 			(greaterThan ?Price4 ?Price2)
;; 			(greaterThan ?Price4 ?Price2))))

;; definition of Straddle

(tell (sumodocumentation Straddle "The purchase or sale of an equal number of puts and
calls, with the same strike price and expiration dates."))

;; sumo2loom is dropping the following statement because it uses
;; KappaFn, which has Formula in its domain:
;; (=>
;; 	(instance ?Straddle Straddle)
;; 	(exists (?Price ?Date ?Number)
;; 		(and
;; 			(equal (CardinalityFn (KappaFn ?Call
;; 			       (and
;; 					(instance ?Call CallOption)
;; 					(part ?Call ?Straddle)))) ?Number)
;; 			(equal (CardinalityFn (KappaFn ?Put
;; 			       (and
;; 					(instance ?Put PutOption)
;; 					(part ?Put ?Straddle)))) ?Number)
;; 			(forall (?Option)
;; 				(=>
;; 					(and
;; 						(instance ?Option Option)
;; 						(part ?Option ?Straddle))
;; 
;; 					(and
;; 						(expirationDate ?Option ?Date)
;; 						(stikePrice ?Option ?Price)))))))

;; definition of LongStraddle

(tell (sumodocumentation LongStraddle "A straddle in which a long position is taken in
both a put and a call option"))

;; definition of ShortSale

(tell (sumodocumentation ShortSale "Borrowing a security (or commodity futures
contract) from a broker and selling it, with the understanding that it
must later be bought back (hopefully at a lower price) and returned to the
broker.  SEC rules allow investors to sell short only on an uptick or a
zero-plus tick, to prevent 'pool operators' from driving down a stock
price through heavy short-selling, then buying the shares for a large
profit."))

;; definition of BorrowedStock

(tell (sumodocumentation BorrowedStock "Stock in a short sale."))

;; definition of StockMarketTransaction


;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Transaction StockMarketTransaction)
;; 	(exists (?Market)
;; 		(and
;; 			(instance ?Market StockMarket)
;; 			(located ?Transaction ?Market))))


;; definition of Uptick

(tell (sumodocumentation Uptick "A stock market transaction (or sometimes, a quote)
at a price higher than the preceding one for the same security."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Uptick Uptick)
;; 		(patient ?Uptick ?Stock)
;; 		(equal (WhenFn ?Uptick) ?Time1)
;; 		(price ?Stock ?Price1 ?Time1))
;; 	(exists (?Transaction ?Time2)
;; 		(and
;; 			(instance ?Transaction StockMarketTransaction)
;; 			(patient ?Transaction ?Stock)
;; 			(equal (WhenFn ?Transaction) ?Time2)
;; 			(meetsTemporally ?Time2 ?Time1)
;; 			(price ?Stock ?Price2 ?Time2)
;; 			(lessThan ?Price2 ?Price1))))

;; definition of Downtick

(tell (sumodocumentation Downtick "A stock market transaction (or sometimes, a quote)
at a price lower than the preceding one for the same security."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Downtick Downtick)
;; 		(patient ?Downtick ?Stock)
;; 		(equal (WhenFn ?Downtick) ?Time1)
;; 		(price ?Stock ?Price1 ?Time1))
;; 	(exists (?Transaction ?Time2)
;; 		(and
;; 			(instance ?Transaction StockMarketTransaction)
;; 			(patient ?Transaction ?Stock)
;; 			(equal (WhenFn ?Transaction) ?Time2)
;; 			(meetsTemporally ?Time2 ?Time1)
;; 			(price ?Stock ?Price2 ?Time2)
;; 			(greaterThan ?Price2 ?Price1))))


;; Income, employment, compensations


;; definition of Employment


;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(employs ?Org ?Agent)
;; 	(exists (?Employment)
;; 		(and
;; 			(instance ?Employment Employment)
;; 			(agreementMember ?Employment ?Org)
;; 			(agreementMember ?Employment ?Agent))))

;; definition of income

(tell (TernaryPredicate income))
(tell (sumodocumentation incomeOf "(&%incomeOf ?Agent ?Money ?Period) means that
?Money is the amount of money or its equivalent received during a period
of time in exchange for labor or services, from the sale of goods or
sumoproperty, or as profit from financial investments"))

;; definition of monthlyIncome

(tell (AsymmetricSumorelation monthlyIncome))
(tell (sumodocumentation monthlyIncome "(&%monthlyIncome ?Agent ?Money) means that
?Money is the amount of money received during one month period"))

;; Error -- income is a TernaryPredicate
;;(<=>
;;	(monthlyIncome ?Agent ?Money)
;;	(exists (?Month)
;;		(and
;;			(instance ?Month Month)
;;			(income ?Agent ?Month))))

;; definition of incomeEarned

(tell (TernaryPredicate incomeEarned))
(tell (sumodocumentation incomeEarned "Money earned as a result of an Activity"))


;; definition of taxDeferredIncome

(tell (sumodocumentation taxDeferredIncome "Income whose taxes can be postponed
until a later date.  Examples include IRA, 401(k), Keogh Plan, annuity,
Savings Bond and Employee Stock Ownership Plan."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(taxDeferredIncome ?Agent ?Income ?Activity)
;; 		(time ?Activity ?Time))
;; 	(not
;; 	     (exists (?Tax)
;; 		     (and
;; 				(instance ?Tax Tax)
;; 				(causes ?Activity ?Tax)
;; 				(time ?Tax ?Time)))))

;; definition of afterTaxIncome

(tell (sumodocumentation afterTaxIncome "An amount (usually income) after taxes
have been subtracted."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(exists (?Agent ?Tax)
;; 		(and
;; 			(incomeEarned ?Agent ?Income ?Activity)
;; 			(amountCharged ?Tax ?TaxAmount)
;; 			(causes ?Activity ?Tax)
;; 			(equal ?ATIncome (SubtractionFn ?Income ?TaxAmount))))
;; 	(afterTaxIncome ?Activity ?ATIncome))

;; definition of beforeTaxIncome

(tell (sumodocumentation beforeTaxIncome "Income before taxes are deducted"))

;; definition of employeeContribution

(tell (TernaryPredicate employeeContribution))
(tell (sumodocumentation employeeContribution "An individual's contribution to his/her
own retirement plan, often tax-deferred."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(employeeContribution ?Agent ?Money ?Period)
;; 	(exists (?Org ?Plan)
;; 		(and
;; 			(instance ?Plan PensionPlan)
;; 			(employs ?Org ?Agent)
;; 			(agent ?Plan ?Org)
;; 			(destination ?Plan ?Agent))))

;; definition of compensationPackage

(tell (TernaryPredicate compensationPackage))
(tell (sumodocumentation compensationPackage "The total monetary value an employee
receives during a certain time period."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(compensationPackage ?Agent ?Money ?Period)
;; 	(exists (?Activity)
;; 		(and
;; 			(instance ?Activity OccupationalProcess)
;; 			(agent ?Activity ?Agent)
;; 			(equal ?Period (WhenFn ?Activity))
;; 			(incomeEarned ?Agent ?Money ?Activity))))


;; Retirement plans


;; definition of PensionPlan

(tell (sumodocumentation PensionPlan "A qualified retirement plan set up by a
corporation, labor union, government, or other organization for its
employees.  Examples include profit-sharing plans, stock bonus and
Employee Stock Ownership Plans, thrift plans, target benefit plans, money
purchase plans, and defined benefit plans."))



;;definition of ProfitSharingPlan

(tell (sumodocumentation ProfitSharingPlan "An arsumorangement in which an employer
shares its profits with its employees.  The compensation can be stocks,
bonds, or cash, and can be immediate or deferred until retirement."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Plan ProfitSharingPlan)
;; 		(destination ?Plan ?Agent)
;; 		(employs ?Org ?Agent)
;; 		(profit ?Activity ?Profit)
;; 		(agent ?Activity ?Org))
;; 	(exists (?Compensation ?Payment)
;; 		(and
;; 			(instance ?Payment Payment)
;; 			(transactionAmount ?Payment ?Compensation)
;; 			(lessThan ?Compensation ?Profit)
;; 			(destination ?Payment ?Agent))))

;; definition of IndividualRetirementAccount

(tell (sumodocumentation IndividualRetirementAccount "A tax-deferred retirement
account for an individual that permits individuals to set aside up to
$2,000 per year, with earnings tax-deferred until withdrawals begin at age
59 1/2 or later (or earlier, with a 10% penalty).  Only those who do not
participate in a pension plan at work or who do participate and meet
certain income guidelines can make deductible contributions to an IRA.
All others can make contributions to an IRA on a non-deductible basis.
Such contributions qualify as a deduction against income earned in that
year and interest accumulates tax-deferred until the funds are withdrawn."))

;; definition of 401K-Plan

(tell (sumodocumentation 401K-Plan "A defined contribution plan offered by a
corporation to its employees, which allows employees to set aside
tax-deferred income for retirement purposes.  The name 401(k) comes from
the IRS section describing the program."))

;; definition of DefinedContributionPlan

(tell (sumodocumentation DefinedContributionPlan "A company retirement plan, such as
a 401(k) or 403(b), in which the employee elects to defer some amount of
his/her salary into the plan and bears the investment risk."))

;; definition of 403B-Plan

(tell (sumodocumentation 403B-Plan "A retirement plan similar to a 401(k) plan, but
one which is offered by non-profit organizations, such as universities and
some charitable organizations, rather than corporations."))

;; definition of SARSEPPlan


;; definition of Rollover

(tell (sumodocumentation Rollover  "A tax-free reinvestment of a distribution from a
qualified retirement plan into an IRA or other qualified plan within 60 days.
Also called IRA rollover. Or more generally, a movement of funds from one investment
to another."))

;; definition of DirectRollover

(tell (sumodocumentation DirectRollover "A distribution from qualified pension plan, 401(k)
 plan, or 403(b) plan, that is remitted directly to the trustee, custodian, or
issuer of the receiving IRA and is reported to the IRS as a rollover. This can only
be done once per year, per account."))

;; definition of  408K-Plan

(tell (sumodocumentation 408K-Plan "A simpler alternative to a 401(k) plan available
only to companies with 25 or fewer employees, which gives employees the
opportunity to make contributions to their SEP accounts with pre-tax
dollars and reduce their current year's net income."))

;; definition of  accountNumber

(tell (BinaryPredicate accountSumonumber))
(tell (AsymmetricSumorelation accountSumonumber))

;; definition of stockSymbol

(tell (BinaryPredicate stockSymbol))
(tell (AsymmetricSumorelation stockSymbol))
(tell (sumodocumentation stockSymbol "A unique symbol assigned to a security. NYSE and
AMEX listed stocks have symbols of three characters or less. NASDAQ-listed
securities have four or five characters."))

;; definition of RothIRAAccount

(tell (sumodocumentation RothIRAAccount "An individual retirement account in which a person
can set aside after-tax income up to a specified amount each year. Earnings on the
account are tax-free, and tax-free withdrawals may be made after age 591/2."))

;; definition of VisaCard


;; definition of MasterCard


;; definition of DiscoverCard


;; definition of AmericanExpressCard


;; definition of  checkNumber

(tell (AsymmetricSumorelation checkSumonumber))

;; definition of  netAmount

(tell (BinaryPredicate netAmount))
(tell (AsymmetricSumorelation netAmount))
(tell (sumodocumentation netAmount "The amount due the supplier after commissions
have been deducted."))

;; definition of BrokerageAccount

(tell (InvestmentAccount BrokerageAccount))
(tell (sumodocumentation BrokerageAccount "A fund that a customer has entrusted to
a securities brokerage."))

;; definition of effectiveDate

(tell (sumodocumentation effectiveDate "Legal date an agreement or document goes into force."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(effectiveDate ?Agreement ?StartDate)
;; 	(exists (?Period)
;; 		(and
;; 			(agreementPeriod ?Agreement ?Period)
;; 			(starts ?StartDate ?Period))))

;; definition of closingPrice

(tell (sumodocumentation closingPrice "Price of the last transaction of a particular stock
completed during a day's trading session on an exchange."))

;; definition of finalPrice


;; definition of Cash

(tell (sumodocumentation Cash "Circulating paper money"))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Cash Cash)
;; 	(exists (?Value)
;; 		(monetaryValue ?Cash ?Value)))

;; definition of riskTolerance

(tell (BinaryPredicate riskTolerance))
(tell (AsymmetricSumorelation riskTolerance))


;; definition of cardCode

(tell (BinaryPredicate cardCode))
(tell (sumodocumentation cardCode "(&%cardCode ?Code ?Card) means that ?Code represents
the account number of the BankCard ?Card."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(cardCode ?Code ?Card)
;; 		(cardAccount ?Card ?Account))
;; 	(exists (?Encoding)
;; 		(and
;; 			(instance ?Encoding Encoding)
;; 			(patient ?Encoding ?Account))))

;; definition of ValidCard

(tell (sumodocumentation ValidCard "A class of valid BankCards"))


;; definition of ExpiredCard

(tell (sumodocumentation ExpiredCard "A class of expired BankCards."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(holdsDuring ?Time (instance ?Card ExpiredCard))
;; 		(cardAccount ?Card ?Account))
;; 	(not (agreementActive ?Card ?Time)))

;; definition of pin

(tell (BinaryPredicate pin))
(tell (sumodocumentation pin "(&%pin ?PIN ?Card) means that ?PIN is a personal identification
number linked to the ?Card."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Card DebitCard)
;; 		(possesses ?Card ?Agent)
;; 		(instance ?Transaction FinancialTransaction)
;; 		(instrument ?Transaction ?Card))
;; 	(exists (?PIN ?Enter)
;; 		(and
;; 			(pin ?PIN ?Card)
;; 			(instance ?Enter EnteringAPin)
;; 			(patient ?Enter ?PIN)
;; 			(agent ?Enter ?Agent))))

;; definition of EnteringAPin

(tell (sumodocumentation EnteringAPin "A subclass of &%AuthorizationOfTransaction where
a customer enters his/her personal identification number."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Enter EnteringAPin)
;; 	(exists (?Pin ?Card)
;; 		(and
;; 			(pin ?Pin ?Card)
;; 			(patient ?Enter ?Pin))))

(tell (sumodocumentation VerifyingCardCode "A subclass of &%AuthorizationOfTransaction
where an ATM machine checks the code of the BankCard inserted to this machine."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Check VerifyingCardCode)
;; 		(patient ?Check ?Code)
;; 		(codeCard ?Code ?Card))
;; 	(exists (?Decode)
;; 		(and
;; 			(instance ?Decode Decoding)
;; 			(subProcess ?Decode ?Check)
;; 			(patient ?Decode ?Code))))

;; definition of ATMMachine

(tell (sumodocumentation ATMMachine "(Automatic Teller Machine) A banking terminal that
accepts deposits and dispenses cash. ATMs are activated by inserting a cash or
credit card that contains the user's account number and PIN on a magnetic stripe.
The ATM calls up the bank's computers to verify the balance, dispenses the cash
and then transmits a completed transaction notice."))

(tell (sumodocumentation FinancialService "Services performed by &%FinancialOrganizations"))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Service FinancialService)
;; 	(exists (?Org)
;; 		(and
;; 			(instance ?Org FinancialOrganization)
;; 			(agent ?Service ?Org))))




(tell (sumodocumentation CommercialService "Work done for others as an occupation
or business."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Service CommercialService)
;; 	(exists (?Org)
;; 		(and
;; 			(instance ?Org Organization)
;; 			(agent ?Service ?Org))))

;; sumo2loom is dropping the following statement because it uses
;; hasPurpose, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(instance ?Service CommercialService)
;; 		(agent ?Service ?Agent)
;; 		(employs ?Org ?Agent)
;; 		(destination ?Service ?Customer))
;; 	(hasPurpose ?Service
;; 		    (exists (?Transaction)
;; 			    (and
;; 				(instance ?Transaction FinancialTransaction)
;; 				(destination ?Transaction ?Org)
;; 				(origin ?Transaction ?Customer)))))

(tell (IrreflexiveSumorelation customer))
(tell (BinaryPredicate customer))
(tell (sumodocumentation customer "A very general relation that exists whenever there
is a &%FinancialService between the two &%Agents such that the first is
the &%destination of the &%FinancialService and the second is the
&%agent-rel."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(customer ?Agent1 ?Agent2)
;; 	(exists (?Service)
;; 		(and
;; 			(instance ?Service FinancialService)
;; 			(agent ?Service ?Agent2)
;; 			(destination ?Service ?Agent1))))


(tell (TernaryPredicate customerRepresentative))
(tell (sumodocumentation customerRepresentative "(&%customerRepresentative
?PERSON1 ?PERSON2 ?ORG) means that ?PERSON1 acts as a representative
of &%Organization ?ORG in a &%SocialInteraction involving ?PERSON2."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(customerRepresentative ?Person1 ?Person2 ?Org)
;; 	(exists (?Service)
;; 		(and
;; 			(instance ?Service FinancialService)
;; 			(employs ?Org ?Person1)
;; 			(agent ?Service ?Person1)
;; 			(destination ?Service ?Person2))))

(tell (Position Manager))
(tell (sumodocumentation Manager "One who directs a business or other enterprise."))

(tell (sumodocumentation ATMSlot "A narrow opening in an ATM machine where cards are inserted."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Slot ATMSlot)
;; 	(exists (?ATM)
;; 		(and
;; 			(instance ?ATM ATMMachine)
;; 			(hole ?Slot ?ATM))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Slot ATMSlot)
;; 	(exists (?Insert ?Card)
;; 		(and
;; 			(instance ?Insert Putting)
;; 			(patient ?Insert ?Card)
;; 			(instance ?Card BankCard)
;; 			(destination ?Insert ?Slot))))

(tell (BinaryPredicate address))
(tell (sumodocumentation address "(address ?Address ?Agent) means that ?Address
describes The location at which ?Agent may be found or reached."))



(tell (Device Telephone))
(tell (sumodocumentation Telephone "An instrument that converts voice and other sound
signals into a form that can be transmitted to remote locations and that
receives and reconverts waves into sound signals."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Phone Telephone)
;; 		(possesses ?Agent ?Phone))
;; 	(exists (?Communication)
;; 		(and
;; 			(instance ?Communication Communication)
;; 			(agent ?Communication ?Agent)
;; 			(instrument ?Communication ?Phone))))

(tell (BinaryPredicate phoneSumonumber))
(tell (sumodocumentation phoneSumonumber "(&%phoneSumonumber ?Phone ?Agent) holds if ?Phone is
a phone number corresponding to the Telephone ?Phone."))

(tell (BinaryPredicate dayPhone))
(tell (sumodocumentation dayPhone "(&%dayPhone ?Phone ?Agent) means that ?Phone is a phone
number corresponding to the location where ?Agent can be reached during the day."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(dayPhone ?Number ?Agent)
;; 		(instance ?Day Day))
;; 	(exists (?Phone)
;; 		(and
;; 			(phoneNumber ?Number ?Phone)
;; 			(holdsDuring (HourFn ?Number ?Day) (possesses ?Agent ?Phone))
;; 			(lessThan ?Number 18))))

(tell (BinaryPredicate eveningPhone))
(tell (sumodocumentation eveningPhone "(&%eveningPhone ?Phone ?Agent) means that ?Phone
is a phone number corresponidng to the location where ?Agent can be reached
during the evening."))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(eveningPhone ?Number ?Agent)
;; 		(instance ?Day Day))
;; 	(exists (?Phone)
;; 		(and
;; 			(phoneNumber ?Number ?Phone)
;; 			(holdsDuring (HourFn ?Number ?Day) (possesses ?Agent ?Phone))
;; 			(greaterThan ?Number 18))))

(tell (BinaryPredicate emailAddress))
(tell (sumodocumentation emailAddress "(&%emailAddress ?Address ?Agent) means that ?Address is
an electronic address of the location where ?Agent can be reached."))

(tell (sumodocumentation Fax "The communication of a printed page between remote locations."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Fax Fax)
;; 	(exists (?FaxMachine)
;; 		(and
;; 			(instance ?FaxMachine FaxMachine)
;; 			(instrument ?Fax ?FaxMachine))))

(tell (sumodocumentation FaxMachine "Fax machines scan a paper form and transmit a coded
image over the telephone system. The receiving machine prints a facsimile of
the original. A fax machine is made up of a scanner, printer and modem with
fax signaling."))


(tell (sumodocumentation firstName "(firstName ?Agent ?Name) holds if ?Name is a given
name or the name that occurs first in a given name."))

(tell (sumodocumentation availableBalance "(&%availableBalance ?Account ?Day ?Amount) means
that ?Amount is the balance which is available for withdrawal from the &%FinancialAccount
?Account."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(exists (?Transaction)
;; 		(and
;; 			(instance ?Transaction FinancialTransaction)
;; 			(origin ?Transaction (CurrencyFn ?Account))
;; 			(transactionAmount ?Transaction ?Amount)
;; 			(date ?Transaction ?Day)))
;;         (exists (?Amount2)
;; 		(and
;; 			(availableBalance ?Account ?Day ?Amount2)
;; 			(greaterThanOrEqualTo ?Amount1 ?Amount2))))

(tell (sumodocumentation availableCash "(&%availableCash ?Account ?Day ?Cash) holds if
?Cash is a cash amount available for withdrawal from the &%FinancialAccount
?Account."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(exists (?Transaction)
;; 		(and
;; 			(instance ?Transaction FinancialTransaction)
;; 			(origin ?Transaction (CurrencyFn ?Account))
;; 			(transactionAmount ?Transaction ?Amount)
;; 			(instance ?Cash Cash)
;; 			(instrument ?Transaction ?Cash)
;; 			(date ?Transaction ?Day)))
;;         (exists (?Amount2)
;; 		(and
;; 			(availableCash ?Account ?Day ?Amount2)
;; 			(greaterThanOrEqualTo ?Amount1 ?Amount2))))

;; paymentsPerPeriod

(tell (TernaryPredicate paymentsPerPeriod))
(tell (sumodocumentation paymentsPerPeriod "(&%paymentsPerPeriod ?Account ?Amount ?Period)
holds if ?Amount is the amount paid on the FinancialAccount ?Account during the
time period ?Period."))

(tell (TernaryPredicate purchasesPerPeriod))
(tell (sumodocumentation purchasesPerPeriod "(&%purchasesPerPeriod ?Account ?Amount ?Period)
holds if ?Amount is the amount of purchases added to the FinancialAccount ?Account
during the time period ?Period."))

(tell (TernaryPredicate creditsPerPeriod))
(tell (sumodocumentation creditsPerPeriod "(&%creditsPerPeriod ?Account ?Amount ?Period)
holds if ?Amount is the amount credited to the FinancialAccount ?Account during
the time period ?Period."))

(tell (BinaryPredicate confirmationSumonumber))
(tell (AsymmetricSumorelation confirmationSumonumber))

(tell (sumodocumentation BankStatement "A monthly report sent to a debtor or bank depositor."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Statement BankStatement)
;; 		(statementAccount ?Statement ?Account))
;; 	(exists (?Transaction)
;; 		(and
;; 			(instance ?Transaction FinancialTransaction)
;; 			(or
;; 				(origin ?Transaction (CurrencyFn ?Account))
;; 				(destination ?Transaction (CurrencyFn ?Account)))
;; 			(realization ?Statement ?Transaction))))

(tell (BinaryPredicate lastStatement))
(tell (sumodocumentation lastStatement "(&%lastStatement ?Account ?Statement) means that
?Statement is the most recent monthly report sent to a debtor or bank depositor."))


(tell (BinaryPredicate loanInterest))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(exists (?Period)
;; 		(and
;; 			(instance ?Loan Loan)
;; 			(agreementPeriod ?Loan ?Period)
;; 			(interestEarned ?Loan ?Amount ?Period)))
;; 	(loanInterest ?Loan ?Amount))

(tell (sumodocumentation Title "The instrument, such as a deed, that constitutes evidence
of a legal right of possession or control."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Title Title)
;; 	(exists (?Property ?Agent)
;; 		(containsInformation ?Title (possesses ?Agent ?Property))))

(tell (BinaryPredicate bankAccount))
(tell (AsymmetricSumorelation bankAccount))
(tell (sumodocumentation bankAccount "(&%bankAccount ?Type ?Bank) holds if ?Type is a
type of the financial accounts offered by the bank."))

;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=>
;; 	(bankAccount ?AccountType ?Bank)
;; 	(exists (?Account)
;; 		(and
;; 			(instance ?Account ?AccountType)
;; 			(accountAt ?Account ?Bank))))

(tell (sumodocumentation ServiceAttribute "The class of attribute-rels which describe
&%CommercialServices, such as &%OpenService and &%ClosedService."))

(tell (ServiceAttribute OpenService))
;; sumo2loom is dropping the following statement because it uses
;; contraryAttribute, which is a VariableArityRelation:
;; (contraryAttribute OpenService ClosedService)
(tell (sumodocumentation OpenService "The attribute-rel which describes services that
are ready to transact business."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(exists (?Transaction)
;; 		(and
;; 			(instance ?Transaction FinancialTransaction)
;; 			(destination ?Transaction ?Agent)))
;; 	(and
;; 		(instance ?Service CommercialService)
;; 		(agent ?Service ?Agent)
;; 		(attribute ?Service OpenService)))

(tell (ServiceAttribute ClosedService))
(tell (sumodocumentation ClosedService "The attribute-rel which describes services that are
shut or closed."))

(tell (FinancialInstrument Receipt))
(tell (sumodocumentation Receipt "A written acknowledgment that a specified article,
sum of money, or shipment of merchandise has been received."))

(tell (sumodocumentation Request "The request data being sent."))

;; definition of Response

(tell (sumodocumentation Response "The response data."))

;; definition of responseTo

(tell (BinaryPredicate responseTo))
(tell (sumodocumentation responseTo "(&%responseTo ?Response ?Request) means that
?Response is a Response to the Request ?Request."))

(tell (TernaryPredicate dailyLimit))
(tell (sumodocumentation dailyLimit "(&%dailyLimit ?Account ?TransactionType ?Amount)
means that ?Amount is the daily limit of the ?Account for the type of
&%FinancialTransactions ?TransactionType."))

(tell (BinaryPredicate accountStatus))
(tell (sumodocumentation accountStatus "(&%accountStatus ?Account ?Status) holds if
?Status describes the status of the account, such as &%Active, &%Locked,
&%New or &%Pending."))


(tell (StatusAttribute New))

(tell (StatusAttribute Active))

(tell (StatusAttribute Locked))

(tell (StatusAttribute Pending))

(tell (BinaryPredicate administrator))

(tell (BinaryPredicate administratorStatus))
(tell (sumodocumentation administratorStatus "(&%administratorStatus ?Administrator ?Status)
holds is ?Status describes the status of the administrator."))

(tell (BinaryPredicate dateOfStatement))
(tell (sumodocumentation dateOfStatement "(&%dateOfStatement ?Statement ?Date) holds if
?Date is the date when BankStatement was issued."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(dateOfStatement ?Statement ?Date)
;; 	(exists (?Copy)
;; 		(and
;; 			(containsInformation ?Copy ?Statement)
;; 			(date ?Copy ?Date))))

(tell (BinaryPredicate lastStatementBalance))
(tell (sumodocumentation lastStatementBalance "(&%lastStatementBalance ?Account ?Amount)
holds if ?Amount is the balance shown on the last statement."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(lastStatementBalance ?Account ?Balance)
;; 	(exists (?Statement)
;; 		(and
;; 			(lastStatement ?Account ?Statement)
;; 			(dateOfStatement ?Statement ?Date)
;; 			(currentAccountBalance ?Account ?Date ?Account))))

(tell (BinaryPredicate statementAccount))
(tell (sumodocumentation statementAccount "(&%statementAccount ?Statement ?Account) means
that ?Account is the account of the BankStatement ?Statement."))

(tell (BinaryPredicate statementPeriod))
(tell (sumodocumentation statementPeriod "(&%statementPeriod ?Statement ?Period) means that
?Period is the time period of the BankStatement ?Statement."))



(tell (BinaryPredicate statementInterest))
(tell (sumodocumentation statementInterest "(&%statementInterest ?Statement ?Amount) holds
if ?Amount is the interest amount as shown on the BankStatement ?Statement."))

;; Logic error -- ?Amount variable roams free in consequent.
;;(=>
;;	(and
;;		(statementInterest ?Statement ?Interest)
;;		(statementPeriod ?Statement ?Period)
;;		(statementAccount ?Statement ?Account))
;;	(interestEarned ?Account ?Amount ?Period))

(tell (sumodocumentation buyingPowerAmount "(&%buyingPowerAmount ?Account ?Amount) holds
if ?Amount is the buying power amount of the FinancialAccount ?Account."))

(tell (sumodocumentation marginBalanceAmount "(&%marginBalanceAmount ?Account ?Amount)
holds if ?Amount is the margin balance amount of the FinancialAccount ?Account."))

(tell (sumodocumentation shortBalanceAmount "(&%shortBalanceAmount ?Account ?Amount) holds
if ?Amount is the short balance amount of the FinancialAccount ?Account."))

(tell (sumodocumentation shortBalanceAmount "(&%marketvalueAmount ?Account ?Amount) holds
if ?Amount is the market value amount of the FinancialAccount ?Account."))

(tell (sumodocumentation ExternalTransfer "A subclass of &%FinancialTransactions from one
&%FinancialOrganization to another."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Transfer ExternalTransfer)
;; 		(origin ?Transfer ?Organization1)
;; 		(instance ?Organization1 FinancialOrganization)
;; 		(destination ?Transfer ?Organization2)
;; 		(instance ?Organization2 FinancialOrganization))
;; 	(not (equal ?Organization1 ?Organization2)))

(tell (sumodocumentation InternalTransfer "A subclass of &%FinancialTransactions within
one &%FinancialOrganization."))


(tell (sumodocumentation Update "To change data in a file or database"))

(tell (BinaryPredicate loanFeeAmount))
(tell (sumodocumentation loanFeeAmount "(&%loanFeeAmount ?Loan ?Amount) means that
?Amount is the fee amount of the Loan ?Loan."))


;; ======================================================
;; Services DOMAIN ONTOLOGY rev. ?? downloaded 2002-10-08
;; ======================================================

;;This section is from Olga Babko-Malaya's file: OntologyOfService.txt
;; Upper Ontology of Services

;; definition of WebService
(tell (sumodocumentation WebService "Web sites that do not merely provide static information but allow one to effect some action or change in the world, such as the sale of a product or the control of a physical device."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Service WebService)
;; 	(exists (?Resource)
;; 		(providesAService ?Service ?Resource)))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(and
;; 		(instance ?Service WebService)
;; 		(instance ?Using UsingAService)
;; 		(patient ?Using ?Service)
;; 		(agent ?Using ?User)
;; 		(providesAService ?Service ?Provider))
;; 	(exists (?Contract)
;; 		(and
;; 			(instance ?Contract ServiceContract)
;; 			(agreementMember ?Contract ?User)
;; 			(agreementMember ?Contract ?Provider))))

; definition of PrimitiveService
(tell (sumodocumentation PrimitiveService "Primitive services are services which invoke only a single Web-accessible computer program, sensor, or  device that does not rely upon another Web service, and there is no ongoing interaction between the user and the service, beyond a simple response. For example, a service that returns a postal code or the longitude and latitude when given an address would be in this category."))

;; definition of ComplexService
(tell (sumodocumentation ComplexService
"Complex services are composed of multiple primitive services, often requiring an interaction or conversation between the user and the services, so that the user can make choices and provide information conditionally."))


;; definition of UsingAService
(tell (sumodocumentation UsingAService "Interaction between the user and the service"))


;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Using UsingAService)
;; 	(exists (?Service)
;; 		(and
;; 			(instance ?Service WebService)
;; 			(patient ?Using ?Service))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Using UsingAService)
;; 	(exists (?User)
;; 		(and
;; 			(instance ?User ServiceUser)
;; 			(agent ?Using ?User))))

;; sumo2loom is dropping the following statement because it uses
;; precondition, which sometimes takes propositions as arguments:
;; (=>
;; 	(and
;; 		(instance ?Using UsingAService)
;; 		(instance ?Service WebService)
;; 		(instance ?User ServiceUser)
;; 		(patient ?Using ?Service)
;; 		(agent ?Using ?User))
;; 	(precondition ?Using (hasAccess ?User ?Service)))


;; definition of ServiceUser
(tell (sumodocumentation ServiceUser "An Agent who requests a particular service"))


;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?User ServiceUser)
;; 	(exists (?Process)
;; 		(and
;; 			(instance ?Process ServiceProcess)
;; 			(effector ?Process ?User))))

;; definition of AccessingAService
(tell (sumodocumentation AccessingAService "To enter an online service"))


;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Access AccessingAService)
;; 	(exists (?Service)
;; 		(and
;; 			(instance ?Service WebService )
;; 			(destination ?Access ?Service))))


;; sumo2loom is dropping the following statement because it uses
;; hasPurposeForAgent, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(instance ?Access AccessingAService)
;; 		(instance ?Service WebService )
;; 		(destination ?Access ?Service)
;; 		(agent ?Access ?Agent))
;; 	(hasPurposeForAgent ?Access
;; 		(exists (?Using)
;; 			(and
;; 				(instance ?Using UsingAService)
;; 				(patient ?Using ?Service)
;; 				(agent ?Using ?Agent))) ?Agent))

;; sumo2loom is dropping the following statement because it uses
;; holdsDuring, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(instance ?Access AccessingAService)
;; 		(instance ?Service WebService )
;; 		(destination ?Access ?Service)
;; 		(agent ?Access ?Agent))
;; 	(holdsDuring (ImmediateFutureFn (WhenFn ?Access)) (hasAccess ?User ?Service)))

;; definition of hasAccess
(tell (AsymmetricSumorelation hasAccess))
(tell (sumodocumentation hasAccess "(hasAccess ?User ?Service) holds if ?User is authorized to use the WebService ?Service"))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;; 	(hasAccess ?User ?Service)
;; 	(exists (?Using)
;; 		(and
;; 			(subclass ?Using UsingAService)
;; 			(forall (?Use)
;; 				(=>
;; 					(instance ?Use ?Using)
;; 					(patient ?Use ?Service)))
;; 			(holdsAuthority ?Using ?User))))



;; definition of ServiceProfile
(tell (sumodocumentation ServiceProfile  "The service profile tells what the service does; that is, it gives the type of information needed by a service-seeking agent-rel to determine whether the service meets its needs (typically such things as input and output types, preconditions and postconditions, and binding patterns)."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Profile ServiceProfile)
;; 	(exists (?Service)
;; 		(presentsAProfile ?Profile ?Service)))


;; definition of ServiceModel
(tell (sumodocumentation ServiceModel "The service model tells how the service works; that is, it describes what happens when the service is carried out."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Model ServiceModel)
;; 	(exists (?Service)
;; 		(implementsAModel ?Model ?Service)))



;; definition of ServiceGrounding
(tell (sumodocumentation ServiceGrounding " ServiceGrounding specifies the details of how an agent-rel can access a service.  Typically a grounding may specify some well known communications protocol (e.g., RPC, HTTP-FORM, CORBA IDL, SOAP, Java remote calls, OAA, Jini), and service-specific  details such as port numbers used in contacting the service.  In  addition, the grounding must specify, for each abstract type specified  in the ServiceModel, an unambigous way of exchanging data elements of  that type with the service (that is, marshalling / serialization  techniques employed)."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Grounding ServiceGrounding)
;; 	(exists (?Service)
;; 		(supportsAGrounding ?Grounding ?Service)))




;; definition of presentsAProfile
(tell (AsymmetricSumorelation presentsAProfile))
(tell (sumodocumentation presentsAProfile
"(presentsAProfile ?Profile ?Service) means that ?Profile represents the type of information needed by a service-seeking agent-rel to determine  whether the service ?Service meets its needs"))

;; definition of implementsAModel
(tell (AsymmetricSumorelation implementsAModel))
(tell (sumodocumentation implementsAModel"(implementsAModel ?Model ?Service) holds if ?Model describes what happens when the service ?Service is carried out"))

;; definition of supportsAGrounding
(tell (AsymmetricSumorelation supportsAGrounding))
(tell (sumodocumentation supportsAGrounding "(supportsAGrounding ?Grounding ?Service) holds if ?Grounding represents the details  of how an agent-rel can access the service ?Service"))

;; definition of ServiceProvider
(tell (sumodocumentation ServiceProvider "A website which provides a service"))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Resource ServiceProvider)
;; 	(exists (?Service)
;; 		(providesAService ?Resource ?Service)))

;; definition of providesAService
(tell (AsymmetricSumorelation providesAService))
(tell (sumodocumentation providesAService "(providesAService ?Service ?Provider) holds if ?Provider is a website which offers the WebService ?Service"))

;; definition of Website
(tell (sumodocumentation Website "A server that contains Web pages and other files which is online to the Internet 24 hours a day."))

;; Ontology of Service Profiles

;; definition of serviceName
(tell (sumodocumentation serviceName "The Service Name refers to the name of the service that is being offered"))



;; definition of intendedPurpose
(tell (AsymmetricSumorelation intendedPurpose))
(tell (sumodocumentation intendedPurpose
"(intendedPurpose ?Service ?Purpose) means that ?Purpose provides a brief description of ?Service.  This would typically appear within an advertisement to summarise  what the service offers, or within a  request to describe what is being requested"))

;; sumo2loom is dropping the following statement because it uses
;; intendedPurpose, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(intendedPurpose ?Service ?Purpose)
;; 		(presentsAProfile ?Profile ?Service))
;; 	(subsumesContentInstance ?Profile ?Purpose))

;; sumo2loom is dropping the following statement because it uses
;; intendedPurpose, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(intendedPurpose ?Service ?Purpose)
;; 		(programRunning ?Process ?Service))
;; 	(hasPurpose ?Process ?Purpose))

;; definition of requestedBy
(tell (AsymmetricSumorelation requestedBy))
(tell (sumodocumentation requestedBy "This predicate links the service to an Agent who requests the service."))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(requestedBy ?Service ?Agent)
;; 	(exists (?Request)
;; 		(and
;; 			(instance ?Request UserRequest)
;; 			(effector ?Request ?Agent))))

;; definition of domainResource
(tell (AsymmetricSumorelation sumodomainResource))
(tell (sumodocumentation sumodomainResource "DomainResource are resources that are necessary for the task to be executed.They may include  computational resources such as bandwidth or disk space as well as more material resources consumed  when the service controls some machinery"))

;; sumo2loom is dropping the following statement because it uses
;; domainResource, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(domainResource ?Service ?Resource)
;; 		(presentsAProfile ?Profile ?Service))
;; 	(subsumesContentInstance ?Profile ?Resource))


;; definition of serviceInput
(tell (AsymmetricSumorelation serviceInput))
;; DWF: domain and range conflict with parent relation
;; (subrelation serviceInput precondition)
(tell (sumodocumentation serviceInput
"An input specifies the information that the service requires to proceed with the computation. For  example, a book-selling service could require the credit card number and bibliographical information  of the book  to sell."))

;; sumo2loom is dropping the following statement because it uses
;; serviceInput, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(serviceInput ?Service ?Input)
;; 		(presentsAProfile ?Profile ?Service))
;; 	(subsumesContentInstance ?Profile ?Input))

;; definition of serviceOutput
(tell (AsymmetricSumorelation serviceOutput))
(tell (sumodocumentation serviceOutput "An output specifies what is the result of the operation of the service."))

;; sumo2loom is dropping the following statement because it uses
;; serviceOutput, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(serviceOutput ?Service ?Output)
;; 		(presentsAProfile ?Profile ?Service))
;; 	(subsumesContentInstance ?Profile ?Output))

;; sumo2loom is dropping the following statement because it uses
;; serviceOutput, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(serviceOutput ?Service ?Output)
;; 		(programRunning ?Process ?Service))
;; 	(result ?Process ?Output))

;; definition of conditionalOutput
(tell (AsymmetricSumorelation conditionalOutput))


;; definition of servicePrecondition
(tell (AsymmetricSumorelation servicePrecondition))
;; DWF: domain and range conflict with parent relation
;; (subrelation servicePrecondition precondition)
(tell (sumodocumentation servicePrecondition "Preconditions present one or more logical conditions that should be satisfied prior to the service being requested"))

;; sumo2loom is dropping the following statement because it uses
;; servicePrecondition, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(servicePrecondition ?Service ?Formula)
;; 		(presentsAProfile ?Profile ?Service))
;; 	(subsumesContentInstance ?Profile ?Formula))

;; definition of accessCondition
(tell (AsymmetricSumorelation accessCondition))
(tell (sumodocumentation accessCondition
"Access conditions are conditions or restrictions that have to be satisfied prior to engaging the service."))

;; sumo2loom is dropping the following statement because it uses
;; accessCondition, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(accessCondition ?Service ?Condition)
;; 		(presentsAProfile ?Profile ?Service))
;; 	(subsumesContentInstance ?Profile ?Condition))

;; sumo2loom is dropping the following statement because it uses
;; accessCondition, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(accessCondition ?Service ?Condition)
;; 		(instance ?Access AccessingAService)
;; 		(destination ?Access ?Service))
;; 	(precondition ?Access ?Condition))

;; definition of serviceEffect
(tell (AsymmetricSumorelation serviceEffect))
(tell (sumodocumentation serviceEffect "An effect is an event that is caused by the successful execution of a service."))


;; definition of conditionalEffect

;; definition of geographicRadius
(tell (AsymmetricSumorelation geographicRadius))
(tell (sumodocumentation geographicRadius  "The Geographic Radius refers to the geographic scope of the	service.  This may be at the global or national scale (e.g. for ecommerce) or at a local scale (eg pizza delivery)"))

;; definition of degreeOfQuality
(tell (AsymmetricSumorelation degreeOfQuality))
;; DWF: domain conflicts with parent relation
;; (subrelation degreeOfQuality attribute)
(tell (sumodocumentation degreeOfQuality "DegreeOfQuality provide qualifications about the service."))

;; definition of ServiceAttribute

;; definition of CheapestService
(tell (ServiceAttribute CheapestService))

;; definition of FastestService
(tell (ServiceAttribute FastestService))

;; definition of averageResponseTime
;; DELETED -- it was broken.

;; definition of maxResponseTime
;; DELETED -- it was broken.

;; definition of communicationThru
(tell (AsymmetricSumorelation communicationThru))
(tell (sumodocumentation communicationThru "communicationThru is a sumoproperty of a Service Profile.	This sumoproperty provides high level information on how a service may communicate, such as the ACL (eg FIPA, KQML, SOAP etc).  This summarises the descriptions provided by the Service Grounding and are used when matching services; it is not intended to replace the	detail provided by the Service Grounding."))

;; sumo2loom is dropping the following statement because it uses
;; communicationThru, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(communicationThru ?Service ?Formula)
;; 		(presentsAProfile ?Profile ?Service))
;; 	(subsumesContentInstance ?Profile ?Formula))


;; definition of serviceType
(tell (AsymmetricSumorelation serviceType))
(tell (sumodocumentation serviceType "The Service Type refers to a high level classification of the service, for example B2B, B2C etc"))

;; definition of B2BService

;; definition of B2CService

;; definition of serviceProduct
(tell (AsymmetricSumorelation serviceProduct))

;; definition of qualityGuarantee
(tell (AsymmetricSumorelation qualityGuarantee))
(tell (sumodocumentation qualityGuarantee "QualityGuarantees are guarantees that the service promises to deliver, such as guaranteeing to provide the lowest possible interest rate, or a response within 3 minutes, etc."))

;; sumo2loom is dropping the following statement because it uses
;; qualityGuarantee, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(qualityGuarantee ?Service ?Promise)
;; 		(presentsAProfile ?Profile ?Service))
;; 	(subsumesContentInstance ?Profile ?Promise))

;; definition of qualityRating
(tell (AsymmetricSumorelation qualityRating))
(tell (sumodocumentation qualityRating "The quality rating sumoproperty represents an expandable list of rating RDF properties that may accompany a service profile. These ratings refer to industry accepted ratings, such as the Dun and Bradstreet Rating for businesses, or the Star rating for Hotels."))

;; definition of HotelStarRating

;; definition of DAndBRating

;; definition of Advertisement
(tell (sumodocumentation Advertisement "This class is a subclass of the service profile and represents the class that is used to advertise the service with other entities, such as middle agent-rels"))

;; definition of ServiceRequest
(tell (sumodocumentation ServiceRequest "This class represents the class that is used to describe service requests"))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Request ServiceRequest)
;; 	(exists (?Service)
;; 		(destination ?Request ?Service)))


;; definition of serviceLocation
(tell (sumodocumentation serviceLocation "This predicate limits the scope or availability of a service to some area"))


;; Ontology of Processes


;; definition of ServiceProcess
(tell (sumodocumentation ServiceProcess "A subclass of ComputerProcess which executes a WebService"))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Process ServiceProcess)
;; 	(exists (?Service)
;; 		(and
;; 			(instance ?Service WebService)
;; 			(programRunning ?Process ?Service))))

;; definition of topLevelProcess

;; definition of processPrecondition
;; DWF: range conflicts with parent relation
;; (subrelation processPrecondition precondition)
(tell (sumodocumentation processPrecondition "Process preconditions may include knowledge preconditions (agent-rel knows credit card number) as well as world Precondition (baud rate > 56Kb)"))

;; definition of processEffect
(tell (AsymmetricSumorelation processEffect))
(tell (sumodocumentation processEffect "(processEffect ?Process ?Effect) means that ?Effect describes the effects of the process"))

;; sumo2loom is dropping the following statement because it uses
;; processEffect, which has Formula in its domain:
;; (=>
;; 	(and
;; 		(processEffect ?Process ?EffectDescription)
;; 		(represents ?EffectDescription ?Effect))
;; 	(causes ?Process ?Effect))



;; The following temporal predicates can be replaced by the SUMO temporal predicates, as indicated by the'subrelation' relation or corresponding KIF formulas

;; definition of atTime
(tell (sumodocumentation atTime "Time of an instantaneous Event"))

;; definition of startTime
(tell (TemporalSumorelation startTime))
(tell (AsymmetricSumorelation startTime))
(tell (sumodocumentation startTime "Start time for the Event"))



;; definition of endTime
(tell (TemporalSumorelation endTime))
(tell (AsymmetricSumorelation endTime))
(tell (sumodocumentation endTime "End time for the Event"))


;; the predicate 'during' can be replaced by SUMO constants 'duration' or 'WhenFn'.


;; Ontology of Composite Events

;; definition of CompositeProcess
(tell (sumodocumentation CompositeProcess
"CompositeProcesses are complex events that have additional properties with respect to the ordering and conditional execution of individual events"))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Process CompositeEvent)
;; 	(exists (?Component)
;; 		(processComponent ?Component ?Process)))

;; definition of processComponent

;; definition of SequenceProcess
(tell (sumodocumentation SumosequenceProcess "A list of processes to be done in order"))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;; 	(instance ?Process SequenceProcess)
;; 	(forall (?Component1 ?Component2)
;; 		(=>
;; 			(and
;; 				(processComponent ?Component1 ?Process)
;; 				(processComponent ?Component2 ?Process)
;; 				(equal ?Time1 (WhenFn ?Component1))
;; 				(equal ?Time2 (WhenFn ?Component2)))
;; 			(or
;; 				(before (EndFn ?Time1) (BeginFn ?Time2))
;; 				(before (EndFn ?Time2) (BeginFn ?Time1))))))

;; definition of SplitProcess
(tell (sumodocumentation SplitProcess "The components of a Split process are a bag of subprocesses to be executed concurrently"))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=>
;; 	(instance ?Process SplitProcess)
;; 	(forall (?Component1 ?Component2)
;; 		(=>
;; 			(and
;; 				(processComponent ?Component1 ?Process)
;; 				(processComponent ?Component2 ?Process)
;; 				(equal ?Time1 (WhenFn ?Component1))
;; 				(equal ?Time2 (WhenFn ?Component2)))
;; 			(overlapsTemporally ?Time1 ?Time2))))


;; constants from Financial Ontology

;; definition of agreementMember
(tell (BinarySumorelation agreementMember))
(tell (sumodocumentation agreementMember "(agreementMember ?Agreement ?Agent) means that ?Agent is one of the participants of the Agreement"))


;; constants from QoS ontology

;; definition of ComputationalSystem
(tell (sumodocumentation ComputationalSystem "Instances of ComputationalSystems include instances of SoftwareSystems, HardwareSystems, and ComputerNetworks"))


;; definition of Server
(tell (sumodocumentation Server "A computer in a network shared by multiple users. The term may refer to both the hardware and software or just the software that performs the service."))


;;definition of ComputerProcess
(tell (sumodocumentation ComputerProcess "An instance of ComputerProcess is a process which manipulates data in the computer"))


;; definition of programRunning
(tell (sumodocumentation programRunning
"(programRunning ?Process ?Program) means that the ComputerProcess ?Process is executing the ComputerProgram ?Program"))


;;definition of responseTime
(tell (BinarySumorelation responseTime))
(tell (sumodocumentation responseTime "The time it takes for the computer to comply with a user's request, such as looking up a customer record."))


;; definition of UserRequest
(tell (sumodocumentation UserRequest "A request made by a ComputerUser, such as looking up a customer record"))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?Request UserRequest)
;; 	(exists (?User)
;; 		(and
;; 			(instance ?User ComputerUser)
;; 			(effector ?Request ?User))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Additional service ontology
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;Below are concepts found in the DAML-S specs but which do not occur in SUMO nor in Olga Babko-Malaya's file OntologyOfServices.txt.



;;definition of serviceParameter
(tell (sumodocumentation serviceParameter "An expandable list of RDF properties that may accompany a profile description."))
(tell (AsymmetricSumorelation serviceParameter))


;;definition of serviceCategory
(tell (sumodocumentation serviceCategory "The Service Category refers to an ontology of services that may be on offer. High level services may include: Products, Problem Solving Capabilities, Commercial Services, Information, etc."))

;;definition of serviceName
(tell (sumodocumentation serviceName "A  relation between  instances of the class ServiceProvider and the name(s) of a service."))
(tell (AsymmetricSumorelation serviceName))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?SERVICE ServiceProvider)
;; 	(exists (?NAME )
;; 		(name  ?SERVICE ?NAME    )))

;;definition of serviceFax
(tell (sumodocumentation serviceFax "A relation between  instances of the class ServiceProvider and the fax number(s) of a service."))
(tell (AsymmetricSumorelation serviceFax))
;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?SERVICE ServiceProvider)
;; 	(exists (?FAX )
;; 		(fax  ?SERVICE ?FAX    )))

;;definition of serviceEmail
(tell (sumodocumentation serviceEmail "A  relation between  instances of the class ServiceProvider and the email address(es) of a service."))
(tell (AsymmetricSumorelation serviceEmail))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?SERVICE ServiceProvider)
;; 	(exists (?EMAIL )
;; 		(email  ?SERVICE ?EMAIL    )))

;;definition of serviceAddress
(tell (sumodocumentation serviceAddress "A  relation between  instances of the class ServiceProvider and the postal address(es) of a service."))
(tell (AsymmetricSumorelation serviceAddress))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?SERVICE ServiceProvider)
;; 	(exists (?ADDRESS )
;; 		(physicalAddress  ?SERVICE ?ADDRESS    )))

;;definition of servicePhone
(tell (sumodocumentation servicePhone "A  relation between  instances of the class ServiceProvider and the phone number(s) of a service."))
(tell (AsymmetricSumorelation servicePhone))
;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?SERVICE ServiceProvider)
;; 	(exists (?PHONE )
;; 		(phone  ?SERVICE ?PHONE    )))

;;definition of serviceWebUrl
(tell (sumodocumentation serviceWebUrl "A  relation between  instances of the class ServiceProvider and the webUrl(s) of a service."))
(tell (AsymmetricSumorelation serviceWebUrl))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?SERVICE ServiceProvider)
;; 	(exists (?WEBURL)
;; 		(webURL ?SERVICE ?WEBURL  )))



(tell (sumodocumentation ProcessControlStatus "The set of process control statuses."))
(tell (ProcessControlStatus OnGoing))
(tell (ProcessControlStatus Aborted))
(tell (ProcessControlStatus Suspended))
(tell (ProcessControlStatus Cancelled))
(tell (ProcessControlStatus Completed))

;;definition of controlStatus
;;(documentation controlStatus)
(tell (AsymmetricSumorelation controlStatus))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?PROCESS Process)
;; 	(exists (?STATUS)
;; 		(currentStatus ?PROCESS ?STATUS  )))

;;From the Merge ontology
(tell (SymmetricSumorelation sumoinverse))
(tell (sumodocumentation sumoinverse "The sumoinverse of a &%BinarySumorelation is a relation in which all the tuples of the original relation are reversed. In other words, one &%BinarySumorelation is the sumoinverse of another if they are equivalent when their arguments are swapped."))

;;definition of some inverse relations for DAML-S

;;definition of processParticipant
(tell (sumodocumentation processParticipant "A (process) participant is a type of parameter and outputs are properties of events. The top level ontology doesn't restrict them at all. A participant can be any kind of daml object (Thing).  Specific events will specialize this sumoproperty by restricting the sumorange to types of agent-rels, objects, entities, etc."))
(tell (AsymmetricSumorelation processParticipant))

;;definition of processInput
(tell (sumodocumentation processInput "An input is a type of parameter and are properties of events. The top level ontology doesn't restrict them at all. An input can be any kind of daml object (Thing).  Specific events will specialize this sumoproperty by restricting the sumorange appropriately; such as required inputs, derivable inputs, etc."))
(tell (AsymmetricSumorelation processInput))


;;definition of processOutput
(tell (sumodocumentation processOutput "An output is a type of parameter and outputs are properties of events. The top level ontology doesn't restrict them at all. An output can be any kind of daml object (Thing).  Specific events will specialize this sumoproperty by restricting the sumorange."))
(tell (AsymmetricSumorelation processOutput))

;;definition of processName
(tell (sumodocumentation processName "Processes have a name, parameter, precondition, and effect."))
(tell (AsymmetricSumorelation processName))


;;definition of serviceTextDescription
(tell (sumodocumentation serviceTextDescription "The relation between a service and a text which describes the service." ))
(tell (AsymmetricSumorelation serviceTextDescription))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>
;; 	(instance ?SERVICE ServiceName)
;; 	(exists (?TEXT)
;; 		(serviceTextDescription ?SERVICE ?TEXT  )))

;;definition of the class TextDescription
(tell (sumodocumentation TextDescription "The TextDescription provides a briefdescription of the service. This would typically appear within an advertisement to summarise what the service offers, or within a request to describe what is being requested."))

;;definition of role
(tell (sumodocumentation role "This sumoproperty links the service profile to a ServiceActor. The ServiceActor is the entity that provides the service or makes the request.  See the description of ServiceActor. Different roles can be subpropertied from the sumoproperty role to portray specific roles."))
(tell (AsymmetricSumorelation role))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=> (instance ?PROCESS UsingAService)(exists ?ROLE (role ?PROCESS ?ROLE)))

(tell (sumodocumentation ServiceActor "The class of service users and service providers."))
;; sumo2loom is dropping the following statement because it
;; wants to be an implication:
;; (equal ServiceActor (UnionFn ServiceProvider ServiceUser))

;;The definitions which follow pertain to the DAML-S notions of sequence.
;;definition of the class Sequence
(tell (sumodocumentation Sumosequence "The class of functions whose sumodomain is a subclass of the natural numbers"))

;;Axioms
;; sumo2loom is only translating half of this implication because the other
;; half has a nontrivial consequent:
;; (<=> (instance ?SEQ Sequence) (and (instance ?SEQ UnaryFunction) (subclass (DomainFn ?SEQ) Integer) (subclass (RangeFn ?SEQ) Entity)))

;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (=> (instance ?SEQ Sequence) (exists ?REL (and (equal (DomainFn ?REL) (RangeFn ?SEQ)) (forall (?X ?Y ?M ?N) (=> (and (instance ?X (RangeFn ?SEQ)) (instance ?Y (RangeFn ?SEQ)) (instance ?N Integer) (instance ?M Integer) (equal (AssignmentFn ?SEQ ?N) ?X) (equal (AssignmentFn ?SEQ ?M) ?Y) ) (<=> (holds ?REL ?X ?Y) (lessThan ?N ?M) ) ) ) ) ) )

;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (=> (holds ?REL ?X ?Y) (exists ?SEQ (and(instance ?SEQ Sequence) (equal (IthMemberOfSeq ?SEQ 1) ?X) (equal (IthMemberOfSeq ?SEQ 2) ?Y) (equal (LengthOfSeq ?SEQ) 2))))

;; sumo2loom is skipping this implication because it has a nontrivial
;; consequent:
;; (=>(instance ?SEQ Sequence)(exists ?CLASS(<=> (instance ?X ?CLASS)(exists ?INT (equal ?X (ithMemberOfSeq ?SEQ ?INT))))))

;;LengthOfSeqFn
(tell (sumodocumentation LengthOfSeqFn "The function which returns the length of an input sequence."))
(tell (UnarySumofunction LengthOfSeqFn))

;;Axioms
;; sumo2loom is dropping the following statement because it
;; wants to be an implication:
;; (equal (LengthOfSeqFn NullSeq) 0)

;;HeadOfSeqFn
(tell (sumodocumentation HeadOfSeqFn "A function which returns, for an input sequence S, that sequence which consists of the first member of the sequence S, if it exists, or the NullSumoset if the sequence is the NullSumosequence."))
(tell (UnarySumofunction HeadOfSeqFn))

;;Axioms
;; sumo2loom is dropping the following statement because it
;; wants to be an implication:
;; (equal (InitialMemberSeqFn NullSeq) NullSet)


;;TailOfSeqFn
(tell (sumodocumentation TailOfSeqFn "A function which returns, for an input sequence S, that sequence which results from S after removing S's first element, if the length of S is greater than 1. If the length of S is 1 or 0, then this function returns the NullSeq."))
(tell (UnarySumofunction TailOfSeqFn))

;;ReverseSeqFn
(tell (sumodocumentation ReverseSeqFn "A function which returns the result of reversing the order of elements of a sequence."))
(tell (UnarySumofunction ReverseSeqFn))


;;IthMemberOfSeqFn
(tell (sumodocumentation IthMemberOfSeqFn "This function returns the Ith member of a sequence S, where I is an integer and I is greater than 0 and less than or equal to the length of S. If I is 0 or is greater than the length of S, or if S is the NullSeq, then this function returns the null set."))
(tell (BinarySumofunction IthMemberOfSeqFn))

;;Axioms


;;ConcatSeqFn
(tell (sumodocumentation ConcatSeqFn "This function, which takes as input two sequences, S1 and S2, in that order, returns the concatenation of the sequences, in the order S1^S2."))
(tell (BinarySumofunction ConcatSeqFn))


;;NullSeq
(tell (sumodocumentation NullSeq "The null sequence, which has length 0."))
(tell (Sumosequence NullSeq))
;; sumo2loom is dropping the following statement because it
;; wants to be an implication:
;; (equal (LengthOfSeqFn NullSeq) 0)

;;OneToOneUnaryFunction
(tell (sumodocumentation OneToOneUnarySumofunction "The class of functions which are one to one; i.e., a function F is one to one if and only if for all X, Y in the sumodomain of F, if X is not identical to Y, then F(X) is not identical to F(Y)."))

;;Axioms
;; sumo2loom is dropping the following statement because it uses
;; forall, which translates to uncomputable Loom query expressions:
;; (<=> (instance ?FUN OneToOneUnaryFunction) (and (instance ?FUN Function) (forall (?X ?Y) (=> (and (instance ?X (DomainFn ?FUN)) (instance ?Y (DomainFn ?FUN)) (not (equal ?X ?Y))) (not (equal ((AssignmentFn ?FUN) ?X) ((AssignmentFn ?FUN) ?Y)))))))


;;homomorphism
(tell (sumodocumentation homomorphism "A function, FUN, defines a homomophism between two relations, REL1 and REL2, if and only if, for all X and Y, if REL1(X,Y) then  REL2(FUN(X),FUN(Y))."))
;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (<=>(homomorphism ?FUN ?REL1 ?REL2) (=>(holds ?REL1 ?X ?Y)(holds ?REL2 ((AssignmentFn ?FUN) ?X) ((AssignmentFn ?FUN ?Y)))))

;;isomorphism
(tell (sumodocumentation isomorphism "A function, FUN, defines a homomophism between two relations, REL1 and REL2, if and only if, for all X and Y, REL1(X,Y) if and only if REL2(FUN(X),FUN(Y))."))
;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (<=>(isomorphism ?FUN ?REL1 ?REL2) (<=>(holds ?REL1 ?X ?Y)(holds ?REL2 ((AssignmentFn ?FUN) ?X) ((AssignmentFn ?FUN ?Y)))))

;;MaxSeqFn
(tell (sumodocumentation MaxSeqFn "This function returns the maximum element of a sequence of integers."))
(tell (UnarySumofunction MaxSeqFn))

;;MinSeqFn
(tell (sumodocumentation MinSeqFn "This function returns the minimum value of a sequence of integers."))
(tell (UnarySumofunction MinSeqFn))


;;Pairing axiom
;; sumo2loom is dropping the following statement because it uses
;; holds, which is a VariableArityRelation:
;; (=>(holds ?REL ?X ?Y)(exists ?CLASS(and (instance ?CLASS Class)(instance ?X Class)(instance ?Y Class) (forall ?Z (<=>(instance ?Z ?CLASS)(or (equal ?Z ?Z)(equal ?Z ?Y)))))))
